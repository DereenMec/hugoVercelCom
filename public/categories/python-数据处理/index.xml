<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python 数据处理 on Dereen - 深海游泳</title>
    <link>https://happy.dereen.top/categories/python-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</link>
    <description>Recent content in Python 数据处理 on Dereen - 深海游泳</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 05 Dec 2018 12:46:25 +0800</lastBuildDate>
    
	<atom:link href="https://happy.dereen.top/categories/python-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python数据处理.Pandas数据处理&#43;Matplotlib绘图案例</title>
      <link>https://happy.dereen.top/post/dataprocess10/</link>
      <pubDate>Wed, 05 Dec 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess10/</guid>
      <description>利用pandas对数据进行预处理然后再使用matplotlib对处理后的数据进行数据可视化是数据分析中常用的方法。
第一组例子(星巴克咖啡店)  假如我们现在有这样一组数据：星巴克在全球的咖啡店信息，如下图所示。数据来源：starbucks_store_locations。
 店铺总数排名前10的国家 # coding=utf-8 # 统计店铺数排名前10的国家 import pandas as pd from matplotlib import pyplot as plt from matplotlib import font_manager # 准备工作 font = font_manager.FontProperties(fname=&amp;#34;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&amp;#34;) file_path = &amp;#34;./starbucks_store_worldwide.csv&amp;#34; df = pd.read_csv(file_path) # 处理数据 data1 = df.groupby(by=&amp;#34;Country&amp;#34;).count().sort_values(by=&amp;#34;Brand&amp;#34;, ascending=False)[:10][&amp;#34;Brand&amp;#34;] _x = data1.index _y = data1.values # 画图 plt.figure(figsize=(10,8), dpi=80) plt.bar(range(len(_x)), _y, width=0.5) plt.xticks(range(len(_x)), _x) plt.xlabel(&amp;#34;国家&amp;#34;, fontproperties=font) plt.ylabel(&amp;#34;店铺数&amp;#34;, fontproperties=font) plt.title(&amp;#34;星巴克咖啡店铺数排行前10（国家）&amp;#34;, fontproperties=font, size=20) plt.show() 结果如图：
中国店铺数排名前20的城市 # coding=utf-8 # 统计中国店铺数排名前20的城市 import pandas as pd from matplotlib import pyplot as plt from matplotlib import font_manager font = font_manager.</description>
    </item>
    
    <item>
      <title>Python数据处理.关于matplotlib绘制直方图偏移的问题</title>
      <link>https://happy.dereen.top/post/dataprocess09/</link>
      <pubDate>Sun, 02 Dec 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess09/</guid>
      <description>在使用pyplot绘制直方图的时候我发现了一个问题，在给函数.hist()传参的时候，如果传入的组数不是刚刚好（就是说这个组数如果是使用(最大值-最小值)/组距计算出来，而这个数字不是整除得来而是取整得来的话），图像就会产生偏移现象。
看下面这段代码：绘制IMDB排行前1000电影的时长分布直方图
# coding=utf-8 from matplotlib import pyplot as plt import pandas as pd # 数据准备 file_path = &amp;#34;./IMDB-Movie-Data.csv&amp;#34; df = pd.read_csv(file_path) runtime_data = df[&amp;#34;Runtime (Minutes)&amp;#34;] # 计算组数 max_runtime = max(runtime_data) min_runtime = min(runtime_data) num_bin = int((max_runtime-min_runtime)//6) # 配置图形参数 plt.figure(figsize=(20, 8), dpi=80) plt.grid(alpha=0.5) # 绘图 plt.hist(runtime_data, num_bin) plt.xticks(range(min_runtime, max_runtime+6, 6)) plt.show() 结果如下：  产生这个问题的原因就在于，在这个程序中max_runtime-min_runtime的值是125，不能被6整除，所以产生了偏移。 如果我们将上述代码中的(max_runtime-min_runtime)//6和plt.xticks(range(min_runtime, max_runtime+6, 6))中的6更换为一个能被125整除的数，比如5，结果会是如何呢？  我们可以看到问题解决了，偏移消失了，但是这并不是解决问题的根本办法，如果我们就是要用6作为组距而不想偏移呢？ 我们可以传入一个列表参数来解决这个问题  # coding=utf-8 from matplotlib import pyplot as plt import pandas as pd # 数据准备 file_path = &amp;#34;.</description>
    </item>
    
    <item>
      <title>Python数据处理.Pandas之索引</title>
      <link>https://happy.dereen.top/post/dataprocess08/</link>
      <pubDate>Fri, 30 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess08/</guid>
      <description>Pandas的标签处理需要分成多种情况来处理,Series和DataFrame根据标签索引数据的操作方法是不同的,单列索引和双列索引的操作方法也是不同的。
单列索引 In [2]: import pandas as pd In [3]: import numpy as np In [4]: df = pd.DataFrame(np.ones((2, 4)), index=list(&amp;#34;AB&amp;#34;), columns=list(&amp;#34;abcd&amp;#34;)) In [5]: df.iloc[0,0]=100 In [6]: df Out[6]: a b c d A 100.0 1.0 1.0 1.0 B 1.0 1.0 1.0 1.0 reindex所插入的标签如果是原来的标签中没有的，就会将该行的值全部置为NaN In [7]: df.reindex([&amp;#34;A&amp;#34;, &amp;#34;f&amp;#34;]) Out[7]: ssss a b c d A 100.0 1.0 1.0 1.0 f NaN NaN NaN NaN In [8]: df Out[8]: a b c d A 100.</description>
    </item>
    
    <item>
      <title>Python数据处理.pandas之时间序列</title>
      <link>https://happy.dereen.top/post/dataprocess07/</link>
      <pubDate>Fri, 23 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess07/</guid>
      <description>Pandas的标签处理需要分成多种情况来处理,Series和DataFrame根据标签索引数据的操作方法是不同的,单列索引和双列索引的操作方法也是不同的。
单列索引 In [2]: import pandas as pd In [3]: import numpy as np In [4]: df = pd.DataFrame(np.ones((2, 4)), index=list(&amp;#34;AB&amp;#34;), columns=list(&amp;#34;abcd&amp;#34;)) In [5]: df.iloc[0,0]=100 In [6]: df Out[6]: a b c d A 100.0 1.0 1.0 1.0 B 1.0 1.0 1.0 1.0 reindex所插入的标签如果是原来的标签中没有的，就会将该行的值全部置为NaN In [7]: df.reindex([&amp;#34;A&amp;#34;, &amp;#34;f&amp;#34;]) Out[7]: ssss a b c d A 100.0 1.0 1.0 1.0 f NaN NaN NaN NaN In [8]: df Out[8]: a b c d A 100.</description>
    </item>
    
    <item>
      <title>Python数据处理.pandas之时间序列</title>
      <link>https://happy.dereen.top/post/dataprocess06/</link>
      <pubDate>Mon, 19 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess06/</guid>
      <description>Pandas中提供了许多用来处理时间格式文本的方法，包括按不同方法生成一个时间序列，修改时间的格式，重采样等等。
按不同的方法生成时间序列 In [7]: import pandas as pd # 按起始和终止日期以及步长生成时间序列 In [8]: pd.date_range(start=&amp;#34;20171212&amp;#34;,end=&amp;#34;20180101&amp;#34;,freq=&amp;#34;D&amp;#34;) Out[8]: DatetimeIndex([&amp;#39;2017-12-12&amp;#39;, &amp;#39;2017-12-13&amp;#39;, &amp;#39;2017-12-14&amp;#39;, &amp;#39;2017-12-15&amp;#39;, &amp;#39;2017-12-16&amp;#39;, &amp;#39;2017-12-17&amp;#39;, &amp;#39;2017-12-18&amp;#39;, &amp;#39;2017-12-19&amp;#39;, &amp;#39;2017-12-20&amp;#39;, &amp;#39;2017-12-21&amp;#39;, &amp;#39;2017-12-22&amp;#39;, &amp;#39;2017-12-23&amp;#39;, &amp;#39;2017-12-24&amp;#39;, &amp;#39;2017-12-25&amp;#39;, &amp;#39;2017-12-26&amp;#39;, &amp;#39;2017-12-27&amp;#39;, &amp;#39;2017-12-28&amp;#39;, &amp;#39;2017-12-29&amp;#39;, &amp;#39;2017-12-30&amp;#39;, &amp;#39;2017-12-31&amp;#39;, &amp;#39;2018-01-01&amp;#39;], dtype=&amp;#39;datetime64[ns]&amp;#39;, freq=&amp;#39;D&amp;#39;) In [9]: pd.date_range(start=&amp;#34;20171212&amp;#34;,end=&amp;#34;20180101&amp;#34;,freq=&amp;#34;10D&amp;#34;) Out[9]: DatetimeIndex([&amp;#39;2017-12-12&amp;#39;, &amp;#39;2017-12-22&amp;#39;, &amp;#39;2018-01-01&amp;#39;], dtype=&amp;#39;datetime64[ns]&amp;#39;, freq=&amp;#39;10D&amp;#39;) # 按起始日期，数量和步长生成时间序列 In [10]: pd.date_range(start=&amp;#34;20171212&amp;#34;,periods=10,freq=&amp;#34;10D&amp;#34;) Out[10]: DatetimeIndex([&amp;#39;2017-12-12&amp;#39;, &amp;#39;2017-12-22&amp;#39;, &amp;#39;2018-01-01&amp;#39;, &amp;#39;2018-01-11&amp;#39;, &amp;#39;2018-01-21&amp;#39;, &amp;#39;2018-01-31&amp;#39;, &amp;#39;2018-02-10&amp;#39;, &amp;#39;2018-02-20&amp;#39;, &amp;#39;2018-03-02&amp;#39;, &amp;#39;2018-03-12&amp;#39;], dtype=&amp;#39;datetime64[ns]&amp;#39;, freq=&amp;#39;10D&amp;#39;) In [11]: pd.date_range(start=&amp;#34;20171212&amp;#34;,periods=10,freq=&amp;#34;M&amp;#34;) Out[11]: DatetimeIndex([&amp;#39;2017-12-31&amp;#39;, &amp;#39;2018-01-31&amp;#39;, &amp;#39;2018-02-28&amp;#39;, &amp;#39;2018-03-31&amp;#39;, &amp;#39;2018-04-30&amp;#39;, &amp;#39;2018-05-31&amp;#39;, &amp;#39;2018-06-30&amp;#39;, &amp;#39;2018-07-31&amp;#39;, &amp;#39;2018-08-31&amp;#39;, &amp;#39;2018-09-30&amp;#39;], dtype=&amp;#39;datetime64[ns]&amp;#39;, freq=&amp;#39;M&amp;#39;) # 如果取不到最后一天，这个时间序列就会停止在前一个生成的日期处 In [12]: pd.</description>
    </item>
    
    <item>
      <title>Python数据处理.Pandas之分组</title>
      <link>https://happy.dereen.top/post/dataprocess05/</link>
      <pubDate>Thu, 15 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess05/</guid>
      <description>&lt;p&gt;假如我们现在有这样一组数据：星巴克在全球的咖啡店信息，如下图所示。数据来源：&lt;a href=&#34;https://www.kaggle.com/starbucks/store-locations&#34;&gt;starbucks_store_locations&lt;/a&gt;。我们想要统计中国每个城市的星巴克商店的数量，那我们应该怎么做呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python数据处理.Pandas</title>
      <link>https://happy.dereen.top/post/dataprocess04/</link>
      <pubDate>Wed, 14 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess04/</guid>
      <description>&lt;p&gt;&lt;em&gt;pandas&lt;/em&gt; is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.这段话是pandas官方网站对于Pandas的介绍，翻译过来就是：pandas是一个开源的，BSD许可的库，为Python编程语言提供高性能，易于使用的&lt;strong&gt;数据结构和数据分析工具&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python数据处理.Numpy中的广播原则(机制)</title>
      <link>https://happy.dereen.top/post/dataprocess03/</link>
      <pubDate>Sun, 11 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess03/</guid>
      <description>为了了解这个原则，首先我们来看一组例子：
# 数组直接对一个数进行加减乘除，产生的结果是数组中的每个元素都会加减乘除这个数。 In [12]: import numpy as np In [13]: a = np.arange(1,13).reshape((4, 3)) In [14]: a * 2 Out[14]: array([[ 2, 4, 6], [ 8, 10, 12], [14, 16, 18], [20, 22, 24]]) # 接下来我们看一下数组与数组之间的计算 In [17]: b = np.arange(12,24).reshape((4,3)) In [18]: b Out[18]: array([[12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23]]) In [19]: a + b Out[19]: array([[13, 15, 17], [19, 21, 23], [25, 27, 29], [31, 33, 35]]) In [20]: c = np.</description>
    </item>
    
    <item>
      <title>Python数据处理.Numpy</title>
      <link>https://happy.dereen.top/post/dataprocess02/</link>
      <pubDate>Fri, 09 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess02/</guid>
      <description>numpy是一个在Python中做科学计算的基础库，重在数值计算，也是大部分PYTHON科学计算库的基础库，多用于在大型、多维数组上执行数值运算。
数组的定义 import numpy as np # numpy数组的定义方法 a = np.arange(1, 6， 2) b = np.array([1, 3, 5]) c = np.array(range(1, 6， 2)) # 这样产生的a,b,c三个结果是一样的，均为[1, 3, 5] # 这里看一下数组的类型和数组元素的类型的定义和修改，type（a）表示的是数组a的类型，a.dtype则表示的是数组a中元素的类型。 In [1]: import numpy as np In [2]: a = np.array([1, 2, 3]) In [3]: print(a, type(a), a.dtype) [1 2 3] &amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt; int32 In [4]: a = np.array([1, 2, 3], dtype = &amp;#34;float64&amp;#34;) In [5]: print(a, type(a), a.dtype) [1. 2. 3.</description>
    </item>
    
    <item>
      <title>Python数据处理.Matplotlib</title>
      <link>https://happy.dereen.top/post/dataprocess01/</link>
      <pubDate>Tue, 06 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess01/</guid>
      <description>Matplotlib是最流行的Python底层绘图库，主要做数据可视化图表,名字取材于MATLAB。
折线图 #导入需要用到的模块 from matplotlib import pyplot as plt import random from matplotlib import font_manager #输入x轴和y轴的值（二者必须个数相等一一对应） x = range(0,120) y_1 = [random.randint(26, 31) for i in range(120)] y_2 = [random.randint(29, 42) for j in range(120)] #配置图片大小及清晰度，以及解决中文字体无法显示的问题 fig = plt.figure(figsize=(20,8),dpi = 80) font = font_manager.FontProperties(fname=&amp;#34;C:\Windows\Fonts\msyh.ttc&amp;#34;) #自定义显示x轴刻度文字 _xtick_labels = [&amp;#34;10点{}分&amp;#34;.format(str(i).rjust(2,&amp;#39;0&amp;#39;)) for i in range(60)] _xtick_labels += [&amp;#34;11点{}分&amp;#34;.format(str(i).rjust(2,&amp;#39;0&amp;#39;)) for i in range(60)] #调整x轴刻度间距并指定字体样式 plt.xticks(x[::3], _xtick_labels[::3], rotation = 45, fontproperties=font) plt.yticks(range(min(min(y_1),min(y_2)), max(max(y_1)+1,max(y_2)+1)), fontproperties=font) #添加描述信息 plt.</description>
    </item>
    
  </channel>
</rss>