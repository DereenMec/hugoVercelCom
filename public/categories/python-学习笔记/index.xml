<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python 学习笔记 on Dereen - 深海游泳</title>
    <link>https://happy.dereen.top/categories/python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in Python 学习笔记 on Dereen - 深海游泳</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 06 Oct 2018 12:46:25 +0800</lastBuildDate>
    
	<atom:link href="https://happy.dereen.top/categories/python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PythonNotes.爬虫</title>
      <link>https://happy.dereen.top/post/pythonnotes05/</link>
      <pubDate>Sat, 06 Oct 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes05/</guid>
      <description>要使用Python 抓取网页，首先我们要学习下面四个模块：
   包 作用     webbrowser 打开浏览器获取指定页面；   requests 从因特网下载文件和网页；   Beautiful Soup 解析HTML，即网页编码的格式；   selenium 启动并控制一个Web 浏览器，能够填写表单，并模拟鼠标点击。    小项目：利用webbrowser 模块的bilibiliSearch.py webbrowser 模块的open()函数可以启动一个新浏览器，打开指定的URL。
import webbrowser webbrowser.open(&amp;#34;https://bilibili.com&amp;#34;) 例如运行上面的这段代码，系统就会启动一个新的标签页，打开B站了。但是，这也是webbrowser 模块唯一能做的事了。
假如我们要实现一个功能：使用Bilibili 搜索指定或剪贴板中的文字。那我们的程序需要做到：
 从命令行参数或剪贴板中取得要搜索的内容； 打开Web 浏览器，指向搜索结果。  弄清指定地点的Bilibili Search Url 地址 我们首先在B站手动搜索“孙笑川 鬼畜”，可以发现地址栏的Url 网址为：“https://search.bilibili.com/all?keyword=孙笑川%20鬼畜”，于是我们可以发现，只要将要搜索的内容放在keyword= 后即可，多个关键字用空格分开，在网址中为20%表示。
处理命令行参数 为了从命令行参数中导入要搜索的内容，我们需要导入sys 包，并使用sys.argv来取得其内容。
处理剪贴板内容 使用pyperclip 包中的pyperclip.paste()函数来取得剪贴板中的内容。
于是，整个程序的代码如下：
import webbrowser, sys, pyperclip if len(sys.argv) &amp;gt; 1: # Get address from command line.</description>
    </item>
    
    <item>
      <title>PythonNotes.调试</title>
      <link>https://happy.dereen.top/post/pythonnotes04/</link>
      <pubDate>Tue, 02 Oct 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes04/</guid>
      <description>编码占了编程工作量的90%，调试占了另外90%，这是一个流传着的笑话。调试在编程中占有很大的分量，即使专业的程序员也一直在制造缺陷。
抛出异常 **抛出异常相当于是说：“停止运行这个函数中的代码，将程序执行转到except 语句”。**抛出异常使用raise 语句，在代码中，raise 语句包含以下部分：
 raise 关键字； 对Exception 函数的调用； 传递给Exception 函数的字符串，包含有用的出错信息。  **通常是调用该函数的代码知道如何处理异常，而不是该函数本身。所以常常会看到raise 语句在一个函数中，try 和except 语句在调用该函数的代码中。**例如：
def boxPrint(symbol, width, height): if len(symbol) != 1: raise Exception(&amp;#39;symbol must be a single character string.&amp;#39;) if width &amp;lt;= 2: raise Exception(&amp;#39;Width must be greater than 2.&amp;#39;) print(symbol * width) for i in range(height - 2): print(symbol + (&amp;#39; &amp;#39; * (width - 2)) + symbol) print(symbol * width) for sym, w, h in ((&amp;#39;*&amp;#39;, 4, 4), (&amp;#39;0&amp;#39;, 20, 5), (&amp;#39;x&amp;#39;, 1, 3), (&amp;#39;ZZ&amp;#39;, 3, 3)): try: boxPrint(sym, w, h) except Exception as err: print(&amp;#39;An exception happened: &amp;#39; + str(err)) 这个代码的功能是调用一个名为boxPint()的函数，该函数的功能是打印一个盒子，其使用的字符为symbol ，形状为width * height 。如果出现参数不合法，则抛出异常，运行上面的代码，其输出如下：</description>
    </item>
    
    <item>
      <title>PythonNotes.组织文件</title>
      <link>https://happy.dereen.top/post/pythonnotes03/</link>
      <pubDate>Fri, 28 Sep 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes03/</guid>
      <description>shutil 模块 shutil 模块可以让我们很方便的在Python程序中复制、移动、改名和删除文件。
复制文件和文件夹 使用shutil.copy()来复制文件，该函数含两个参数，均为字符串格式的路径。当第二个参数为文件时，就将原文件复制过来并改名，当第二个参数为文件夹时，就将原文件复制至该文件夹下。
&amp;gt;&amp;gt;&amp;gt; import shutil &amp;gt;&amp;gt;&amp;gt; shutil.copy(&amp;#39;oldFolder/hello.txt&amp;#39;, &amp;#39;newFolder&amp;#39;) &amp;#39;newFolder\\hello.txt&amp;#39; &amp;gt;&amp;gt;&amp;gt; shutil.copy(&amp;#39;oldFolder/hello.txt&amp;#39;, &amp;#39;newFolder/hello_2.txt&amp;#39;) &amp;#39;newFolder/hello_2.txt&amp;#39; 值得注意的是，在将文件复制至一个文件夹下时，如果这个文件夹不存在，程序就会误以为你要将原文件命名为第二个参数的名称，导致出现歧义。如下：
&amp;gt;&amp;gt;&amp;gt; shutil.copy(&amp;#39;oldFolder/hello.txt&amp;#39;, &amp;#39;newFolder&amp;#39;) &amp;#39;newFolder&amp;#39; 使用shutil.copytree()来复制文件夹及其包含的文件。用法如下：
&amp;gt;&amp;gt;&amp;gt; shutil.copytree(&amp;#39;oldFolder&amp;#39;, &amp;#39;oldFolder_backup&amp;#39;) &amp;#39;oldFolder_backup&amp;#39; 文件和文件夹的移动与改名 使用shutil.move()函数来移动文件或文件夹，用法与上一节的shutil.copy()函数大同小异。
&amp;gt;&amp;gt;&amp;gt; shutil.move(&amp;#39;oldFolder&amp;#39;, &amp;#39;newFolder&amp;#39;) &amp;#39;newFolder\\oldFolder&amp;#39; &amp;gt;&amp;gt;&amp;gt; shutil.move(&amp;#39;newFolder\\oldFolder\\hello.txt&amp;#39;, &amp;#39;oldFolder_backup\\hello_2.txt&amp;#39;) &amp;#39;oldFolder_backup\\hello_2.txt&amp;#39; 永久删除文件和文件夹  使用os.unlink(path)来永久删除一个文件； os.rmdir(path)来永久删除一个空文件夹； shutil.rmtree(path)来永久删除一个文件夹及其中所有内容。  为了确保不会因为输入有误错误删除重要文件，我们可以先运行下面的程序。
import os for filename in os.listdir(): if filename.endswith(&amp;#39;.txt&amp;#39;): # os.unlink(filename) print(filename) 再确认无误之后，再删除print行，并去除删除文件行代码的注释。
使用send2trash 模块安全删除 上一节中的三个方法都是永久的删除文件或文件夹，所以在使用起来可能会有风险。使用send2trash方法可以将文件或文件夹移入回收站，方便误删后的恢复。在使用send2trash方法前，我们先要安装它。
&amp;gt;&amp;gt;&amp;gt; import send2trash &amp;gt;&amp;gt;&amp;gt; dogList = open(&amp;#39;dog.txt&amp;#39;, &amp;#39;w&amp;#39;) &amp;gt;&amp;gt;&amp;gt; dogList.write(&amp;#34;I&amp;#39;m a cat.</description>
    </item>
    
    <item>
      <title>PythonNotes.文件的读取写入</title>
      <link>https://happy.dereen.top/post/pythonnotes02/</link>
      <pubDate>Wed, 26 Sep 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes02/</guid>
      <description>文件与文件路径 路径合成 os.path.join() 在Windows上，路径中以倒斜杠作为文件夹之间的分隔符，Linux或OS X中则是正斜杠。如果想要程序正确运行于所有操作系统上，就必须要处理这种情况。os.path.join()方法可以正确的根据不同的操作系统来合成路径，它的用法如下：
&amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; os.path.join(&amp;#34;Program&amp;#34;, &amp;#34;QQ&amp;#34;, &amp;#34;Pet&amp;#34;) &amp;#39;Program\\QQ\\Pet&amp;#39; # 在windows下返回的结果 &amp;#39;Program/QQ/Pet&amp;#39; # 在Linux或OS X下返回的结果 &amp;gt;&amp;gt;&amp;gt; myFiles = [&amp;#34;accounts.txt&amp;#34;, &amp;#34;details.csv&amp;#34;, &amp;#34;invite.docx&amp;#34;] &amp;gt;&amp;gt;&amp;gt; for filename in myFiles: ... print(os.path.join(&amp;#34;C:\\Users\\Dereen&amp;#34;, filename)) C:\Users\Dereen\accounts.txt C:\Users\Dereen\details.csv C:\Users\Dereen\invite.docx 查看并改变当前工作目录 使用os.getcwd()来获取当前工作目录，使用os.chdir()来改变当前工作目录。这么做的意义是所有没有从根文件夹开始的文件名或路径，都假定在当前工作目录下。如果当前工作目录错误容易引发各种该问题，或者不想用当前工作目录作为根目录，而是想用别的目录作为根目录。
&amp;gt;&amp;gt;&amp;gt; os.getcwd() &amp;#39;F:\\Learn\\Automate-the-Boring-Stuff-with-Python-Solutions&amp;#39; &amp;gt;&amp;gt;&amp;gt; os.chdir(&amp;#34;C:\\Windows\\system32&amp;#34;) &amp;gt;&amp;gt;&amp;gt; os.getcwd() &amp;#39;C:\\Windows\\system32&amp;#39; 绝对路径与相对路径  “绝对路径”：总是从根文件夹开始； “相对路径”：它相对于程序的当前工作目录。  例如：C:\Program Files\QQ\music
假如当前工作目录为C:\Program Files，则对music文件夹来说，其相对路径为：.\QQ\music，绝对路径为：C:\Program Files\QQ\music。
创建新文件夹 os.makedirs() &amp;gt;&amp;gt;&amp;gt; os.makedirs(&amp;#34;.\\color\\green&amp;#34;) 上面这个命令会直接在当前文件夹下创建新文件夹color并在其下创建新文件夹green
绝对路径与相对路径互转  相对路径转绝对路径：os.path.abspath(path)将返回参数的绝对路径的字符串。 绝对路径转相对路径：os.path.relpath(path, start)将返回从start路径到path路径的相对路径的字符串。（如果没有提供start，就是用当前工作目录作为开始路径） 判断一个路径是否为绝对路径：os.isabs(path)如果是就返回True，不是就返回False。  例子：
&amp;gt;&amp;gt;&amp;gt; os.</description>
    </item>
    
    <item>
      <title>PythonNotes.正则表达式</title>
      <link>https://happy.dereen.top/post/pythonnotes01/</link>
      <pubDate>Mon, 24 Sep 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes01/</guid>
      <description>常用缩写字符及其含义表格查询    缩写字符分类 含义     \d 0-9的任意数字   \D 除0-9的数字以外的任何字符   \w 任何字母、数字或下划线字符（可以认为是匹配“单词”字符）   \W 除字母、数字和下划线意外的任何字符   \s 空格、制表符或换行符（可以认为是匹配“空白”字符）   \S 除空格、制表符或换行符的任何字符   ? 问号紧跟于分组后表示前面分组的内容是可有可无的   * 星号紧跟于分组后表示前面分组的内容匹配0次或多次   + 加号紧跟于分组后表示前面分组的内容匹配至少1次   | 管道匹配多个分组   {} 花括号内加数字表示匹配特定字数   . 句点表示匹配任何字符（除了换行）    在Python中使用正则表达式的步骤 在Python中使用正则表达式主要有下面几个步骤：
 用import re导入正则表达式模块； 用re.compile()函数创建一个Regex 对象； 向Regex 对象的search()或findall()方法传入目标字符串； 调用Matches 对象的group()方法，返回实际匹配文本的字符串。  Python正则表达式详细说明 通过在字符串的第一个引号之前加r来向re.</description>
    </item>
    
  </channel>
</rss>