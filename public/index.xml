<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dereen - 深海游泳</title>
    <link>https://happy.dereen.top/</link>
    <description>Recent content on Dereen - 深海游泳</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://happy.dereen.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://happy.dereen.top/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://happy.dereen.top/about/</guid>
      
        <description>&lt;p&gt;待填充。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>CppPrimer05.语句</title>
      <link>https://happy.dereen.top/post/cppprimer_chapter05/</link>
      <pubDate>Fri, 24 Apr 2020 13:48:42 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/cppprimer_chapter05/</guid>
      
        <description>&lt;p&gt;本章主要介绍条件语句、循环语句、跳转语句和Try语句块以及异常处理。&lt;/p&gt;
&lt;h2 id=&#34;条件语句&#34;&gt;条件语句&lt;/h2&gt;
&lt;h3 id=&#34;if语句&#34;&gt;&lt;strong&gt;if语句&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (condition) {
		&lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; (condition) {
		&lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这部分需要注意的是，下面这个例子中，else匹配的是第二个if，虽然从缩进看起来好像是应该匹配第一个if。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
				lettergrade &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
		lettergrade &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码本来是想给成绩末尾是0，1，2的添加”-“，给成绩末尾是8，9，10的添加”+“。但是实际的代码运行结果会是：成绩末尾是8，9，10的添加”+“，成绩末尾是3，4，5，6，7的却添加了”-“。&lt;strong&gt;修正程序只需添加花括号：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
				lettergrade &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
		lettergrade &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;完整程序：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; scores &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A++&amp;#34;&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; grade &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;;
string letter_grade;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;) {
    letter_grade &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scores[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; letter_grade &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scores[grade &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) letter_grade &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    letter_grade &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; letter_grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;switch语句&#34;&gt;switch语句&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (ch) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
				&lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
				&lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
				&lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里值得注意的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case关键字后面的必须为整型常量表达式。如&lt;code&gt;case 3.14&lt;/code&gt;和&lt;code&gt;case ival&lt;/code&gt;都不可。&lt;/li&gt;
&lt;li&gt;一般不要省略case分支最后的break语句。如果没写break语句，最好加一段注释说清楚程序的性能。&lt;/li&gt;
&lt;li&gt;不得在case中进行变量的初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代语句&#34;&gt;迭代语句&lt;/h2&gt;
&lt;h3 id=&#34;while语句&#34;&gt;while语句&lt;/h3&gt;
&lt;p&gt;当不确定到底要迭代多少次时，使用while语句比较合适。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (condition) {
	&lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;do-while语句&#34;&gt;do while语句&lt;/h3&gt;
&lt;p&gt;do while语句不管条件为真为假，先执行一次循环体内的语句。&lt;/p&gt;
&lt;h3 id=&#34;for语句&#34;&gt;for语句&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (init&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;statemen; condition; expression){
    &lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，for循环括号内的每个部分都可以设置多重语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j, i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;cnt;
}
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;     &lt;span style=&#34;color:#75715e&#34;&gt;// 输出6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;范围for循环&#34;&gt;范围for循环&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i : vI){
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;跳转语句&#34;&gt;跳转语句&lt;/h2&gt;
&lt;p&gt;跳转语句终端当前的执行过程。C++语言提供了4种跳转语句：break、continue、goto和return。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;break：负责终止离他最近的while、do while、for或switch语句，并从这些语句之后的第一条语句开始继续执行。&lt;/li&gt;
&lt;li&gt;continue：终止最近的循环中的后续语句，并继续执行下个循环。&lt;/li&gt;
&lt;li&gt;goto：从goto语句无条件跳转到同一函数内的另一条语句。语法位：&lt;code&gt;goto label; label:/*...*/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;try语句块和异常处理&#34;&gt;try语句块和异常处理&lt;/h2&gt;
&lt;p&gt;在C++语言中，异常处理包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;throw表达式，异常检测部分使用throw表达式来表示它遇到了无法处理的问题。&lt;strong&gt;我们说throw引发了异常。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;try语句块，异常处理部分使用try语句块处理异常。try语句块以关键字try开始，并以一个或多个catch子句结束。因为catch语句处理异常，&lt;strong&gt;因此其常被称为异常处理代码。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一套异常类，用于在throw表达式和相关的catch子句之间传递异常的具体信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;Sales_item item1, item2;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; item1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; item2) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (item1.isbn() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; item2.isbn()) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime_error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Data must refer to same ISBN.&amp;#34;&lt;/span&gt;);
        }
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; item1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; item2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (runtime_error err) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; err.what() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Try again? Enter y or n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c;
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;cin &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;runtime_error	&lt;/code&gt;是标准库异常类型的一种，定义在&lt;code&gt;stdexcept&lt;/code&gt;头文件中，&lt;code&gt;what()&lt;/code&gt;是其成员函数，返回的是初始化一个具体对象时所用的string对象的副本。&lt;/p&gt;
&lt;h3 id=&#34;标准异常&#34;&gt;标准异常&lt;/h3&gt;
&lt;p&gt;C++标准库定义了一组类，用于报告标准库函数遇到的问题。这些异常也可以在用户编写的程序种使用，它们分别在以下四个头文件中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exception头文件定义了最通用的异常类exception。它只报告异常的发生，不提供任何额外信息。&lt;/li&gt;
&lt;li&gt;stdexcept头文件定义了常用的异常类，详细信息见后面的表格。&lt;/li&gt;
&lt;li&gt;new头文件定义了bad_alloc异常类型。&lt;/li&gt;
&lt;li&gt;type_info头文件定义了bad_cast异常类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;异常&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;exception&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;最常见的问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;runtime_error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只有在运行时才能检测出的问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;range_error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;运行时错误：生成的结果超出了有意义的值域范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;overflow_error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;运行时错误：计算上溢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;underflow_error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;运行时错误：计算下溢&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;logic_error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;程序逻辑错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;domain_error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;逻辑错误：参数对应的结果值不存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;invalid_argument&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;逻辑错误：无效参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;length_error&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;逻辑错误：试图创建一个超出该类型最大长度的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;out_of_range&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;逻辑错误：使用一个超出有效范围的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;标准库异常类只定义了几种运算，包括创建或拷贝异常类型的对象，以及位异常类型的对象赋值。&lt;/p&gt;
&lt;p&gt;❗我们只能以默认初始化的方式初始化exception、bad_alloc和bad_cast对象，不允许位这些对象提供初始值。其他异常类型的行为则恰好相反：应该使用string对象或C风格字符串初始化这些类型的对象，但是不允许使用默认初始化的方式。&lt;/p&gt;
&lt;p&gt;异常类型只定义了一个名为what 的成员参数，该函数没有任何参数，返回值是一个指向C风格字符串的&lt;code&gt;const char*&lt;/code&gt;。该字符串的目的是提供关于异常的一些文本信息。what函数返回的C风格字符串的内容和异常对象的类型有关。如果异常类型有一个字符串初始值，则what返回该字符串，对于其他无初始值的异常类型来说，what返回的内容由编译器决定。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>CppPrimer04.表达式</title>
      <link>https://happy.dereen.top/post/cppprimer_chapter04/</link>
      <pubDate>Fri, 24 Apr 2020 13:31:42 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/cppprimer_chapter04/</guid>
      
        <description>&lt;p&gt;本章最主要的内容有：左值和右值、求值顺序、&lt;strong&gt;位运算符&lt;/strong&gt;、&lt;strong&gt;类型转换&lt;/strong&gt;以及最后所附的&lt;strong&gt;运算符优先级表&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;基础&#34;&gt;基础&lt;/h2&gt;
&lt;h3 id=&#34;重载运算符&#34;&gt;重载运算符&lt;/h3&gt;
&lt;p&gt;为已存在的运算符赋予另外一层含义，这种运算符称为**重载运算符（overloaded operator）。**例如IO库的&amp;laquo;,&amp;raquo;以及string和vector对象的加减乘除。&lt;/p&gt;
&lt;h3 id=&#34;左值和右值&#34;&gt;左值和右值&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;当一个对象被用作右值的时候，用的是它的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。在需要右值的地方可以用左值来替代，但不能把右值当成左值使用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用关键字decltype的时候，左值和右值有所不同。如果表达式的求值结果是左值，decltype作用于该表达式得到的是一个引用类型。举个例子，假定p的类型是int*，因为解引用运算符生成左值，所以decltype(*p)的结果是int&amp;amp;。另一方面，因为取地址符生成右值，所以decltype(&amp;amp;p)的结果是int**，即指向int型指针的指针。&lt;/p&gt;
&lt;h3 id=&#34;求值顺序&#34;&gt;求值顺序&lt;/h3&gt;
&lt;p&gt;在大多数情况下，不会明确指定求职的顺序，对于如下例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f1() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f2();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们只知道，f1和f2会在执行乘法之前被调用，但是我们无法知道到底是f1和f2到底谁先被调用。&lt;strong&gt;对于那些没有执行指定顺序的运算符来说，如果表达式指向并修改了同一个对象，将会引发错误并产生未定义的行为。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;有4种运算符明确规定了运算对象的求值顺序。&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code&gt;||&lt;/code&gt;、&lt;code&gt;?:&lt;/code&gt;和&lt;code&gt;,&lt;/code&gt;运算符。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;赋值运算符&#34;&gt;赋值运算符&lt;/h3&gt;
&lt;h4 id=&#34;赋值运算符满足右结合律&#34;&gt;赋值运算符满足右结合律&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ival, jval;
ival &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;// ival 和 jval 都被赋值为0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;成员访问运算符&#34;&gt;成员访问运算符&lt;/h2&gt;
&lt;p&gt;点运算符和箭头运算符都可用于访问成员，&lt;code&gt;ptr-&amp;gt;mem&lt;/code&gt;等价于&lt;code&gt;(*ptr).mem&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p).size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;        &lt;span style=&#34;color:#75715e&#34;&gt;// 输出相同，均为5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;❗由于解引用运算符&lt;code&gt;*&lt;/code&gt;的优先级低于点运算符&lt;code&gt;.&lt;/code&gt;，所以，上面第三行的括号是必须的。&lt;/p&gt;
&lt;h2 id=&#34;条件运算符&#34;&gt;条件运算符&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;condition &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; expr1 : expr2;
string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (score &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;嵌套条件运算符&#34;&gt;嵌套条件运算符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;finalGrade &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;High pass&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;在输出表达式中使用条件运算符&#34;&gt;在输出表达式中使用条件运算符&lt;/h3&gt;
&lt;p&gt;条件运算符的优先级非常低，因此当一条长表达式中嵌套了条件运算子表达式时，通常要给它加上括号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ((grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;);     &lt;span style=&#34;color:#75715e&#34;&gt;// 正确
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;// 输出1或者0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;;          &lt;span style=&#34;color:#75715e&#34;&gt;// 错误，试图比较cout和60
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;位运算符&#34;&gt;位运算符&lt;/h2&gt;
&lt;p&gt;位运算符作用于&lt;strong&gt;整数类型&lt;/strong&gt;的运算对象，并把运算对象看成是&lt;strong&gt;二进制位&lt;/strong&gt;的集合。&lt;strong&gt;位运算符提供检查和设置二进制位的功能。&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;位求反&lt;/td&gt;
&lt;td&gt;` expr                         |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;laquo;   &amp;raquo;&lt;/td&gt;
&lt;td&gt;左移、右移&lt;/td&gt;
&lt;td&gt;expr1 &amp;laquo; expr2、expr1 &amp;raquo; expr2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;位与&lt;/td&gt;
&lt;td&gt;expr1 &amp;amp; expr2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;位异或&lt;/td&gt;
&lt;td&gt;expr1 ^ expr2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;位或&lt;/td&gt;
&lt;td&gt;expr1 | expr2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;移位运算符&#34;&gt;移位运算符&lt;/h3&gt;
&lt;p&gt;左移运算符在右侧插0，右移运算符如果是无符号类型则在左侧插0，带符号类型插入符号位的副本或0，视具体环境而定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0233&lt;/span&gt;;
bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bits &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; bits &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;          &lt;span style=&#34;color:#75715e&#34;&gt;// 输出应该为6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先，因为位操作是针对整型的，所以bits由unsigned char类型提升为整型字面值默认类型int；0223八进制转化为二进制为&lt;code&gt;10011011&lt;/code&gt;，左移一位的结果为&lt;code&gt;00110110&lt;/code&gt;，其十进制的数字为54，而char 54对应的字符就是6，所以输出为6。&lt;/p&gt;
&lt;h3 id=&#34;位求反运算符&#34;&gt;位求反运算符&lt;/h3&gt;
&lt;p&gt;位求反运算符（`）将运算对象逐位求反后生成一个新值。&lt;/p&gt;
&lt;h3 id=&#34;位与位或位异或运算符&#34;&gt;位与、位或、位异或运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;位与，两个bit上都是1，结果才为1，否则位0；&lt;/li&gt;
&lt;li&gt;位或，至少有一个bit上为1，结果就为1，否则位0；&lt;/li&gt;
&lt;li&gt;位异或（不进位加法），两个bit上相同为0，不同为1；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：假设班级中有30个学生，老师每周都会对学生进行一次小测验，测验的结果只有通过和不通过两种。为了更好地追踪测验的结果，我们用一个二进制位代表某个学生在一次测验中是否通过，显然全班的测验结果可以用一个无符号long来表示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; quiz1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;；&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;教师必须可以对这个数的二进制位的每一位进行操作。例如序号位27的学生，为了达到这个目的，我们首先创建一个值，这个值只有第27位为1，其他位都是0，然后将这个值与quiz1进行&lt;strong&gt;位或运算&lt;/strong&gt;，这样就能强行将quiz1的第27个bit设置为1，其他bit保持不变。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;quiz1 &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1UL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;;          &lt;span style=&#34;color:#75715e&#34;&gt;// 生成一个值，只有第27个bit为1.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加入教师发现自己操作失误，需要将27位重新置为0，其他位保持不变，这时只需找一个特殊值，只有27位为0，其他位为1，然后与quiz1进行&lt;strong&gt;位与操作&lt;/strong&gt;即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;quiz1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1UL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们要查询第27为同学在quiz1中的通过情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; status_27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quiz1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1UL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;❗理解位运算符的时候，千万不要把某一个bit的结果当作整体的输出结果。例如1001和1000的位与输出是1000转化为bool类型是true，并非false。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;移位运算符满足左结合律，且优先级低于加减乘除但高于关系运算符，赋值运算符和条件运算符。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;sizeof运算符&#34;&gt;sizeof运算符&lt;/h2&gt;
&lt;p&gt;sizeof运算符返回一个表达式或一个类型名字所占的字节数（byte）。sizeof运算符满足右结合律，返回值为1个size_t类型的&lt;strong&gt;常量表达式&lt;/strong&gt;。sizeof运算对象有两种形式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; (type);
&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt; expr;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在第二种形式中，sizeof返回的是表达式结果类型的大小。&lt;strong&gt;与众不同的一点是，sizeof不计算其运算对象的值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡因为sizeof不会实际求运算对象的值，所以即使sizeof的运算对象是一个无效的指针也不会有什么影响，在sizeof的运算对象中解引用一个无效的指针仍然安全。&lt;/p&gt;
&lt;p&gt;C++11允许使用作用域运算符来获取类成员的大小：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TEST&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
} ;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(TEST&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;a) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;       &lt;span style=&#34;color:#75715e&#34;&gt;// 输出4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sizeof运算符的结果部分依赖于其作用的类型，对指针执行返回指针本身大小，对引用执行返回被引用对象所占大小，&lt;strong&gt;对string或vector对象进行运算返回固定大小，并非元素数目*单元素大小。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi&amp;#34;&lt;/span&gt;;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vI &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;};
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(s) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(vI) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;     &lt;span style=&#34;color:#75715e&#34;&gt;// 输出32， 24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里引申出求数组元素个数的操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size_a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(a) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a);         &lt;span style=&#34;color:#75715e&#34;&gt;// 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;逗号运算符&#34;&gt;逗号运算符&lt;/h2&gt;
&lt;p&gt;逗号运算符含有两个运算对象，按照从左到右的顺序依次求值。逗号运算符常常被用在for循环中，下面的例子进行降序赋值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ivec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;size_type cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ivec.size();
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;size_type ix &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ix &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; ivec.size(); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;ix, &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;cnt)
    ivec[ix] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cnt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;类型转换&#34;&gt;类型转换&lt;/h2&gt;
&lt;h3 id=&#34;隐式转换&#34;&gt;隐式转换&lt;/h3&gt;
&lt;p&gt;自动完成，无需程序员介入；&lt;/p&gt;
&lt;h4 id=&#34;算术类型&#34;&gt;算术类型&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// 3.14 先隐式转换为3然后再相加
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;其他隐式类型转换&#34;&gt;其他隐式类型转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数组转换成指针；&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ia[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ia;              &lt;span style=&#34;color:#75715e&#34;&gt;// 数组名ia转换成指向数组首元素的指针
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;转换成布尔类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_string();
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cp) &lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// 如果指针cp不是0，则为真
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cp)  &lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;// 如果指针指向的不是空字符，则为真
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;转换成常量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
cosnt &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ca &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;          &lt;span style=&#34;color:#75715e&#34;&gt;// 非常量转换成const int 类型的引用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; cp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a;         &lt;span style=&#34;color:#75715e&#34;&gt;// 非常量的地址转换成const 的地址
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;类中自定义的转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a) &lt;span style=&#34;color:#75715e&#34;&gt;/*...*/&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// cin转换为布尔类型
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;显式转换&#34;&gt;显式转换&lt;/h3&gt;
&lt;p&gt;有时我们希望显式的将对象强制转换成另一种类型。例如，如果想在下面的代码中执行浮点数除法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, j;
&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; j;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;命名的强制类型转换&#34;&gt;命名的强制类型转换&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cast-name(expression);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，type是转换的目标类型，而expression是要转换的值。如果type是引用类型，则结果是左值。cast-name是static_cast、dynamic_cast、const_cast和reinterpret_cast中的一种。&lt;/p&gt;
&lt;p&gt;**static_cast，*&lt;em&gt;任何具有明确定义的类型转换，只要*&lt;em&gt;不包含底层const&lt;/em&gt;&lt;/em&gt;，都可以使用static_cast。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; slope &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(i) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; j;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;static_cast对于编译器无法自动执行的类型转换也非常有用，例如将void*指针转换为它当初的类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;d;
&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;                         &lt;span style=&#34;color:#75715e&#34;&gt;// 这行会报错，系统无法自动转换void*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;(p);   &lt;span style=&#34;color:#75715e&#34;&gt;// 正确
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;const_cast只能改变运算对象的底层const&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pc;
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&amp;gt;&lt;/span&gt;(pc);     &lt;span style=&#34;color:#75715e&#34;&gt;// 正确，但是通过p写值是未定义的行为
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;reinterpret_cast过于危险不建议了解&#34;&gt;reinterpret_cast（过于危险，不建议了解）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;❗尽量避免使用强制类型转换。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;旧式的强制类型转换&#34;&gt;旧式的强制类型转换&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;type (expr)          &lt;span style=&#34;color:#75715e&#34;&gt;// 函数形式的强制类型转化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;(type) expr          &lt;span style=&#34;color:#75715e&#34;&gt;// C语言风格的强制类型转换
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;附录运算符优先级表&#34;&gt;附录：运算符优先级表&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DereenMec/pics/master/img/_20200423125000.jpg&#34; alt=&#34;运算符优先级表&#34;&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>CppPrimer03.字符串、向量和数组</title>
      <link>https://happy.dereen.top/post/cppprimer_chapter03/</link>
      <pubDate>Fri, 24 Apr 2020 13:22:52 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/cppprimer_chapter03/</guid>
      
        <description>&lt;p&gt;除了第二章的内置类型之外，C++还定义了一个内容丰的抽象数据类型库。string和vector是两种最重要的标准库类型，前者支持可变长字符串，后者则表示可变长的集合。&lt;/p&gt;
&lt;h2 id=&#34;命名空间的using声明&#34;&gt;命名空间的using声明&lt;/h2&gt;
&lt;p&gt;我们目前使用的大多数库函数都属于命名空间std，例如std::cin表示从标准输入读入内容。这里使用了作用域操作符（::）的含义是：编译器应当从操作符左侧的作用域中寻找右侧那个名字。倘若在接下来的程序中我们想要省略std::部分，则只需要在文件的开始加上&lt;code&gt;using namespace std;&lt;/code&gt;即可，如果我们只是想省略某个函数的std::部分，则只需要在文件的开始加上&lt;code&gt;using std::name;&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;⛔头文件不应包含using声明。这是因为如果头文件里有某个using声明，那么每个使用了该头文件的文件就都会有这个声明。对于某些程序来说，由于不经意间包含了一些名字，反而可能产生始料未及的名字冲突。&lt;/p&gt;
&lt;h2 id=&#34;标准库类型string&#34;&gt;标准库类型string&lt;/h2&gt;
&lt;p&gt;标准库类型string表示可变长的字符序列。&lt;/p&gt;
&lt;h3 id=&#34;定义和初始化string对象&#34;&gt;定义和初始化string对象&lt;/h3&gt;
&lt;p&gt;**如何初始化类的对象是由类本身决定的。**一个类可以定义很多中初始化对象的方式，只不过这些方式之间必须有所区别；**或者是初始值的数量不同，或者是初始值的类型不同。**下面是初始化string对象最常用的方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s1;                                  &lt;span style=&#34;color:#75715e&#34;&gt;// 默认初始化，空串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;string s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1;                             &lt;span style=&#34;color:#75715e&#34;&gt;// 使用s1初始化s2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;string s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;                        &lt;span style=&#34;color:#75715e&#34;&gt;// 使用字符串字面值初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;string &lt;span style=&#34;color:#a6e22e&#34;&gt;s4&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;);                        &lt;span style=&#34;color:#75715e&#34;&gt;// s4的内容是cccccccccc，10个c
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;直接初始化和拷贝初始化&#34;&gt;直接初始化和拷贝初始化&lt;/h4&gt;
&lt;p&gt;如果使用等号初始化一个变量，实际上执行的是&lt;strong&gt;拷贝初始化（copy initialization）&lt;/strong&gt;，编译器把等号右侧的初始值拷贝到新创建的对象中去。与之相反，如果不使用等号，则执行的是&lt;strong&gt;直接初始化（direct initialization）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当初始值只有一个，使用两种初始化方法都可以，但是如果像上面的第四个例子中，初始化要用到的值有多个，一般来说只能使用直接初始化。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string &lt;span style=&#34;color:#a6e22e&#34;&gt;s4&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;);                    &lt;span style=&#34;color:#75715e&#34;&gt;//一般来说只能使用直接初始化
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;string对象上的操作&#34;&gt;string对象上的操作&lt;/h3&gt;
&lt;p&gt;一个类除了要规定初始化其对象的方式外，还要定义对象上所能执行的操作。其中，类既能定义通过函数名调用的操作，也能定义&amp;laquo;，+等各种运算符在该类对象上的新含义。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;操作&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;os&amp;laquo;s&lt;/td&gt;
&lt;td&gt;将s写到输出流os中，返回os&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;is&amp;raquo;s&lt;/td&gt;
&lt;td&gt;从is中读取字符串赋给s，字符串以空白分隔，返回is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;getline(is, s)&lt;/td&gt;
&lt;td&gt;从is中读取一行赋给s，返回is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s.empty()&lt;/td&gt;
&lt;td&gt;s为空返回true，否则返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s.size()&lt;/td&gt;
&lt;td&gt;返回s中字符的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s[n]&lt;/td&gt;
&lt;td&gt;返回s中第n个字符的引用，位置n从0计起&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s1+s2&lt;/td&gt;
&lt;td&gt;返回s1和s2连接后的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s1=s2&lt;/td&gt;
&lt;td&gt;用s2的副本代替s1中原来的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s1==s2&lt;/td&gt;
&lt;td&gt;如果s1和s2中所含的字符完全一样，返回true，否则返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s1≠s2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lt;，≤，&amp;gt;，≥&lt;/td&gt;
&lt;td&gt;利用字符在字典中的而顺序进行比较，且对字母的大小写敏感&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;读写string对象&#34;&gt;读写string对象&lt;/h4&gt;
&lt;p&gt;我们可以使用标准库中的iostream来读写int、double等内置类型的值。同样，也可以使用IO操作符读取string对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s;                              &lt;span style=&#34;color:#75715e&#34;&gt;// 空字符串
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s;                              &lt;span style=&#34;color:#75715e&#34;&gt;// 将string对象读入s，遇到空白停止
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;                     &lt;span style=&#34;color:#75715e&#34;&gt;// 输出s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;                              
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡在执行读取操作时，string对象会自动忽略开头的空白，并从第一个真正的字符开始读起，直到遇见下一处空外为止。&lt;/p&gt;
&lt;p&gt;**和内置类型的输入输出操作一样，string对象对这种操作也是返回运算符左侧的运算对象作为其结果。**因此，多个输入或输出可以连写到一起：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s1, s2;
cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s2;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;读取未知数量的string对象&#34;&gt;读取未知数量的string对象&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string word;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; word)
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; word &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用getline读取一整行&#34;&gt;使用getline读取一整行&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string line;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (getline(cin, line))
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡getline是iostream中的函数，它按行读取内容并存入string对象line中，&lt;strong&gt;且它会读取每一行开始的空白和最后的换行符，但是在存入line的时候并不会存入换行符。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;string的empty和size操作&#34;&gt;string的empty和size操作&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string line;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (getline(cin, line))
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;line.empty())
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (line.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
							cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这段代码用到了empty和size操作，这段代码的任务是，从屏幕按行读取字符串并存入到line中，如果字符串长度小于等于6且不为空，就输出。&lt;/p&gt;
&lt;p&gt;💡值得一提的是，size()方法的返回值类型是size_t，这种类型具有与机器无关的特性，这就为程序的可移植性做了良好的基础。&lt;/p&gt;
&lt;h4 id=&#34;比较string对象&#34;&gt;比较string对象&lt;/h4&gt;
&lt;p&gt;两个string对象的比较方法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个string对象的长度不同，而且较短string对象的每个字符都与较长string对象对应位置上的字符相同，就说较短string对象小于较长string对象。&lt;/li&gt;
&lt;li&gt;如果两个string对象在某些位置上不一致，则string对象比较的结果其实是string对象中第一对相异字符比较的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;;
string s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;He&amp;#34;&lt;/span&gt;;
string s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HE&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为上面三个字符串排个序应该是s2 &amp;lt; s1 &amp;lt; s3。&lt;/p&gt;
&lt;h4 id=&#34;两个string对象相加&#34;&gt;两个string对象相加&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nice&amp;#34;&lt;/span&gt;;
string s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; boy.&amp;#34;&lt;/span&gt;;
string s3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s2;                &lt;span style=&#34;color:#75715e&#34;&gt;// s3结果为Nice boy.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;字面值和string对象相加&#34;&gt;字面值和string对象相加&lt;/h4&gt;
&lt;p&gt;字符字面值的类型是char，字符串字面值的类型是const char[]。&lt;strong&gt;但是因为标准库允许把字符字面值和字符串字面值转换成string对象，所以在需要string对象的地方就可以使用这两种字面值来替代。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;❗当把string对象和字符字面值及字符串字面值混在一条语句中使用时，必须确保每个加法运算符（+）的两侧运算对象至少有一个是string。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;              &lt;span style=&#34;color:#75715e&#34;&gt;// 正确
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;string s5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oo&amp;#34;&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// 错误，两个字符串字面值不能直接相加
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;处理string对象中的字符&#34;&gt;处理string对象中的字符&lt;/h3&gt;
&lt;p&gt;处理string对象中的字符可以分为两个问题，一是获取string对象中的字符，二是对获取到的字符采取哪些操作。&lt;/p&gt;
&lt;h4 id=&#34;获取string对象中的所有字符&#34;&gt;获取string对象中的所有字符&lt;/h4&gt;
&lt;p&gt;要获取string对象中的每个字符，我们可以使用&lt;strong&gt;范围for循环（range for）。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pretty Girl!&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;c : s)
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这个例子的任务是将字符串s中的每一个字符取出单独输出到一行。&lt;/p&gt;
&lt;h4 id=&#34;只获取string对象中的一部分字符&#34;&gt;只获取string对象中的一部分字符&lt;/h4&gt;
&lt;p&gt;使用下标运算符[]&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pretty Girl!&amp;#34;&lt;/span&gt;;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s[s.size() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;           &lt;span style=&#34;color:#75715e&#34;&gt;// 输出s中的最后一个字符
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;处理字符&#34;&gt;处理字符&lt;/h4&gt;
&lt;p&gt;针对char类型，在cctype头文件中定义了一组标准库函数处理这部分工作。如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isalnum(c)&lt;/td&gt;
&lt;td&gt;当c是字母或数字时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isalpha(c)&lt;/td&gt;
&lt;td&gt;当c是字母时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iscntrl(c)&lt;/td&gt;
&lt;td&gt;当c是控制字符时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isdigit(c)&lt;/td&gt;
&lt;td&gt;当c是数字时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isgraph(c)&lt;/td&gt;
&lt;td&gt;当c不是空格但可打印时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;islower(c)&lt;/td&gt;
&lt;td&gt;当c是小写字母时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isprint(c)&lt;/td&gt;
&lt;td&gt;当c是可打印字符时为真（即c是空格或c具有可视形式）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ispunct(c)&lt;/td&gt;
&lt;td&gt;当c是标点符号时为真（即c不是控制字符、数字、字母、可打印空白中的一种）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isspace(c)&lt;/td&gt;
&lt;td&gt;当c是空白时为真（即c是空格、横向制表符、纵向制表符、回车符、换行符、进纸符中的一种）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isupper(c)&lt;/td&gt;
&lt;td&gt;当c是大写字母时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;isxdigit(c)&lt;/td&gt;
&lt;td&gt;当c是十六进制数字时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;tolower(c)&lt;/td&gt;
&lt;td&gt;将c转换为小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;toupper(c)&lt;/td&gt;
&lt;td&gt;将c转换为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：将”pretty pig girl.“中所有以p开头的单词的首字母都换为大写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pretty pig girl.&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;c : s)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;)
				c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toupper(c);
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;                &lt;span style=&#34;color:#75715e&#34;&gt;//输出：Pretty Pig girl.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;标准库类型vector&#34;&gt;标准库类型vector&lt;/h2&gt;
&lt;p&gt;标准库类型vector表示对象的集合，其中所有对象的类型都相同。集合中的每个对象都有一个与之对应的索引，索引用于访问该对象。因为vector”容纳着”其他对象，因此它也常被称作“容器”。**vector是一个类模板，&lt;strong&gt;C++语言既有类模板，也有函数模板。模板本身并不是类或函数，相反可以将模板看作编译器生成类或函数编写的一份说明。编译器根据模板创建类或函数的过程称为&lt;/strong&gt;实例化（instantiation），**当使用模板时，需要指出编译器应把类或函数实例化成何种类型（例如：int、string）。&lt;/p&gt;
&lt;h3 id=&#34;定义和初始化vector对象&#34;&gt;定义和初始化vector对象&lt;/h3&gt;
&lt;p&gt;和任何一种类类型一样，vector模板控制着定义和初始化向量的方法。下表列出了常用的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;vector&lt;!-- raw HTML omitted --&gt; v1&lt;/td&gt;
&lt;td&gt;空vector，执行默认初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vector&lt;!-- raw HTML omitted --&gt; v2(v1)&lt;/td&gt;
&lt;td&gt;v2中包含有v1所有元素的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vector&lt;!-- raw HTML omitted --&gt; v2 = v1&lt;/td&gt;
&lt;td&gt;等价于v2(v1)，v2中包含有v1所有元素的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vector&lt;!-- raw HTML omitted --&gt; v3(n, val)&lt;/td&gt;
&lt;td&gt;v3包含了n个重复的元素，每个元素的值都是val&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vector&lt;!-- raw HTML omitted --&gt; v4(n)&lt;/td&gt;
&lt;td&gt;v4包含了n个重复地执行了值初始化的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vector&lt;!-- raw HTML omitted --&gt; v5{a, b, c}&lt;/td&gt;
&lt;td&gt;v5包含了3个元素，每个元素的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vector&lt;!-- raw HTML omitted --&gt; v6 = {a, b, c}&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;❗在使用花括号和圆括号初始化某些vector对象（例如string）时，需要考虑如下情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v5{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;};          &lt;span style=&#34;color:#75715e&#34;&gt;// 列表初始化：v5有一个元素
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v6(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;);          &lt;span style=&#34;color:#75715e&#34;&gt;// 错误：不能使用字符串字面值构建vector&amp;lt;string&amp;gt;对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v7(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);            &lt;span style=&#34;color:#75715e&#34;&gt;// v7有10个默认初始化的元素
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v8{&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;};            &lt;span style=&#34;color:#75715e&#34;&gt;// 同上
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;向vector对象中添加元素&#34;&gt;向vector对象中添加元素&lt;/h3&gt;
&lt;p&gt;向vector对象中添加元素可以利用其成员函数**push_back()，**该方法可以将一个元素压入（push）vector的尾部（back）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vS;
string s;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s)
		vS.push_back(s);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;⛔如果循环体内部包含有向vector对象添加元素的语句，则不能使用范围for循环。&lt;/p&gt;
&lt;h3 id=&#34;其他vector操作&#34;&gt;其他vector操作&lt;/h3&gt;
&lt;p&gt;除了push_back之外，vector还提供了以下常用操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;方法&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v.empty()&lt;/td&gt;
&lt;td&gt;如果v不含任何元素则返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v.size()&lt;/td&gt;
&lt;td&gt;返回v中元素的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v.push_back(t)&lt;/td&gt;
&lt;td&gt;向v的尾端添加一个值为t的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v[n]&lt;/td&gt;
&lt;td&gt;返回v中第n个位置上的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v1 = v2&lt;/td&gt;
&lt;td&gt;用v2中的元素的拷贝替换v1中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v1 = {a, b, c&amp;hellip;}&lt;/td&gt;
&lt;td&gt;用列表中元素的拷贝替换v1中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v1 == v2&lt;/td&gt;
&lt;td&gt;v1和v2相等当且仅当它们的元素数量相同且每一个位置上的元素都相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;v1 ≠ v2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;lt;, ≤, &amp;gt;, ≥&lt;/td&gt;
&lt;td&gt;以字典顺序比较&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;⛔不能使用下标来为vector对象添加元素，下标运算符只能用来访问已有的元素。&lt;/p&gt;
&lt;h2 id=&#34;迭代器介绍&#34;&gt;迭代器介绍&lt;/h2&gt;
&lt;p&gt;我们已经通过下标运算符对string对象的字符或者vector对象的元素实现了访问，其实还有另一种更通用的机制也可以实现同样的目的，这就是迭代器（iterator）。&lt;strong&gt;所有标准库容器都支持迭代器，但是其中只有少数几种才同时支持下标运算符。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡迭代器首先是一种类型，它类似于指针，但是指针的对象可以是任何。而迭代器的对象是容器中的元素或者string对象中的字符。迭代器有有效和无效之分，这一点和指针差不多。有效的迭代器或者指向某个元素，或者指向容器中尾元素的下一位置：其他所有情况都属于无效。&lt;/p&gt;
&lt;h3 id=&#34;使用迭代器&#34;&gt;使用迭代器&lt;/h3&gt;
&lt;p&gt;和指针不同，获取迭代器不是使用取地址符，有迭代器的类型同时拥有返回迭代器的成员函数。比如，这些类型都拥有begin和end成员，其中begin成员负责返回指向第一个元素的迭代器。end成员则负责返回指向容器“尾元素的下一个位置”的迭代器（常被称作&lt;strong&gt;尾后迭代器&lt;/strong&gt;）。&lt;strong&gt;特殊情况下如果容器为空，则begin和end返回的是同一个迭代器——尾后迭代器。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;迭代器运算符&#34;&gt;迭代器运算符&lt;/h4&gt;
&lt;p&gt;迭代器支持的一些常用运算如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*iter&lt;/td&gt;
&lt;td&gt;返回迭代器iter所指元素的引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iter→mem&lt;/td&gt;
&lt;td&gt;解引用iter并获取该元素名为mem的成员，等价于(*iter).mem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#NAME?&lt;/td&gt;
&lt;td&gt;令iter指示容器中的下一个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;—iter&lt;/td&gt;
&lt;td&gt;令iter指示容器中的上一个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iter1 == iter2&lt;/td&gt;
&lt;td&gt;判断两个迭代器是否相等，如果两个迭代器指示的是同一元素则相等，否则不等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iter1  ≠ iter2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pretty girl&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s.begin() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; s.end()) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s.begin();
		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toupper(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这个例子的任务是将一个字符串的第一个单词的首字母变为大写。&lt;/p&gt;
&lt;h4 id=&#34;迭代器类型&#34;&gt;迭代器类型&lt;/h4&gt;
&lt;p&gt;以vector为例，迭代器的类型有：std::vector::iterator和std::vector::const_iterator两种。const_iterator和常量指针差不多，能读取但不能修改它所指的元素值。相反，iterator的对象可读可写。如果vector对象或string对象是一个常量，只能使用const_iterator；如果vector对象或string对象不是常量，那么既能使用iterator也能使用const_iterator。&lt;/p&gt;
&lt;p&gt;begin和end返回的具体类型由对象是否是常量决定，如果对象是常量，begin和end返回const_iterator；如果对象不是常量，返回iterator；&lt;strong&gt;有时我们在对象不是常量的时候也想使用常量迭代器，则可以使用cbegin和cend成员函数返回常量迭代器。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;结合解引用和成员访问操作&#34;&gt;结合解引用和成员访问操作&lt;/h4&gt;
&lt;p&gt;解引用迭代器可以获得迭代器所指的对象，如果该对象恰好是一个类，就有可能进一步访问它的成员。&lt;/p&gt;
&lt;p&gt;💡(*iter).mem等于iter→mem&lt;/p&gt;
&lt;h4 id=&#34;某些对vector对象的操作会使迭代器失效&#34;&gt;某些对vector对象的操作会使迭代器失效&lt;/h4&gt;
&lt;p&gt;虽然vector对象可以动态的增长，但是也会有一些限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能在范围for循环中向vector对象添加元素&lt;/li&gt;
&lt;li&gt;任何一种可能改变vector对象&lt;strong&gt;容量&lt;/strong&gt;的操作都会使vector对象的迭代器失效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;迭代器运算&#34;&gt;迭代器运算&lt;/h3&gt;
&lt;p&gt;迭代器的递增运算令迭代器每次移动一个元素，**所有的标准库容器都有支持递增运算的迭代器。**除此之外，String和Vector的迭代器提供了更多额外的运算符，如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;运算&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iter + n&lt;/td&gt;
&lt;td&gt;迭代器向前移动了n个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iter - n&lt;/td&gt;
&lt;td&gt;迭代器向后移动了n个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iter +=n&lt;/td&gt;
&lt;td&gt;将迭代器移动后的结果赋给迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iter -= n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;iter1 - iter2&lt;/td&gt;
&lt;td&gt;计算两个迭代器的距离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;gt;,  ≥, &amp;lt;, ≤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子，使用迭代器进行二分搜索：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (beg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; end) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;midIter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; target) {
        beg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; midIter;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;midIter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; target) {
        end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; midIter;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; midIter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; vI.begin() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
    midIter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vI.begin() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; beg) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;
&lt;p&gt;数组也是一种容器，其与vector非常类似，不同的是其大小是固定的，不支持向数组中增加元素。&lt;/p&gt;
&lt;h3 id=&#34;定义和初始化内置数组&#34;&gt;定义和初始化内置数组&lt;/h3&gt;
&lt;p&gt;数组是一种&lt;a href=&#34;https://www.notion.so/dereen/Chapter_02-3ae7c7c1804f4e1f8f64461b9b08ec77#8501b6ff46544a29a313d4655b27d8de&#34;&gt;复合类型&lt;/a&gt;。数组的声明形如a[d]，其中a是数组的名字，d是数组的维度，d必须为&lt;a href=&#34;https://www.notion.so/dereen/Chapter_02-3ae7c7c1804f4e1f8f64461b9b08ec77#a89d7a12c4fd45fba69da7cf8d41198b&#34;&gt;常量表达式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;❗和内置类型一样，如果在函数内部定义了某种内置类型的数组，那么默认初始化会令数组含有未定义的值。&lt;/p&gt;
&lt;h4 id=&#34;显式初始化数组元素&#34;&gt;显式初始化数组元素&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ia[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ib[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};           &lt;span style=&#34;color:#75715e&#34;&gt;// 第四个元素会被默认初始化
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;字符数组的特殊性&#34;&gt;字符数组的特殊性&lt;/h4&gt;
&lt;p&gt;即考虑末尾的&amp;rsquo;\0&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string sa[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;;                  &lt;span style=&#34;color:#75715e&#34;&gt;// 报错，空间不够，容纳不了那个\\0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;不允许拷贝和赋值&#34;&gt;不允许拷贝和赋值&lt;/h4&gt;
&lt;p&gt;下面的数组操作都是不允许的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a2[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;                       &lt;span style=&#34;color:#75715e&#34;&gt;// 错误
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;a2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;                             &lt;span style=&#34;color:#75715e&#34;&gt;// 错误
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;复杂的数组声明&#34;&gt;复杂的数组声明&lt;/h4&gt;
&lt;p&gt;和vector一样，数组能存放大多数类型的对象。例如，可以定义一个存放指针的数组。又因为数组本身就是对象，所以允许定义数组的指针及数组的引用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];                 &lt;span style=&#34;color:#75715e&#34;&gt;// ptrs是含有10个整型指针的数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;refs[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];                &lt;span style=&#34;color:#75715e&#34;&gt;// 错误❌，引用不是对象，不能存进任何容器
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Parray)[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;arr;     &lt;span style=&#34;color:#75715e&#34;&gt;// Parray指向一个含有10个整数的数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;arrRef)[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr;      &lt;span style=&#34;color:#75715e&#34;&gt;// arrRef绑定到一个含有10个整数的数组
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来看一个更复杂的例子：&lt;code&gt;int *(&amp;amp;arry)[10] = ptrs;&lt;/code&gt;，要读懂这条语句，理清arry的类型，可以按照**从变量名开始，由内向外的阅读方式。**首先arry是一个引用，它绑定在一个大小为10的数组上，这个数组的元素是int *。&lt;/p&gt;
&lt;h3 id=&#34;访问数组元素&#34;&gt;访问数组元素&lt;/h3&gt;
&lt;p&gt;在使用数组下标的时候，通常将其定义为size_t类型。size_t是一种机器相关的无符号类型，它被设计的足够大以便能表示内存中任意对象的大小。可以使用范围for循环来遍历一个数组。来看一个按分数段统计学生数目的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; scores[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; grade;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; grade) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;scores[grade &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;指针和数组&#34;&gt;指针和数组&lt;/h3&gt;
&lt;p&gt;数组名字其实就是个指向数组首元素的指针。指向数组元素的指针也是个迭代器，可以用来遍历数组。为了让指针的使用更简单、更安全，C++标准库引入了名为begin和end函数，将数组名作为参数传入，就可以获得指向数组首元素的指针和尾后指针。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ia[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; beg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; begin(ia); beg &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; end(ia); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;beg) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;beg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;;
cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;指针运算&#34;&gt;指针运算&lt;/h4&gt;
&lt;p&gt;指向数组元素的指针可以执行&lt;a href=&#34;https://www.notion.so/dereen/d0f1c4e109eb44548189e5d411dc318a?v=7e760c5aa6d14ae9a34fa282d14c28b5&#34;&gt;表1&lt;/a&gt;和&lt;a href=&#34;https://www.notion.so/dereen/fff57b16fb034d3697b8874aea3acb19?v=60d6a1c56ab84cb58a3dd0d82f030c5e&#34;&gt;表2&lt;/a&gt;的所有迭代器运算。&lt;strong&gt;标准库类型限定的下标类型必须是无符号类型，而内置的下标运算符可以处理负值。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];                    &lt;span style=&#34;color:#75715e&#34;&gt;// p指向a中尾后位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;             &lt;span style=&#34;color:#75715e&#34;&gt;// p[-2]相当于将p向前移动2位置，输出为1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;c风格字符串&#34;&gt;C风格字符串&lt;/h3&gt;
&lt;p&gt;C风格字符串:&lt;code&gt;char s[]或char* s&lt;/code&gt;等。按此习惯书写的字符串存放在字符数组中并以空字符结束（\0）。&lt;strong&gt;一般利用指针来操作这些字符串。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;⛔在C++程序中最好不要使用它们。&lt;/p&gt;
&lt;h4 id=&#34;c标准库string函数&#34;&gt;C标准库String函数&lt;/h4&gt;
&lt;p&gt;下标列举了C标准库提供的一组函数，这些函数可用于操作C风格字符串，它们定义在cstring头文件中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.notion.so/a8ea452acd214bbe8dec10ad8af7b884&#34;&gt;C风格字符串的函数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;连接或拷贝C风格字符串也与标准string对象的同类操作差别很大。例如，要想连接两个C风格字符串可以使用下面的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Good&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; boy.&amp;#34;&lt;/span&gt;;
string blank &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
string s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; blank &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s1[&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;], s2[&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;];
strcpy(s1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Good&amp;#34;&lt;/span&gt;);
strcpy(s2, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; boy.&amp;#34;&lt;/span&gt;);
strcat(s1, s2);               &lt;span style=&#34;color:#75715e&#34;&gt;// 返回s1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;与旧代码的接口&#34;&gt;与旧代码的接口&lt;/h3&gt;
&lt;h4 id=&#34;混用string对象和c风格字符串&#34;&gt;混用string对象和C风格字符串&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;允许使用以空字符结束的字符数组来初始化string对象或为string对象赋值&lt;/li&gt;
&lt;li&gt;在string对象的加法运算中允许使用以空字符结束的字符数组作为其中一个运算对象；在string对象的复合赋值运算中允许使用空字符结束的字符数组作为右侧的运算对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;❗上述性质反过来不成立，即无法用string对象初始化或为C风格字符串赋值。&lt;/p&gt;
&lt;p&gt;为了完成该功能，string专门提供了一个名为c_str的成员函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;string s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goodsssss&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s1.c_str();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用数组初始化vector对象&#34;&gt;使用数组初始化vector对象&lt;/h4&gt;
&lt;p&gt;**之前我们说过不允许使用数组为一个内置类型的数组赋初值，也不允许用vector对象初始化数组。相反的，是允许的。**只需要指出拷贝区域的首元素和尾后地址即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; vI(begin(a), end(a));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡应当尽量使用vector和迭代器，避免使用内置数组和指针。&lt;/p&gt;
&lt;h2 id=&#34;多维数组&#34;&gt;多维数组&lt;/h2&gt;
&lt;p&gt;C++中的多维数组，指的其实是数组的数组。&lt;/p&gt;
&lt;h3 id=&#34;多维数组的初始化&#34;&gt;多维数组的初始化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ia[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;} 
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ia[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;}; &lt;span style=&#34;color:#75715e&#34;&gt;// 这种初始化和上面的结果是一样的，但是建议使用上面的
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用范围for循环遍历多维数组&#34;&gt;使用范围for循环遍历多维数组&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;row : ia)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; col : row)
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; col &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;❗注意，第一个row必须是引用类型，这样可以防止被自动转化为指针。否则会出现编译错误。&lt;/p&gt;
&lt;h3 id=&#34;指针和多维数组&#34;&gt;指针和多维数组&lt;/h3&gt;
&lt;p&gt;当程序使用多维数组的名字时，也会自动将其转换成指向数组首元素的指针。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ia[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p)[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ia;            &lt;span style=&#34;color:#75715e&#34;&gt;// 括号不可省略，否则就成了指针的数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ia[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];                  &lt;span style=&#34;color:#75715e&#34;&gt;// p指向ia的第三行
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>CppPrimer02.变量和基本类型</title>
      <link>https://happy.dereen.top/post/cppprimer_chapter02/</link>
      <pubDate>Fri, 24 Apr 2020 12:57:12 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/cppprimer_chapter02/</guid>
      
        <description>&lt;p&gt;本章主要介绍内置类型，并初步说明C++语言是如何支持更复杂数据类型的。&lt;/p&gt;
&lt;h2 id=&#34;基本数据类型&#34;&gt;&lt;strong&gt;基本数据类型&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;C++定义了一套包括算术类型和空类型在内的基本数据类型。其中算术类型包括了字符、整数型、布尔值和浮点型。**空类型不对应任何具体的值，仅用于一些特殊场合，**例如当函数不返回任何值时使用空类型作为其返回值。&lt;/p&gt;
&lt;h3 id=&#34;算术类型&#34;&gt;&lt;strong&gt;算术类型&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;算数类型分为两类，整型（包括字符和布尔类型）和浮点型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;含义&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;最小尺寸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;bool&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;布尔类型&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;未定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;char&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;字符&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;wchar_t&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;宽字符&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;char16_t&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Unicode字符&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;char32_t&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Unicode字符&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;short&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;短整型&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;int&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;整型&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;long&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;长整型&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;32位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;long long&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;长整型&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;64位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;float&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;单精度浮点数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;double&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;双精度浮点数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;long double&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;扩展精度浮点数&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;C++提供了多种字符类型，基本的字符类型是char，一个char的空间应确保可以存放机器基本字符集中任意字符对应的数字值。也就是说，&lt;strong&gt;一个char的大小和一个机器字节一样。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;机器字长是指计算机进行一次整数运算所能处理的二进制数据的位数（整数运算即定点整数运算）。因为计算机中数的表示有定点数和浮点数之分，定点数又有定点整数和定点小数之分，这里所说的整数运算即定点整数运算。机器字长也就是运算器进行定点数运算的字长，通常也是CPU内部数据通道的宽度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;字节和字&#34;&gt;&lt;strong&gt;字节和字&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;💡大多数计算机以2的整数次幂个比特（bit）作为块来处理内存，可寻址的最小内存块成为“字节（byte）”，存储的基本单元称为“字（word）”，它通常由几个字节组成。在C++语言中，一个字节要至少能容纳机器基本字符集中的字符。大多数计算机的字节由8bit构成，字则由32或64bit构成，也就是4或8字节。&lt;/p&gt;
&lt;h3 id=&#34;带符号类型和无符号类型&#34;&gt;&lt;strong&gt;带符号类型和无符号类型&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;除去布尔和扩展的字符型之外，其他整型可以划分为带符号的和无符号的两种。带符号的可表示正数、负数或0，无符号类型则仅能表示大于等于0的值。通过在类型前加上unsigned标识即可定义一个无符号类型，例如：unsigned int。&lt;/p&gt;
&lt;p&gt;与上面所述不同的是，字符型被分为了3种：char、signed char和unsigned char。需要注意的是，类型char和类型signed char并不相同。尽管字符型有三种，但是字符的表现形式却只有两种：带符号的和无符号的，类型char实际上会表现为哪一种由编译器决定。&lt;/p&gt;
&lt;h3 id=&#34;如何选择类型&#34;&gt;&lt;strong&gt;如何选择类型&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当明确数值不可能为负时，选用无符号类型&lt;/li&gt;
&lt;li&gt;使用int执行整形运算，如果数值超过了int的表示范围，选用long long&lt;/li&gt;
&lt;li&gt;执行浮点数运算选用double，这是因为其计算代价与float相差无几，而精度反而更高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;&lt;strong&gt;类型转换&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;自动类型转换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们把一个非布尔类型的算数值赋给布尔类型时，初始值为0则结果为false，否则结果为true&lt;/li&gt;
&lt;li&gt;当我们把一个布尔值赋给非布尔类型时，true变为1，false则变为0&lt;/li&gt;
&lt;li&gt;当我们把浮点型赋给整型时，只保留整数部分的值&lt;/li&gt;
&lt;li&gt;当我们把一个整数值赋给浮点类型时，小数部分为0，如果该整数所占的空间超过了浮点类型的容量，精度可能有损失&lt;/li&gt;
&lt;li&gt;**当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型的表示数值总数取模后的余数。**例如，将-1赋给一个unsigned char，则结果为255()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💡无符号类型和带符号类型做运算时，带符号类型会首先被转换为无符号类型再做运算，这样造成的结果往往是未知的。&lt;/p&gt;
&lt;h3 id=&#34;字面值常量&#34;&gt;&lt;strong&gt;字面值常量&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一个形如82的值被称作字面值常量，这样的值一看便知。每个字面值常量都对应一种数据类型，字面值常量的形式和值决定了它的数据类型。&lt;/p&gt;
&lt;h4 id=&#34;整型和浮点型字面值&#34;&gt;&lt;strong&gt;整型和浮点型字面值&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;我们可以将整型字面值写作十进制数、八进制数或十六进制数的形式。以0开头的整数代表八进制数，以0x或0X开头的代表十六进制数。20的三种表示方法：20、024、0x14。&lt;/p&gt;
&lt;p&gt;整型字面值具体的数据类型由它的值和符号决定。**默认情况下，十进制字面值是带符号数，八进制和十六进制字面值极可能是带符号的也可能是无符号的。**十进制字面值的类型是int、long、long long中尺寸最小的那个，当然前提是能够容纳下当前的值。八进制和十六进制字面值的类型是能容纳其数值的int、unsigned int、long、unsigned long、long long和unsigned long long中的尺寸最小者。&lt;/p&gt;
&lt;p&gt;💡尽管整型字面值可以存储在带符号数据类型中，但严格来说，十进制字面值不会是负数。如果我们使用了一个形如-42的负十进制字面值，那个负号并不在字面值之内，它的作用仅仅是对字面值取负值而已。&lt;/p&gt;
&lt;p&gt;浮点型字面值表现为一个小数或以科学计数法表示的指数，其中指数部分使用E或e标识：3.1415926、3.14159E0、0.、0e0、.001，默认的浮点型字面值是一个double。&lt;/p&gt;
&lt;h4 id=&#34;字符和字符串字面值&#34;&gt;字符和字符串字面值&lt;/h4&gt;
&lt;p&gt;‘a’：字符字面值，默认类型为char&lt;/p&gt;
&lt;p&gt;“Hello”：字符串字面值，默认类型为常量字符构成的数组，即const char[]&lt;/p&gt;
&lt;p&gt;💡编译器会在每个字符串的结尾处添加一个空字符（&#39;\0&amp;rsquo;），因此字符串字面值的实际长度要比它的内容多1。&lt;/p&gt;
&lt;h4 id=&#34;转义序列&#34;&gt;转义序列&lt;/h4&gt;
&lt;p&gt;有两类字符程序员不能直接使用：一类是不可打印的字符，如退格或其他控制字符，因为它们没有可视的图符；另一类是在C++语言中有特殊含义的字符（单引号、双引号、问号、反斜杠）。在这些情况下需要使用转义序列，转义序列均以反斜杠作为开始，C++语言规定的转义序列包括：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;换行符		\\n		横向制表符	\\t		报警(响铃)符	\\a
纵向制表符	\\v		退格符		\\b		双引号			\\&amp;quot;
反斜线		\\\\		问号		\\?		单引号			\\&#39;
回车符		\\r		换页符		\\f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除此之外,&lt;strong&gt;我们也可以使用泛化的转义序列,其形式是\x后紧跟1个或多个十六进制数字，或\后紧跟1~3个八进制数字。其中数字部分表示的是字符对应的数值。例子：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;	std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x4dO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;115!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n&amp;#34;&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// 输出Hi MOM！并换行
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是，如果\后面跟着的八进制数字超过3个，则只有前三个与\构成转义序列，而\x要用到后面跟着的所有数字。&lt;/p&gt;
&lt;h4 id=&#34;指定字面值的类型&#34;&gt;指定字面值的类型&lt;/h4&gt;
&lt;p&gt;通过添加下表中的前缀和后缀，可以改变整型、浮点型和字符型字面值的默认类型。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;前缀&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;含义&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;u&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Unicode 16 字符&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;char16_t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;U&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Unicode 32 字符&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;char32_t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;L&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;宽字符&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;wchar_t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;u8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UTF-8（仅用于字符串字面常量）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;char&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;整型字面值（后缀）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;u 或 U    unsigned&lt;/li&gt;
&lt;li&gt;l 或 L    long&lt;/li&gt;
&lt;li&gt;ll 或 LL    long long&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浮点型字面值（后缀）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f 或 F    float&lt;/li&gt;
&lt;li&gt;l 或 L    long double&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;布尔字面值和指针字面值&#34;&gt;布尔字面值和指针字面值&lt;/h4&gt;
&lt;p&gt;true和false是布尔类型的字面值：bool test = false;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nullptr是指针字面值。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;p&gt;变量提供一个具名的、可供程序操作的**存储空间。**C++中的每个变量都有其数据类型，数据类型决定着变量所占内存空间的大小和布局方式，该空间能存储的值的范围，以及变量能参与的运算。对C++程序员来说，“变量”和“对象”一般可以互换使用。&lt;/p&gt;
&lt;p&gt;💡一般认为对象是具有某种数据类型的内存空间。&lt;/p&gt;
&lt;h3 id=&#34;变量定义&#34;&gt;变量定义&lt;/h3&gt;
&lt;p&gt;变量定义的基本形式：类型说明符+一个或多个变量名组成的列表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;初始值&#34;&gt;初始值&lt;/h4&gt;
&lt;p&gt;当对象在创建时获得了一个特定的值，我们说这个对象被初始化了。**当一次定义了两个或多个变量时，对象的名字随着定义也就马上可以使用了。**因此在同一条定义语句中，可以使用先定义的变量值初始化后定义的其他变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109.99&lt;/span&gt;, discount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; price &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始化并不是赋值，初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦除，而以一个新值来替代。&lt;/p&gt;
&lt;h4 id=&#34;列表初始化&#34;&gt;列表初始化&lt;/h4&gt;
&lt;p&gt;C++语言定义了初始化的好几种不同形式，这也是初始化问题复杂性的一个体现。例如，要想定义一个名为units_sold的int变量并初始化为0，以下的4条语句都可以做到这一点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; units_sold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; units_sold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; units_sold{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;units_sold&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用花括号来为初始化变量被称为列表初始化，而且这种方法也可以用来为对象赋新值。&lt;strong&gt;当用于内置类型的变量时，这种初始化形式有一个重要特点：如果我们使用列表初始化且初始值存在丢失信息的风险，则编译器将报错。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; ld &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.1415242131241&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;；&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a{ld}, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {ld};   &lt;span style=&#34;color:#75715e&#34;&gt;// 错误：转换未执行，因为存在丢失信息的风险
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(ld), c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ld;     &lt;span style=&#34;color:#75715e&#34;&gt;// 正确：转换执行，且确实丢失了精度
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;默认初始化&#34;&gt;默认初始化&lt;/h4&gt;
&lt;p&gt;如果定义变量时没有指定初值，则变量被默认初始化，此时变量被赋予了“默认值”。默认值到底是什么由变量类型决定，同时定义变量的位置也会对此有影响。&lt;/p&gt;
&lt;h3 id=&#34;变量声明和定义的关系&#34;&gt;变量声明和定义的关系&lt;/h3&gt;
&lt;p&gt;为了增强代码的可读性，C++语言支持分离式编译机制，该机制允许将程序分割为若干个文件，每个文件可被独立编译。&lt;/p&gt;
&lt;p&gt;为了支持分离式编译，C++语言将声明和定义区分开来。**声明（declaration）**使得名字为程序所知，&lt;strong&gt;一个文件如果想使用别处定义的名字则必须包含对那个名字的声明。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡变量声明规定了变量的类型和名字，在这一点上与变量的定义相同，但不同的是，定义还申请存储空间，也可能会为变量赋一个初始值。&lt;/p&gt;
&lt;p&gt;如果想要声明一个变量而非定义它，就在变量名前加上关键字extern，而且不要显式的初始化变量；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;  &lt;span style=&#34;color:#75715e&#34;&gt;// 声明i而非定义i
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j;         &lt;span style=&#34;color:#75715e&#34;&gt;// 声明并定义j
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡变量能且只能被定义一次，但可以被声明多次。&lt;/p&gt;
&lt;h3 id=&#34;标识符&#34;&gt;标识符&lt;/h3&gt;
&lt;p&gt;C++的标识符（identifier）由字母、数字和下划线组成，其中必须以字母或下划线开头。标识符的长度没有限制，但是对大小写字母敏感。&lt;/p&gt;
&lt;p&gt;⛔同时，C++也为标准库保留了一些名字，用户自定义的标识符中这些名字不能使用。&lt;img src=&#34;https://raw.githubusercontent.com/DereenMec/pics/master/img/Untitled.png&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同时，用户自定义的标识符中：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能连续出现两个下划线&lt;/li&gt;
&lt;li&gt;不能以下划线紧连大写字母开头&lt;/li&gt;
&lt;li&gt;定义在函数体外的标识符不能以下划线开头&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量命名规范&#34;&gt;变量命名规范&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;标识符要能体现具体含义&lt;/li&gt;
&lt;li&gt;变量名一般使用小写字母，如index&lt;/li&gt;
&lt;li&gt;用户自定义的类名一般以大写字母开头，如Sales_item&lt;/li&gt;
&lt;li&gt;如果标识符由多个单词组成，则单词间应有明显区分，如student_loan或studentLoan&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;名字的作用域&#34;&gt;名字的作用域&lt;/h3&gt;
&lt;p&gt;作用域（scope）是程序的一部分，在其中名字有其特定的含义。C++中大多数作用域都以花括号分割。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;val) sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; val;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sum of 1 to 10 inclusive is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定义在函数体之外的名字拥有&lt;strong&gt;全局作用域&lt;/strong&gt;（global scope），一旦声明之后，全局作用域内的名字在整个程序的范围内都可使用，如main。名字sum定义于main函数所限定的作用域之内，从声明sum到main函数结束为止都可访问它，但是除了main函数所在的块就无法访问了，因此说变量sum拥有&lt;strong&gt;块作用域&lt;/strong&gt;（block scope）。名字val定义与for语句内，在for语句之内可以访问val，但是在main函数的其他位置就不能访问它了。&lt;/p&gt;
&lt;p&gt;💡一般来说，在对象第一次被使用的地方附近定义它是一种好的选择，因为这样做有助于更容易地找到变量的定义。&lt;/p&gt;
&lt;h4 id=&#34;嵌套的作用域&#34;&gt;嵌套的作用域&lt;/h4&gt;
&lt;p&gt;作用域能够彼此嵌套或称包含，被包含的作用域称为内层作用域，包含着别的作用域的作用域被称为外层作用域。&lt;/p&gt;
&lt;p&gt;作用域中一旦声明了某个名字，它的内层作用域中都能访问该名字，同时，允许在内层作用域中重新定义外层作用域已有的名字。&lt;/p&gt;
&lt;p&gt;❗如果函数有可能用到某全局变量，则不宜在定义一个同名的局部变量。&lt;/p&gt;
&lt;h2 id=&#34;复合类型&#34;&gt;复合类型&lt;/h2&gt;
&lt;p&gt;复合类型（compound type）是指基于其他类型定义的类型。C++语言有几种复合类型，这里介绍指针和引用。&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;p&gt;引用（reference）为对象起了另一个名字，&lt;strong&gt;引用类型&lt;/strong&gt;引用另一种类型。通过将声明符写成&amp;amp;d的形式来定义引用类型，其中d是声明的变量名。&lt;strong&gt;一旦初始化完成，引用将和它的初始值对象一直绑定在一起。因为无法将引用重新绑定到其他对象上，所以引用必须初始化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为引用本身不是一个对象，所以不能定义引用的引用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color:#75715e&#34;&gt;//输出为4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;指针&#34;&gt;指针&lt;/h3&gt;
&lt;p&gt;指针（pointer）是指向另一种类型的复合类型。指针与引用类似，也实现了对其他对象的间接访问。然而指针与引用相比有很多的不同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指针本身就是一个对象，允许对指针赋值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象&lt;/li&gt;
&lt;li&gt;指针无需在定义时赋初值。和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;获取对象的地址&#34;&gt;获取对象的地址&lt;/h4&gt;
&lt;p&gt;指针存放某个对象的地址，要想获取该地址，需要使用&lt;strong&gt;取地址符（操作符&amp;amp;）：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;；&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;因为引用不是对象，没有实际地址，所以不能定义指向引用的指针。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为在声明语句中指针的类型实际上被用于指定他所指向对象的类型，所以二者必须匹配。如果指针指向了一个其他类型的对象，对该对象的操作将发生错误。&lt;/p&gt;
&lt;h4 id=&#34;指针值&#34;&gt;指针值&lt;/h4&gt;
&lt;p&gt;指针的值（即地址）应该属于下列4种状态之一：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指向一个对象。&lt;/li&gt;
&lt;li&gt;指向紧邻对象所占空间的下一个位置。&lt;/li&gt;
&lt;li&gt;空指针，意味着指针没有指向任何对象。&lt;/li&gt;
&lt;li&gt;无效指针，也就是上述情况之外的其他值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;利用指针访问对象&#34;&gt;利用指针访问对象&lt;/h4&gt;
&lt;p&gt;如果指针指向了一个对象，则允许使用解引用符（*）来访问该对象：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val;
&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color:#75715e&#34;&gt;//输出43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;空指针&#34;&gt;空指针&lt;/h4&gt;
&lt;p&gt;空指针（null pointer）不指向任何对象，在试图使用一个指针之前代码可以首先检查它是否为空。以下列出几个生成空指针的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// C++11中引入
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡在新标准下，现在的C++程序最好使用nullptr，同时尽量避免使用NULL。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把int变量直接赋给指针是错误的操作，即使int变量的值恰好等于0也不行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡建议初始化所有指针。&lt;/p&gt;
&lt;h4 id=&#34;其他指针操作&#34;&gt;其他指针操作&lt;/h4&gt;
&lt;p&gt;只要指针拥有一个合法值，就能将他用在条件表达式中。和采用算数值作为条件遵循的规则类似，如果指针的值是0（即是一个空指针），条件取false，否则取true。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p1) std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color:#75715e&#34;&gt;// p1不会输出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p2) std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color:#75715e&#34;&gt;// p2会被打印
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;void指针&#34;&gt;void*指针&lt;/h4&gt;
&lt;p&gt;void&lt;em&gt;指针是一种特殊的指针类型，可用于存放任意对象的地址。一个void&lt;/em&gt;指针存放着一个地址。这一点和其他指针类似。不同的是，我们对改地址中到底是个什么类型的对象并不了解。&lt;/p&gt;
&lt;p&gt;⛔不能直接操作void*指针所指的对象，因为我们并不知道这个对象到底是什么类型，也就无法确定能在这个对象上做哪些操作。&lt;/p&gt;
&lt;h3 id=&#34;理解复合类型的声明&#34;&gt;理解复合类型的声明&lt;/h3&gt;
&lt;p&gt;变量的定义包括一个基本数据类型和一组声明符（*和&amp;amp;是声明符的一部分罢了）。在同一条定义语句中虽然基本数据类型只有一个，但是声明符的形式却可以不同。也就是说，一条定义语句可能定义出不同类型的变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i;
&lt;span style=&#34;color:#75715e&#34;&gt;// i是一个int型的数，p是一个int型指针，r是一个int型引用。
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;指向指针的指针&#34;&gt;指向指针的指针&lt;/h4&gt;
&lt;p&gt;一般来说，声明符中的修饰符（*和&amp;amp;）个数并没有限制。当有多个修饰符连写到一起的时候，按照其逻辑关系祥加解释即可。以指针为例：&lt;/p&gt;
&lt;p&gt;通过*的个数可以区分指针的级别。也就是说，**表示指向指针的指针，***表示指向指针的指针的指针。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val;  &lt;span style=&#34;color:#75715e&#34;&gt;// p1是一个int型指针
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p1;  &lt;span style=&#34;color:#75715e&#34;&gt;// p2是一个指向int型指针的指针
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;指向指针的引用&#34;&gt;指向指针的引用&lt;/h4&gt;
&lt;p&gt;引用本身不是一个对象，因此不能定义指向引用的指针，但是我们可以定义指针的引用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&amp;amp;&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color:#75715e&#34;&gt;// 输出42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡要理解r的类型到底是什么，我们可以采用&lt;strong&gt;从右向左阅读法&lt;/strong&gt;。离变量名最近的符号（如上面例子中的&amp;amp;）对变量的类型有最直接的影响，因此r是一个引用。声明符的其余部分用以确定r引用的类型是什么，此例中的符号*说明r引用的是一个指针。最后，声明的基本数据类型部分指出r引用的是一个int型指针。&lt;/p&gt;
&lt;h2 id=&#34;const限定符&#34;&gt;const限定符&lt;/h2&gt;
&lt;p&gt;有时我们需要定义一种值不能被改变的变量。例如，用一个变量来表示固定的缓冲区的大小。巍峨了满足这一要求，可以用关键字const对变量的类型加以限定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;因为const对象一旦创建后其值就不能再改变，所以const对象必须初始化。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;默认状态下const对象仅在文件内有效&#34;&gt;默认状态下，const对象仅在文件内有效&lt;/h3&gt;
&lt;p&gt;当以编译时初始化的方式定义一个const对象时，就如对bufSize的定义一样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bufSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译器将在编译过程中把用到该变量的地方都替换成对应的值。也就是说，编译器会找到代码中所有用到bufSize的地方，然后以512替换。为了执行这个替换，编译器必须知道变量的初始值。如果程序存在多个文件，则每个用了const对象的文件都必须得能访问到它的初始值才行。&lt;strong&gt;要做到这一点，就必须在每一个用到变量的文件中都有对它的定义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡为了支持这一用法，同时避免对同一变量的重复定义，默认情况下，const对象被设置为只在当前文件内有效。当多个文件中出现了同名的const变量时，其实等同于在不同文件中分别定义了独立的变量。&lt;/p&gt;
&lt;p&gt;某些时候有这样一种const，**它的初始值不是一个常量表达式，**但又确实有必要在文件间共享。这种情况下，我们不希望编译器为每个文件生成独立的变量。相反，我们希望这类const对象向其他非常量对象一样工作，&lt;strong&gt;也就是说只在一个文件中定义，而在多个文件中使用。解决办法是：对于const变量不管是声明还是定义都添加extern关键字，这样只需定义一次就够了。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// file_1.cpp定义并初始化了一个常量，该常量能被其他文件访问
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bufSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// file_1.h头文件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bufSize;  &lt;span style=&#34;color:#75715e&#34;&gt;//与file_1.cpp中的bufSize为同一个
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;const的引用&#34;&gt;const的引用&lt;/h3&gt;
&lt;p&gt;可以把引用绑定到const对象上，我们称之为对常量的引用。与普通引用不同的是，&lt;strong&gt;对常量的引用不能被用作修改它所绑定的对象。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bufSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bufSize;
r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;513&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// 会出错❗，不允许修改
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bufSize;  &lt;span style=&#34;color:#75715e&#34;&gt;//会出错❗，不允许把非常量引用绑定到常量对象上
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;初始化和对const的引用&#34;&gt;初始化和对const的引用&lt;/h4&gt;
&lt;p&gt;一般来说，引用的类型必须与其所引用对象的类型一致，但是也有两个例外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在初始化常量引用时允许使用任意表达式作为初始值，只要该表达式能够转换成引用的类型即可&lt;/li&gt;
&lt;li&gt;允许一个常量引用绑定非常量的对象、字面值，甚至是个一般表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42.14&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;  &lt;span style=&#34;color:#75715e&#34;&gt;// 注意❗，但伴随着精度损失
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;  &lt;span style=&#34;color:#75715e&#34;&gt;// 合法，输出为42
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;   &lt;span style=&#34;color:#75715e&#34;&gt;// 输出为42.14
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j; &lt;span style=&#34;color:#75715e&#34;&gt;// 合法
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在例外一中，编译过程发生了下面的事情：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;    &lt;span style=&#34;color:#75715e&#34;&gt;// 由双精度浮点数生成一个临时的整型常量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp;  &lt;span style=&#34;color:#75715e&#34;&gt;// 让r1绑定这个临时量
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，r1绑定了一个**临时量（temporary）对象。**所谓临时量对象就是当编译器需要一个空间来暂存表达式的求值结果时临时创建的一个未命名的对象。C++程序员常把临时量对象称为临时量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;值得注意的是，类似于例外一的这种伴随类型转换的非常量引用都是非法的：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42.11&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;指针和const&#34;&gt;指针和const&lt;/h3&gt;
&lt;p&gt;与引用一样，也可以令指针指向一个常量对象，&lt;strong&gt;指向常量对象的指针不能改变其所指对象的值，要想存放常量对象的地址，只能使用指向常量的指针。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里存在一种例外情况，即指向常量的指针可以指向一个非常量对象，所以下面的语句是合法的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42.11&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;const指针&#34;&gt;const指针&lt;/h4&gt;
&lt;p&gt;**指针是对象而引用不是，所以允许把指针本身定义为常量。**这就意味着指针中存放的那个地址不可被改变，即不能更换指向的对象。把*放在const之前就可以说明指针是一个常量。&lt;/p&gt;
&lt;p&gt;💡这里注意区分常量指针和指向常量的指针，&lt;code&gt;const int* p = &amp;amp;i;&lt;/code&gt;说明p是一个指向常量的指针，它指向的对象的值不可被改变，但是它指谁是可以被改变的；而&lt;code&gt;int* const p&lt;/code&gt;则是一个常量指针，它指向的对象的值可以被改变，但是它指谁是不可变的。这两者可以同时使用，即&lt;code&gt;const int* const p&lt;/code&gt;，造成的结果就是指谁和指的对象的值都不可改变。&lt;/p&gt;
&lt;h3 id=&#34;顶层const&#34;&gt;顶层const&lt;/h3&gt;
&lt;p&gt;鉴于指针本身是不是常量以及指针所指的对象是不是一个常量是两个独立的问题。用名词**顶层const（top-level const）表示指针本身是个常量，*&lt;em&gt;而用名词*&lt;em&gt;底层const（low-level const）表示指针所指对象是一个常量。&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;更一般的，**顶层const可以表示任意的对象是常量，这一点对任何数据类型都适用，**如算数类型、类、指针等。&lt;strong&gt;底层const则与指针和引用等&lt;a href=&#34;https://www.notion.so/dereen/Chapter_02-3ae7c7c1804f4e1f8f64461b9b08ec77#8501b6ff46544a29a313d4655b27d8de&#34;&gt;复合类型&lt;/a&gt;的基本类型部分有关。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡指针的特殊之处在于它既可以是顶层const又可以是底层const。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5123&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i; &lt;span style=&#34;color:#75715e&#34;&gt;// 顶层const，即不能更换指向对象，但可改变所指对象的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ci;  &lt;span style=&#34;color:#75715e&#34;&gt;// 顶层const
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ci;  &lt;span style=&#34;color:#75715e&#34;&gt;// 底层const，即可以更换指向对象，但不可以改变所指对象的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; p3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p2;  &lt;span style=&#34;color:#75715e&#34;&gt;// 既是顶层const，又是底层const
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci;  &lt;span style=&#34;color:#75715e&#34;&gt;//引用的const必然是底层const
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;当执行拷贝操作时，常量是顶层const还是底层const带来的区别明显。其中顶层const不受什么影响。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci;  &lt;span style=&#34;color:#75715e&#34;&gt;// 合法，拷贝ci的值，ci是一个顶层const，对此操作无影响
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p3;  &lt;span style=&#34;color:#75715e&#34;&gt;// 合法，p2和p3所指向的对象相同，均为const int，p3的顶层const部分对此操作无影响
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;而底层const（复合类型独有）的限制却不能忽略。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层const资格，或者两个对象的数据类型必须能够转换（非const转为const，反之则不行）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p3;  &lt;span style=&#34;color:#75715e&#34;&gt;// 错误，p3包含底层const，想想要是p把通过p3都不允许改的值改了怎么办
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p3; &lt;span style=&#34;color:#75715e&#34;&gt;// 正确，p2和p3都是底层const，都不允许修改指向对象的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i; &lt;span style=&#34;color:#75715e&#34;&gt;// 正确，在这个过程中伴随着非const转为const
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci; &lt;span style=&#34;color:#75715e&#34;&gt;// 错误，普通的int不能绑定到const int的ci身上
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;  &lt;span style=&#34;color:#75715e&#34;&gt;// 正确，int可以转为const int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;constexpr和常量表达式&#34;&gt;constexpr和常量表达式&lt;/h3&gt;
&lt;p&gt;常量表达式（const expression）是指值不会改变并且在编译过程就能得到计算结果的表达式。显然，&lt;a href=&#34;https://www.notion.so/dereen/Chapter_02-3ae7c7c1804f4e1f8f64461b9b08ec77#f52d5c89fac248ff95da324151e9ac28&#34;&gt;字面值&lt;/a&gt;属于常量表达式。用字面值初始化的const对象也是常量表达式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个对象（或表达式）是不是常量表达式由它的数据类型（是否为const）和初始值共同决定，例如：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max_files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;               &lt;span style=&#34;color:#75715e&#34;&gt;// √
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; limit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max_files &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;// √
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; staff_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;;                    &lt;span style=&#34;color:#75715e&#34;&gt;// 虽然staff_size的初始值是个字面值常量，但由于它的数据类型只是一个普通int，所以不是常量表达式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_size();              &lt;span style=&#34;color:#75715e&#34;&gt;// 虽然左侧是const int类型，但它的具体值直到运行时才能获取，所以也不是常量表达式
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;constexpr变量&#34;&gt;constexpr变量&lt;/h4&gt;
&lt;p&gt;在实际工作中，我们很难分辨一个初始值到底是不是常量表达式。C++11新标准规定，允许&lt;strong&gt;将变量声明为constexpr类型以便由编译器自己检查变量的值是否是一个常量表达式。如果不是，就会报错。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;;            &lt;span style=&#34;color:#75715e&#34;&gt;// √
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;// √
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ef &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size();        &lt;span style=&#34;color:#75715e&#34;&gt;// 只有当size()是一个constexpr函数时才是一条正确的语句
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡一般来说，如果你认定变量是一个常量表达式，那就把它声明成constexpr类型。&lt;/p&gt;
&lt;h4 id=&#34;字面值类型&#34;&gt;字面值类型&lt;/h4&gt;
&lt;p&gt;常量表达式的值需要在编译时就得到计算，所以能够声明成constexpr的类型就有限。因为这些类型一般比较简单，值也显而易见、容易得到，就把它们统称为“字面值类型”。算术类型、引用和指针都&lt;strong&gt;属于&lt;/strong&gt;字面值类型。自定义类、IO库、string类型则&lt;strong&gt;不属于&lt;/strong&gt;字面值类型。也就不能被定义为constexpr。&lt;/p&gt;
&lt;p&gt;尽管指针和引用都能定义成constexpr，但它们的初始值却受到严格限制。一个constexpr指针的初始值必须是nullptr或者0，或者时存储与某个固定地址中的对象。一般来说，函数体内定义的变量并非存放在固定的地址中，因此constexpr指针不能指向这样的变量。相反的，定义与所有函数体之外的对象，其地址不变，能用来初始化constexpr指针。同时，函数体中定义的一类有效范围超出函数本身的变量，这类变量和定义在函数体之外的变量一样也有固定地址。因此，constexpr引用能绑定到这样的变量上，constexpr指针也能指向这样的变量。&lt;/p&gt;
&lt;h4 id=&#34;指针和constexpr&#34;&gt;指针和constexpr&lt;/h4&gt;
&lt;p&gt;在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指的对象无关（顶层const）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;// 底层const，所指的对象的值不可变
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;// 顶层const，不能更换所指的对象
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与其他常量指针类似，constexpr指针既可以指向常量对象，也可以指向非常量对象（只是通过这个指针不能修改）。&lt;/p&gt;
&lt;h2 id=&#34;处理类型&#34;&gt;处理类型&lt;/h2&gt;
&lt;p&gt;用于类型名称太复杂，写着写着就忘了，以及不知道返回值是什么类型的时候。&lt;/p&gt;
&lt;h3 id=&#34;类型别名&#34;&gt;类型别名&lt;/h3&gt;
&lt;p&gt;由两种方法为类型建立别名。一是&lt;strong&gt;typedef方法&lt;/strong&gt;，二是&lt;strong&gt;using&lt;/strong&gt;方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; base, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p;    &lt;span style=&#34;color:#75715e&#34;&gt;// base是double的同义词，p是double*的同义词
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;;        
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;;          &lt;span style=&#34;color:#75715e&#34;&gt;// 同样的效果
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;指针常量和类型别名&#34;&gt;指针、常量和类型别名&lt;/h4&gt;
&lt;p&gt;如果某个类型别名指代的是复合类型或常量，那么把它用到声明语句里就会产生意想不到的后果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pString;        &lt;span style=&#34;color:#75715e&#34;&gt;// pString是一个char*类型，即指向char对象的指针
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; pString cstr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a;      &lt;span style=&#34;color:#75715e&#34;&gt;// const pString并不是const char*类型，而是char* const 类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cstr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;;                  &lt;span style=&#34;color:#75715e&#34;&gt;// 正确
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cstr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;               &lt;span style=&#34;color:#75715e&#34;&gt;// 错误
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;auto类型说明符&#34;&gt;auto类型说明符&lt;/h3&gt;
&lt;p&gt;C++11新标准引入了auto类型说明符，用它就能让编译器替我们去分析表达式所属的类型。和原来那些只对应一种特定类型的说明符（如int）不同，auto让编译器通过初始值来推算变量的类型。&lt;strong&gt;显然，auto定义的变量必须有初始值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡使用auto也能在一条语句中声明多个变量。因为一条声明语句只能有一个基本数据类型，&lt;strong&gt;所以该语句中所有变量的初始基本数据类型都必须一样：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, pi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;// 错误，类型必须一致
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.0&lt;/span&gt;, pi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;;     &lt;span style=&#34;color:#75715e&#34;&gt;// 正确
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;复合类型常量和auto&#34;&gt;复合类型、常量和auto&lt;/h4&gt;
&lt;p&gt;auto一般会忽略掉顶层const，同时底层const会被保留下来，比如当初始值是一个指向常量的指针时。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci;
&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci;                    &lt;span style=&#34;color:#75715e&#34;&gt;// a是一个整数，ci的顶层const特性被忽略了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cr;                    &lt;span style=&#34;color:#75715e&#34;&gt;// b是一个整数，（cr是ci的别名，ci本身是一个顶层const）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ci;                   &lt;span style=&#34;color:#75715e&#34;&gt;// c是一个指向整数常量的指针（对常量对象取地址是一种底层const）
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;如果希望推断出的auto类型是一个顶层const，需要明确指出。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以将引用的类型设置为auto，此时原来的初始化规则仍然适用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci;             &lt;span style=&#34;color:#75715e&#34;&gt;// 正确，g是一个整型常量引用，绑定到ci
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;             &lt;span style=&#34;color:#75715e&#34;&gt;// 错误，不能为非常量引用绑定字面值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// 正确，可以为常量引用绑定字面值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;decltype类型的指示符&#34;&gt;decltype类型的指示符&lt;/h3&gt;
&lt;p&gt;有时，我们希望从表达式的类型推断出要定义的变量的类型，但是**不想用该表达式的值初始化变量。*&lt;em&gt;为了满足这一要求，C++11新标准引入了第二种类型说明符decltype，它的作用是*&lt;em&gt;选择并返回操作数的数据类型，却不实际计算表达式的值。&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(f()) sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;     &lt;span style=&#34;color:#75715e&#34;&gt;// sum的类型就是f的返回值类型
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**decltype处理顶层const和引用的方式与auto有些不同。**如果decltype使用的表达式是一个变量，则decltype返回该变量的类型（包括顶层const和引用在内）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ci &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ci;
&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(ci) x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;              &lt;span style=&#34;color:#75715e&#34;&gt;// x的类型为const int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(cj) y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;              &lt;span style=&#34;color:#75715e&#34;&gt;// y的类型为const int&amp;amp;，绑定到变量x
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(cj) z;                  &lt;span style=&#34;color:#75715e&#34;&gt;// 错误❗，z是一个引用，必须被初始化
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡引用从来都是作为其所指对象的同义词出现，只有用在decltype处是一个例外。&lt;/p&gt;
&lt;h4 id=&#34;decltype和引用&#34;&gt;decltype和引用&lt;/h4&gt;
&lt;p&gt;如果decltype使用的表达式不是一个变量，则decltype返回表达式结果对应的类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) b;            &lt;span style=&#34;color:#75715e&#34;&gt;// 合法，加法表达式的结果是int，因此b是一个未初始化的int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(r) b;                &lt;span style=&#34;color:#75715e&#34;&gt;// 错误，引用必须初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p) c;               &lt;span style=&#34;color:#75715e&#34;&gt;// c是int&amp;amp;，必须初始化
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**💡如果表达式的内容是解引用操作，则decltype将得到引用类型。**正如我们所熟知的，解引用指针可以得到指针所指的对象，而且还能给这个对象赋值。因此decltype(*p)的结果类型就是int&amp;amp;，而非int。&lt;/p&gt;
&lt;p&gt;另一个例子显示了变量名加上一对括号和不加括号的区别：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;((i)) d;             &lt;span style=&#34;color:#75715e&#34;&gt;// 错误：d是int&amp;amp;，必须初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(i) e;               &lt;span style=&#34;color:#75715e&#34;&gt;// 正确，e是一个未初始化的int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;❗切记：decltype((variable))双层括号的结果永远是引用，而decltype(variable)结果只有当variable本身是一个引用时才是引用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;自定义数据结构&#34;&gt;自定义数据结构&lt;/h2&gt;
&lt;p&gt;从最基本的层面理解，数据结构是把一组相关的数据元素组织起来然后使用它们的策略和方法。&lt;/p&gt;
&lt;h3 id=&#34;定义sales_data类型&#34;&gt;定义Sales_data类型&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sales_data&lt;/span&gt; {
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string bookNo;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; units_sold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; revenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;❗这里需要注意的是，不要漏掉花括号后面的分号，这是因为类体后面可以直接跟变量名，所以分号必不可少。&lt;/p&gt;
&lt;h4 id=&#34;类数据成员&#34;&gt;类数据成员&lt;/h4&gt;
&lt;p&gt;类的数据成员定义了类的对象的具体内容，每个对象有自己的一份数据成员拷贝。修改一个对象的数据成员，不会影响其他Sales_data的对象。&lt;/p&gt;
&lt;p&gt;❗注意，对类内初始值的限制与之前类似；或者放在花括号里，或者放在等号右边，记住不可使用圆括号。&lt;/p&gt;
&lt;h3 id=&#34;编写自己的头文件&#34;&gt;编写自己的头文件&lt;/h3&gt;
&lt;p&gt;为了确保各个文件中类的定义一致，类通常被定义在头文件中，而且&lt;strong&gt;类所在头文件的名字应该与类的名字一样。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用pragma-once确保不会重复包含&#34;&gt;使用#pragma once确保不会重复包含&lt;/h4&gt;
&lt;p&gt;确保头文件多次包含仍能安全工作的常用技术是预处理器（preprocessor）。例如#include，当预处理器看到#include标记时就会把该头文件内的全部内容复制到当前文件中来。&lt;/p&gt;
&lt;p&gt;C++中常用的一项技术是头文件保护符（header guard），有两种方法用来避免头文件重复被包含。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SALES_DATA_H
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SALES_DATA_H
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sales_data&lt;/span&gt; {
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string bookNo;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; units_sold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; revenue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
};
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种是使用&lt;strong&gt;ifndef&lt;/strong&gt;方法；另一种方法是使用&lt;strong&gt;pragma once：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma once
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡头文件即使（目前还）没有被包含在任何头文件中，也应该设置保护符。头文件保护符很简单，程序员只要习惯性的加上就可以了，没必要太在乎你的程序到底需要不需要。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>CppPrimer01.开始</title>
      <link>https://happy.dereen.top/post/cppprimer_chapter01/</link>
      <pubDate>Fri, 24 Apr 2020 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/cppprimer_chapter01/</guid>
      
        <description>&lt;p&gt;本章介绍C++的大部分基础内容：类型、变量、表达式、语句及函数。&lt;/p&gt;
&lt;h2 id=&#34;c程序结构&#34;&gt;&lt;strong&gt;C++程序结构&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;每个C++程序都包含一个或多个Function，**其中一个必须命名为&lt;code&gt;main&lt;/code&gt;。**操作系统通过调用&lt;code&gt;main&lt;/code&gt;来运行C++程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt;的返回值必须为&lt;code&gt;int&lt;/code&gt;类型。&lt;/p&gt;
&lt;h2 id=&#34;初识输入输出&#34;&gt;&lt;strong&gt;初识输入输出&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;iostream&lt;/code&gt;是C++的标准库。&lt;code&gt;iostream&lt;/code&gt;包含两个基础类型&lt;code&gt;istream&lt;/code&gt;和&lt;code&gt;ostream&lt;/code&gt;，分别表示输入和输出流。&lt;strong&gt;一个流就是一个字符序列&lt;/strong&gt;，是从IO设备读出或写入IO设备的。&lt;/p&gt;
&lt;h3 id=&#34;标准输入输出对象&#34;&gt;&lt;strong&gt;标准输入输出对象&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;标准库定义了4个IO对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准输入对象：&lt;code&gt;cin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标准输出对象：&lt;code&gt;cout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他输出对象：&lt;code&gt;cerr&lt;/code&gt;、&lt;code&gt;clog&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;输入输出运算符&#34;&gt;&lt;strong&gt;输入输出运算符&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;输入运算符&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输出运算符&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;作用域运算符&#34;&gt;&lt;strong&gt;作用域运算符&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;::&lt;/code&gt;作用域运算符用于指出名字所在的命名空间，例如&lt;code&gt;cin&lt;/code&gt;、&lt;code&gt;cout&lt;/code&gt;都是定义在标准命名空间中，在使用他们时我们需要&lt;code&gt;std::cin&lt;/code&gt;和&lt;code&gt;std::cout&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;注释简介&#34;&gt;&lt;strong&gt;注释简介&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;C++中有两种注释：单行注释和界定符注释。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
 &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  * 这是一个界定符注释
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  */&lt;/span&gt;
  
 &lt;span style=&#34;color:#75715e&#34;&gt;// 这是一个单行注释
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💡值得注意的是，界定符注释不可嵌套。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  * 这样的注释会使程序崩溃/* */&lt;/span&gt;
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;控制流&#34;&gt;&lt;strong&gt;控制流&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;while语句&#34;&gt;&lt;strong&gt;while语句&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) {
     cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
     &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这段代码会输出10行，每一行都是一个“J”。&lt;/p&gt;
&lt;h3 id=&#34;for语句&#34;&gt;&lt;strong&gt;for语句&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
     cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子的输出和上个例子是相同的，for语句中一共有4部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化语句：&lt;code&gt;int i = 0&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;循环条件：&lt;code&gt;i != 10&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;表达式：&lt;code&gt;++i&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;循环体：&lt;code&gt;{ cout &amp;lt;&amp;lt; &amp;quot;J&amp;quot; &amp;lt;&amp;lt; endl; }&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;for语句在执行时，先执行初始化语句&lt;strong&gt;且只执行一次&lt;/strong&gt;，然后执行循环条件语句，再执行循环体，最后执行表达式，即1243。&lt;/p&gt;
&lt;h3 id=&#34;文件结束符&#34;&gt;&lt;strong&gt;文件结束符&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当从键盘向程序输入数据时，对于如何指出文件结束，不同OS有不同的约定。Windows为：Ctrl+Z，然后输入Enter；Unix系统中为Ctrl+D。&lt;/p&gt;
&lt;h3 id=&#34;if语句&#34;&gt;&lt;strong&gt;if语句&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ){
     cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i = 0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子的输出为：&lt;code&gt;i = 0&lt;/code&gt;；&lt;/p&gt;
&lt;h2 id=&#34;类简介&#34;&gt;&lt;strong&gt;类简介&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在C++中，我们通过定义一个类（class）来定义自己的数据结构。一个类定义了一个类型，以及与其关联的一组操作。&lt;/p&gt;
&lt;p&gt;文件重定向：当测试程序时，反复从键盘敲入相同的字符是很枯燥乏味的，大多数操作系统支持文件重定向，这种机制允许我们将标准输入和标准输出与命名文件关联起来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt; $ addItems &amp;lt;infile&amp;gt; outfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假定我们的程序已经编译好名为addItems的可执行文件，则上面的命令会会从一个名为infile的文件读取销售记录，并将结果输出至另一个名为outfile的文件中，两个文件都位于当前目录。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Ubuntu 拨号上网及校园网开启IPV6</title>
      <link>https://happy.dereen.top/post/ubuntunetwork/</link>
      <pubDate>Wed, 07 Aug 2019 11:20:09 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/ubuntunetwork/</guid>
      
        <description>&lt;p&gt;Ubuntu 18.04下有两种方法实现拨号上网，第一种是通过图形界面添加，需要开启自动连接，并且要关闭以太网的自动连接。（不推荐这种连接方式）这里介绍第二种，通过&lt;code&gt;pppoeconf&lt;/code&gt;命令进行拨号。&lt;/p&gt;
&lt;h2 id=&#34;关闭以太网&#34;&gt;关闭以太网&lt;/h2&gt;
&lt;p&gt;在使用&lt;code&gt;pppoeconf&lt;/code&gt;命令拨号前，我们可以直接禁用掉以太网络，这样就不会每次都弹“有线网络1”无法连接网络那种怪提示。&lt;/p&gt;
&lt;h2 id=&#34;使用pppoeconf进行拨号连接&#34;&gt;使用&lt;code&gt;pppoeconf&lt;/code&gt;进行拨号连接&lt;/h2&gt;
&lt;p&gt;在终端输入&lt;code&gt;sudo pppoeconf&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;输入你的用户名（由ISP所提供 注意：输入时请先清除输入框中的“username“，否则可能造成验证错误）。&lt;/li&gt;
&lt;li&gt;输入你的密码（由ISP所提供）。&lt;/li&gt;
&lt;li&gt;如果你已经配置了一个PPPoE的连接，会通知你这个连接将会被修改。&lt;/li&gt;
&lt;li&gt;弹出一个选项:你被询问是否需要&amp;rsquo;noauth&#39;和&amp;rsquo;defaultroute&#39;选项和去掉&amp;rsquo;nodetach&amp;rsquo;,这里选择&amp;quot;Yes&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;Use peer DNS - 选择 &amp;ldquo;Yes&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Limited MSS problem - 选择 &amp;ldquo;Yes&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;当你被询问是否在需要在进入系统的时候自动连接，你可以选择&amp;quot;Yes&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;最后，你会被询问是否马上建立连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;开启ipv6&#34;&gt;开启ipv6&lt;/h2&gt;
&lt;p&gt;通过&lt;code&gt;pppoeconf&lt;/code&gt;配置的拨号网络本身只开启了IPV4，所以我们需要手动修改配置文件，使其支持IPV6。&lt;/p&gt;
&lt;p&gt;在终端输入&lt;code&gt;sudo gedit /etc/ppp/options&lt;/code&gt;，在最后一行添加如下字段并保存：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+ipv6 ipv6cp-use-ipaddr&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改动态ipv6地址&#34;&gt;修改动态IPV6地址&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sudo gedit /etc/sysctl.d/10-ipv6-privacy.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将net.ipv6.conf.default.use_tempaddr改为0。&lt;/p&gt;
&lt;h2 id=&#34;重启系统或者重新拨号你会发现可以使用ipv6了&#34;&gt;重启系统或者，重新拨号，你会发现可以使用IPV6了&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>Ubuntu 下安装Anaconda &#43; 显卡驱动 &#43; CUDA &#43; CUDNN &#43; 离线安装环境</title>
      <link>https://happy.dereen.top/post/dlenv/</link>
      <pubDate>Thu, 25 Apr 2019 11:20:09 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dlenv/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;写来给自己备忘，并不是什么教程- 。-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;下载安装包&#34;&gt;下载安装包&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anaconda：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显卡驱动：https://www.nvidia.cn/Download/index.aspx?lang=cn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CUDA：https://developer.nvidia.com/cuda-toolkit-archive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CUDNN：https://developer.nvidia.com/rdp/cudnn-download&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;h3 id=&#34;anaconda&#34;&gt;Anaconda&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bash ~/Downloads/Anaconda3-2019.10-Linux-x86_64.sh
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果忘记在conda init 那个选项选择yes 则：&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# source &amp;lt;path to conda&amp;gt;/bin/activate&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# conda init&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果不想打开Terminal 就激活base env，则：&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# conda config --set auto_activate_base False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;离线情况下安装环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 拷贝已有环境文件夹&lt;/span&gt;
/envs/myenv
&lt;span style=&#34;color:#75715e&#34;&gt;# 完成迁移&lt;/span&gt;
conda create -n myenv_2  --clone path/myenv --offline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;显卡驱动&#34;&gt;显卡驱动&lt;/h3&gt;
&lt;p&gt;⚠️在安装显卡驱动前，记得关闭主板的&lt;code&gt;security boot&lt;/code&gt;，这是因为Linux 的自带显卡驱动是&lt;code&gt;nouveau&lt;/code&gt;，而英伟达的官方驱动这时候成了第三方驱动。&lt;code&gt;security boot&lt;/code&gt;禁止第三方驱动。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 禁用nouveau&lt;/span&gt;
sudo vim /etc/modprobe.d/blacklist.conf
&lt;span style=&#34;color:#75715e&#34;&gt;# 在文件最后插入下面两行&lt;/span&gt;
blacklist nouveau
options nouveau modeset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 更新系统&lt;/span&gt;
sudo update-initramfs -u
&lt;span style=&#34;color:#75715e&#34;&gt;# 重启系统&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 验证nouveau 是否已禁用，无输出则说明已经禁用&lt;/span&gt;
lsmod | grep nouveau
&lt;span style=&#34;color:#75715e&#34;&gt;# 按ctrl + alt + F6 进入命令行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 关闭图形界面&lt;/span&gt;
sudo service lightdm stop
&lt;span style=&#34;color:#75715e&#34;&gt;# 卸载原有Nvidia 驱动&lt;/span&gt;
sudo apt-get remove nvidia-*
&lt;span style=&#34;color:#75715e&#34;&gt;# 给安装文件赋予执行权限&lt;/span&gt;
sudo chmod  a+x NVIDIA-Linux-x86_64-410.129-diagnostic.run
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装&lt;/span&gt;
sudo ./NVIDIA-Linux-x86_64-410.129-diagnostic.run -no-x-check -no-nouveau-check -no-opengl-files
&lt;span style=&#34;color:#75715e&#34;&gt;# 挂载Nvidia 驱动&lt;/span&gt;
modprobe nvidia
&lt;span style=&#34;color:#75715e&#34;&gt;# 检查是否安装成功&lt;/span&gt;
nvidia-smi
&lt;span style=&#34;color:#75715e&#34;&gt;# 重启&lt;/span&gt;
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cuda&#34;&gt;CUDA&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo sh cuda_10.0.130_410.48_linux.run
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装过程记得不要安装显卡驱动（因为之前已安装了最新版）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置环境变量&lt;/span&gt;
sudo gedit ~/.bashrc
&lt;span style=&#34;color:#75715e&#34;&gt;# 在末尾添加：&lt;/span&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/cuda-10.0/bin:$PATH
export LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/cuda-10.0/lib64:$LD_LIBRARY_PATH
&lt;span style=&#34;color:#75715e&#34;&gt;# 刷新&lt;/span&gt;
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cudnn&#34;&gt;CUDNN&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 解压并移动文件&lt;/span&gt;
tar -zxvf cudnn-10.0-linux-x64-v7.6.4.38.tgz
cd cuda
sudo mv lib64/lib* /usr/local/cuda-10.0/lib64/
sudo mv include/cudnn.h /usr/local/cuda-10.0/include/
&lt;span style=&#34;color:#75715e&#34;&gt;# 切换到/usr/local/cuda/lib64/文件夹下&lt;/span&gt;
cd /usr/local/cuda/lib64/
&lt;span style=&#34;color:#75715e&#34;&gt;# 建立软连接，注意替换自己的版本号&lt;/span&gt;
sudo chmod +r libcudnn.so.7.6.4
sudo ln -sf libcudnn.so.7.6.4 libcudnn.so.7
sudo ln -sf libcudnn.so.7 libcudnn.so
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>国内可用Anaconda 源的镜像站及换国内源方法</title>
      <link>https://happy.dereen.top/post/pythonsource/</link>
      <pubDate>Mon, 25 Mar 2019 11:20:09 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonsource/</guid>
      
        <description>&lt;p&gt;目前清华开源镜像站和中科大开源镜像站均已发出公告表示已取得Anaconda授权，不久就将重新上线Anaconda软件源（见文末图）。那目前我知道的国内可用Anaconda源的镜像站就有3个，分别是清华、中科大、上交。大家可以分别测试一下下载速度和稳定性，自行选择最优的。&lt;/p&gt;
&lt;p&gt;各个镜像站的设置方法如下，这里只添加了3个常用的频道，如果要添加更多频道请自行添加。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择下面一个镜像站的代码复制并替换下面文件中的全部内容，windows为“C:\用户\你的用户名\.condarc”，Linux为&amp;rdquo;/home/你的用户名/.condarc&amp;rdquo;。（若没有这个文件就新建一个，注意文件名为&lt;code&gt;.condarc&lt;/code&gt;，不要有任何其他后缀）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/&#34;&gt;清华大学开源软件镜像站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;channels:
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tuna&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tsinghua&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tuna&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tsinghua&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;free&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tuna&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tsinghua&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cloud&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;forge&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tuna&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tsinghua&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cloud&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pytorch&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
ssl_verify: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mirrors.sjtug.sjtu.edu.cn/#/&#34;&gt;上海交通大学开源镜像站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;channels:
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sjtug&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sjtu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sjtug&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sjtu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;free&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sjtug&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sjtu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cloud&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;forge&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
ssl_verify: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mirrors.ustc.edu.cn/&#34;&gt;中国科学技术大学 USTC Mirror&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;channels:
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ustc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ustc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;pkgs&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;free&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;mirrors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ustc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edu&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cn&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;anaconda&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cloud&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;conda&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;forge&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;
ssl_verify: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;同时建议更换pip-源方法见这里httpsmirrorstunatsinghuaeducnhelppypi&#34;&gt;同时建议更换PIP 源，方法见&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/pypi/&#34;&gt;这里&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/06/18/5d08d48a7053e18122.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/06/18/5d08d49107a7449366.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Python数据处理.Pandas数据处理&#43;Matplotlib绘图案例</title>
      <link>https://happy.dereen.top/post/dataprocess10/</link>
      <pubDate>Wed, 05 Dec 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess10/</guid>
      
        <description>&lt;p&gt;利用pandas对数据进行预处理然后再使用matplotlib对处理后的数据进行数据可视化是数据分析中常用的方法。&lt;/p&gt;
&lt;h2 id=&#34;第一组例子星巴克咖啡店&#34;&gt;第一组例子(星巴克咖啡店)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;假如我们现在有这样一组数据：星巴克在全球的咖啡店信息，如下图所示。数据来源：&lt;a href=&#34;https://www.kaggle.com/starbucks/store-locations&#34;&gt;starbucks_store_locations&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/10/12/5bc04fa839a60.png&#34; alt=&#34;starbucks_store_worldwide&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;店铺总数排名前10的国家&#34;&gt;店铺总数排名前10的国家&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 统计店铺数排名前10的国家&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

&lt;span style=&#34;color:#75715e&#34;&gt;# 准备工作&lt;/span&gt;
font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&amp;#34;&lt;/span&gt;)
file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./starbucks_store_worldwide.csv&amp;#34;&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)

&lt;span style=&#34;color:#75715e&#34;&gt;# 处理数据&lt;/span&gt;
data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brand&amp;#34;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brand&amp;#34;&lt;/span&gt;]
_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values

&lt;span style=&#34;color:#75715e&#34;&gt;# 画图&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(range(len(_x)), _y, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(len(_x)), _x)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;国家&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;店铺数&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;星巴克咖啡店铺数排行前10（国家）&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/10/15/5bc42dfe7c4d0.png&#34; alt=&#34;星巴克咖啡店铺数排行前10（国家）&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;中国店铺数排名前20的城市&#34;&gt;中国店铺数排名前20的城市&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 统计中国店铺数排名前20的城市&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/fonts/truetype/wqy/wqy-microhei.ttc&amp;#34;&lt;/span&gt;)
file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./starbucks_store_worldwide.csv&amp;#34;&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)

&lt;span style=&#34;color:#75715e&#34;&gt;# 处理数据&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CN&amp;#34;&lt;/span&gt;]
data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;City&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brand&amp;#34;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)[:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brand&amp;#34;&lt;/span&gt;]
_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(data1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index)
_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(data1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values)

&lt;span style=&#34;color:#75715e&#34;&gt;# 画图&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(range(len(_x)), _y)
&lt;span style=&#34;color:#75715e&#34;&gt;# 添加条形图数值&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xx, yy &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(range(len(_x)),_y):
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(xx, yy&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, str(yy), ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(len(_x)), _x, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yticks(range(max(_y)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)[::&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;])
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;城市&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;店铺数&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;中国星巴克咖啡店铺数排行前20（城市）&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/10/15/5bc4324724d55.png&#34; alt=&#34;中国星巴克咖啡店铺数排行前20（城市）&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;第二组例子世界排行前10000书籍信息&#34;&gt;第二组例子（世界排行前10000书籍信息）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;假如我们现在有这样一组数据：世界排行前10000书籍信息，如下图所示。数据来源：&lt;a href=&#34;https://www.kaggle.com/zygmunt/goodbooks-10k&#34;&gt;books&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/10/15/5bc4371c881d7.png&#34; alt=&#34;books&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;各年份书籍平均评分&#34;&gt;各年份书籍平均评分&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  coding=utf-8&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt

file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./books.csv&amp;#34;&lt;/span&gt;
pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_option(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display.max_columns&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)

&lt;span style=&#34;color:#75715e&#34;&gt;# 不同年份书籍的平均评分&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 去除NaN&lt;/span&gt;
data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notnull(df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;original_publication_year&amp;#34;&lt;/span&gt;])]
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(type(data1))
grouped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;average_rating&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;original_publication_year&amp;#34;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(grouped)

_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grouped&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grouped&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)


plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(range(len(_x)), _y)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(len(_x))[::&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;], _x[::&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int), rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid()
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/10/15/5bc43790b4799.png&#34; alt=&#34;各年份书籍平均分&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;由于公元前的年份书籍较少，每年只有一本，所以数据波动幅度会很大，越往后就会越趋于平稳&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;911紧急求救电话信息&#34;&gt;911紧急求救电话信息&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这个案例不牵扯绘图，但是这个案例中有个很重要的问题就是关于对数据进行遍历的问题。数据来源：&lt;a href=&#34;https://www.kaggle.com/mchirico/montcoalert/data&#34;&gt;Emergency - 911 Calls&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如我们要读取这个数据文件中各类求救电话的数量，应该怎么做呢？我们首先来看一下这个数据文件的基本信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./911.csv&amp;#34;&lt;/span&gt;
pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_option(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display.max_columns&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 249737 entries, 0 to 249736
Data columns (total 9 columns):
lat          249737 non-null float64
lng          249737 non-null float64
desc         249737 non-null object
zip          219391 non-null float64
title        249737 non-null object
timeStamp    249737 non-null object
twp          249644 non-null object
addr         249737 non-null object
e            249737 non-null int64
dtypes: float64(3), int64(1), object(5)
memory usage: 17.1+ MB
None

Process finished with exit code 0

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到这个数据文件竟然有25万行之多- -&lt;/p&gt;
&lt;p&gt;我们再查看他的第一行信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         lat        lng                                               desc  \
0  40.297876 -75.581294  REINDEER CT &amp;amp; DEAD END;  NEW HANOVER; Station ...   

       zip                   title            timeStamp          twp  \
0  19525.0  EMS: BACK PAINS/INJURY  2015-12-10 17:10:52  NEW HANOVER   

                     addr  e  
0  REINDEER CT &amp;amp; DEAD END  1  

Process finished with exit code 0

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到类型适合具体事项都归类在了title里面，所以我们第一步首先要将类型和具体事项分隔开：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;data1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tolist()
&lt;span style=&#34;color:#75715e&#34;&gt;# 这里我们直接对所得分类做了去重操作&lt;/span&gt;
data2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set([i[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data1])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面关键的一步，我们要统计各个分类下的求救电话数量。&lt;strong&gt;因为这个数据有25w行，所以如果像我之前的文章中去一行一行的遍历，程序的速度就会变得非常慢。这里我们使用for循环来遍历分类列表，则会快很多。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建全0数组方便下一步的统计&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], len(data2))), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data2, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int)
&lt;span style=&#34;color:#75715e&#34;&gt;# 这一步就是将a中与原数据中相同索引行，但title中包含i类型求助信息的那个值置为1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data2:
    a[i][df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contains(i)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

a_sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a_sum)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EMS        124844
Traffic     87465
Fire        37432
dtype: int64

&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Python数据处理.关于matplotlib绘制直方图偏移的问题</title>
      <link>https://happy.dereen.top/post/dataprocess09/</link>
      <pubDate>Sun, 02 Dec 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess09/</guid>
      
        <description>&lt;p&gt;在使用pyplot绘制直方图的时候我发现了一个问题，在给函数.hist()传参的时候，如果传入的组数不是刚刚好（就是说这个组数如果是使用(最大值-最小值)/组距计算出来，而这个数字不是整除得来而是取整得来的话），图像就会产生偏移现象。&lt;/p&gt;
&lt;p&gt;看下面这段代码：绘制IMDB排行前1000电影的时长分布直方图&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# 数据准备&lt;/span&gt;
file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./IMDB-Movie-Data.csv&amp;#34;&lt;/span&gt;

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)
runtime_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Runtime (Minutes)&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# 计算组数&lt;/span&gt;
max_runtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(runtime_data)
min_runtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(runtime_data)
num_bin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int((max_runtime&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;min_runtime)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置图形参数&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 绘图&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(runtime_data, num_bin)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(min_runtime, max_runtime&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：
&lt;img src=&#34;https://i.loli.net/2018/09/25/5ba9bd4caad34.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产生这个问题的原因就在于，在这个程序中&lt;code&gt;max_runtime-min_runtime&lt;/code&gt;的值是125，不能被6整除，所以产生了偏移。
如果我们将上述代码中的&lt;code&gt;(max_runtime-min_runtime)//6&lt;/code&gt;和&lt;code&gt;plt.xticks(range(min_runtime, max_runtime+6, 6))&lt;/code&gt;中的6更换为一个能被125整除的数，比如5，结果会是如何呢？
&lt;img src=&#34;https://i.loli.net/2018/09/25/5ba9befce735c.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;我们可以看到问题解决了，偏移消失了，但是这并不是解决问题的根本办法，如果我们就是要用6作为组距而不想偏移呢？
&lt;strong&gt;我们可以传入一个列表参数来解决这个问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# 数据准备&lt;/span&gt;
file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./IMDB-Movie-Data.csv&amp;#34;&lt;/span&gt;

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)
runtime_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Runtime (Minutes)&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# 将传参从组数改为传入列表&lt;/span&gt;
max_runtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(runtime_data)
min_runtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(runtime_data)
	
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(runtime_data, range(min_runtime, max_runtime&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(min_runtime, max_runtime&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：
&lt;img src=&#34;https://i.loli.net/2018/09/25/5ba9c056abec9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Python数据处理.Pandas之索引</title>
      <link>https://happy.dereen.top/post/dataprocess08/</link>
      <pubDate>Fri, 30 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess08/</guid>
      
        <description>&lt;p&gt;Pandas的标签处理需要分成多种情况来处理,Series和DataFrame根据标签索引数据的操作方法是不同的,单列索引和双列索引的操作方法也是不同的。&lt;/p&gt;
&lt;h2 id=&#34;单列索引&#34;&gt;单列索引&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcd&amp;#34;&lt;/span&gt;))

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: 
       a    b    c    d
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reindex所插入的标签如果是原来的标签中没有的就会将该行的值全部置为nan&#34;&gt;reindex所插入的标签如果是原来的标签中没有的，就会将该行的值全部置为NaN&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reindex([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;])
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: ssss
       a    b    c    d
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
f    NaN  NaN  NaN  NaN

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: 
       a    b    c    d
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用index修改标签&#34;&gt;使用index修改标签&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;]

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: 
       a    b    c    d
a  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
b    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用set_index将某一列变为标签&#34;&gt;使用set_index将某一列变为标签&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: 
         b    c    d
a
&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: 
       a    b    c    d
a  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
b    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用drop参数控制将某一列作为索引后是否删除原数据&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: 
           a    b    c    d
a
&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用unique函数可以去除重复值&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: Float64Index([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;float64&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: Float64Index([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;float64&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: len(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique())
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;双列索引&#34;&gt;双列索引&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;])
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: 
             c    d
a     b
&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# levels这个列表中含有两个列表,分别是双列索引的每一列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: 
MultiIndex(levels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;]],
           labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]],
           names&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;])
           
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;: list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hjklmno&amp;#34;&lt;/span&gt;)})

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: 
   a  b    c  d
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  one  h
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  one  j
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  one  k
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  two  l
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  two  m
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  two  n
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  two  o

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: 
       a  b
c   d
one h  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    j  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    k  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
two l  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    m  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    n  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    o  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;]

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: c
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: 
c    d
one  h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
     k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
two  l    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
     m    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
     n    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
     o    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
Name: a, dtype: int64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;双列索引取值&#34;&gt;双列索引取值&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]: c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]: 
d
h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Name: a, dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;]


In [&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;]: d
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;]: 
d  c
h  one    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
j  one    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
k  one    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
l  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
m  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
n  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
o  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
Name: a, dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 对于索引数少的列在后的情况,如果直接取会发生错误&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;]: d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;                                  Traceback (most recent call 
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;swaplevel函数进行标签列换位&#34;&gt;swaplevel()函数进行标签列换位&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]: d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swaplevel()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]: 
c    d
 one  h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
     k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
 two  l    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
     m    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
     n    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
     o    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
Name: a, dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swaplevel()

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;]: d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;]: 
d
h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Name: a, dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]: 
       a  b
c   d      
 one h  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    j  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    k  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
 two l  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    m  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    n  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    o  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;对于dataframe类型数组的双列索引取值时应该加上loc或iloc&#34;&gt;对于DataFrame类型数组的双列索引,取值时应该加上loc或iloc&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]: b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]: 
   a  b
d      
h  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
j  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
k  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;]: d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Python数据处理.pandas之时间序列</title>
      <link>https://happy.dereen.top/post/dataprocess07/</link>
      <pubDate>Fri, 23 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess07/</guid>
      
        <description>&lt;p&gt;Pandas的标签处理需要分成多种情况来处理,Series和DataFrame根据标签索引数据的操作方法是不同的,单列索引和双列索引的操作方法也是不同的。&lt;/p&gt;
&lt;h2 id=&#34;单列索引&#34;&gt;单列索引&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcd&amp;#34;&lt;/span&gt;))

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: 
       a    b    c    d
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reindex所插入的标签如果是原来的标签中没有的就会将该行的值全部置为nan&#34;&gt;reindex所插入的标签如果是原来的标签中没有的，就会将该行的值全部置为NaN&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reindex([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;])
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: ssss
       a    b    c    d
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
f    NaN  NaN  NaN  NaN

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: 
       a    b    c    d
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用index修改标签&#34;&gt;使用index修改标签&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;]

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: 
       a    b    c    d
a  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
b    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用set_index将某一列变为标签&#34;&gt;使用set_index将某一列变为标签&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: 
         b    c    d
a
&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: df
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: 
       a    b    c    d
a  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
b    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用drop参数控制将某一列作为索引后是否删除原数据&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: 
           a    b    c    d
a
&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用unique函数可以去除重复值&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: Float64Index([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;float64&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: Float64Index([&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;float64&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: len(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique())
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;双列索引&#34;&gt;双列索引&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;])
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: 
             c    d
a     b
&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# levels这个列表中含有两个列表,分别是双列索引的每一列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: 
MultiIndex(levels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;]],
           labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]],
           names&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;])
           
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;: list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hjklmno&amp;#34;&lt;/span&gt;)})

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: 
   a  b    c  d
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  one  h
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  one  j
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  one  k
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  two  l
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  two  m
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  two  n
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  two  o

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: 
       a  b
c   d
one h  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    j  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    k  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
two l  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    m  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    n  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    o  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;]

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: c
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: 
c    d
one  h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
     k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
two  l    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
     m    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
     n    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
     o    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
Name: a, dtype: int64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;双列索引取值&#34;&gt;双列索引取值&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]: c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]: 
d
h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Name: a, dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;]


In [&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;]: d
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;]: 
d  c
h  one    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
j  one    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
k  one    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
l  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
m  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
n  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
o  two    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
Name: a, dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 对于索引数少的列在后的情况,如果直接取会发生错误&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;]: d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;                                  Traceback (most recent call 
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;swaplevel函数进行标签列换位&#34;&gt;swaplevel()函数进行标签列换位&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]: d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swaplevel()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]: 
c    d
 one  h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
     k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
 two  l    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
     m    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
     n    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
     o    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
Name: a, dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;swaplevel()

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;]: d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;]: 
d
h    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
j    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
k    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Name: a, dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]: 
       a  b
c   d      
 one h  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    j  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    k  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
 two l  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    m  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    n  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    o  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;对于dataframe类型数组的双列索引取值时应该加上loc或iloc&#34;&gt;对于DataFrame类型数组的双列索引,取值时应该加上loc或iloc&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]: b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]: 
   a  b
d      
h  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
j  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
k  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;]: d&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Python数据处理.pandas之时间序列</title>
      <link>https://happy.dereen.top/post/dataprocess06/</link>
      <pubDate>Mon, 19 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess06/</guid>
      
        <description>&lt;p&gt;Pandas中提供了许多用来处理时间格式文本的方法，包括按不同方法生成一个时间序列，修改时间的格式，重采样等等。&lt;/p&gt;
&lt;h2 id=&#34;按不同的方法生成时间序列&#34;&gt;按不同的方法生成时间序列&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# 按起始和终止日期以及步长生成时间序列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date_range(start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20171212&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20180101&amp;#34;&lt;/span&gt;,freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: 
DatetimeIndex([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-12&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-13&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-14&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-15&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-16&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-17&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-18&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-19&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-20&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-22&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-23&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-24&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-25&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-26&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-27&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-28&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-29&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-30&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-31&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-01&amp;#39;&lt;/span&gt;],
              dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime64[ns]&amp;#39;&lt;/span&gt;, freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date_range(start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20171212&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20180101&amp;#34;&lt;/span&gt;,freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10D&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: DatetimeIndex([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-12&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-22&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-01&amp;#39;&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime64[ns]&amp;#39;&lt;/span&gt;, freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10D&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 按起始日期，数量和步长生成时间序列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date_range(start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20171212&amp;#34;&lt;/span&gt;,periods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10D&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: 
DatetimeIndex([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-12&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-22&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-01&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-11&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-31&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-02-10&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-02-20&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-03-02&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-03-12&amp;#39;&lt;/span&gt;],
              dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime64[ns]&amp;#39;&lt;/span&gt;, freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10D&amp;#39;&lt;/span&gt;)
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date_range(start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20171212&amp;#34;&lt;/span&gt;,periods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: 
DatetimeIndex([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-31&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-31&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-02-28&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-03-31&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-04-30&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-05-31&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-06-30&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-07-31&amp;#39;&lt;/span&gt;,
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-08-31&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-09-30&amp;#39;&lt;/span&gt;],
              dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime64[ns]&amp;#39;&lt;/span&gt;, freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果取不到最后一天，这个时间序列就会停止在前一个生成的日期处&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;date_range(start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20171212&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20180105&amp;#34;&lt;/span&gt;,freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10D&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: DatetimeIndex([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-12&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2017-12-22&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2018-01-01&amp;#39;&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;datetime64[ns]&amp;#39;&lt;/span&gt;, freq&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10D&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;案例&#34;&gt;案例&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;假如我们现在有美国2015年12月到2017年9月的911求救电话信息。（数据来源：&lt;a href=&#34;https://www.kaggle.com/mchirico/montcoalert/data&#34;&gt;Emergency - 911 Calls&lt;/a&gt;）假如我们需要统计并绘制每个月的各类求救电话的变化情况，应该怎么做呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

filepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./911.csv&amp;#34;&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(filepath)
font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Windows\Fonts\msyh.ttc&amp;#34;&lt;/span&gt;)

df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timeStamp&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_datetime(df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timeStamp&amp;#34;&lt;/span&gt;])
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timeStamp&amp;#34;&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

temp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
cate_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; temp_list]
df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cate&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cate_list

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 分组&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; group_name, group_data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cate&amp;#34;&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;# 对不同分类进行绘图&lt;/span&gt;
    count_by_month &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; group_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resample(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count()[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;]

    _x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count_by_month&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
    _y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count_by_month&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
    
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(range(len(_x)), _y, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;group_name)

_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%Y-%m&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(len(_x)), _x, rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(loc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;best&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：&lt;img src=&#34;https://i.loli.net/2018/10/21/5bcc19461c7bc.png&#34; alt=&#34;911求救信息变化图&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Python数据处理.Pandas之分组</title>
      <link>https://happy.dereen.top/post/dataprocess05/</link>
      <pubDate>Thu, 15 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess05/</guid>
      
        <description>&lt;p&gt;假如我们现在有这样一组数据：星巴克在全球的咖啡店信息，如下图所示。数据来源：&lt;a href=&#34;https://www.kaggle.com/starbucks/store-locations&#34;&gt;starbucks_store_locations&lt;/a&gt;。我们想要统计中国每个城市的星巴克商店的数量，那我们应该怎么做呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/10/12/5bc04fa839a60.png&#34; alt=&#34;starbucks_store_worldwide&#34;&gt;&lt;/p&gt;
&lt;p&gt;在pandas中，为我们提供了一个处理分组问题的函数&lt;code&gt;groupby()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./starbucks_store_worldwide.csv&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 设置最多输出20行&lt;/span&gt;
pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_option(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display.max_rows&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)

df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)
df_CN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CN&amp;#34;&lt;/span&gt;]

grouped_CN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df_CN&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;City&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(grouped_CN[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brand&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count())

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;City
Admiralty          2
Causeway Bay       5
Central            1
Chaiwan            1
Changshu           1
Changzhou          1
Fortress Hill      1
Hangzhou           2
Hong Kong        104
Jiaxing            2
                ... 
长春市               10
长沙市               26
阳江市                1
青岛市               28
靖江市                2
鞍山市                3
马鞍山                3
高邮市                1
黄石市                1
龙岩市                2
Name: Brand, Length: 197, dtype: int64

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假如我们不想先提取中国的数据再分组，而是想一步到位应该怎么做呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# coding=utf-8&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./starbucks_store_worldwide.csv&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 设置最多输出20行&lt;/span&gt;
pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_option(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display.max_rows&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(file_path)

grouped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CN&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Brand&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Country&amp;#34;&lt;/span&gt;], df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;City&amp;#34;&lt;/span&gt;]])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count()

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(grouped)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Country  City         
CN       Admiralty          2
         Causeway Bay       5
         Central            1
         Chaiwan            1
         Changshu           1
         Changzhou          1
         Fortress Hill      1
         Hangzhou           2
         Hong Kong        104
         Jiaxing            2
                         ... 
         长春市               10
         长沙市               26
         阳江市                1
         青岛市               28
         靖江市                2
         鞍山市                3
         马鞍山                3
         高邮市                1
         黄石市                1
         龙岩市                2
Name: Brand, Length: 197, dtype: int64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以发现，与上面结果不同的是，这次的索引成了2列，不但有city，还有Country。这是因为我们再用group分组的时候传入了2个参数进去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里需要注意，最终的结果其实是包含双列索引的单列1维数组，类型是&lt;code&gt;pandas.core.series.Series&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Python数据处理.Pandas</title>
      <link>https://happy.dereen.top/post/dataprocess04/</link>
      <pubDate>Wed, 14 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess04/</guid>
      
        <description>&lt;p&gt;&lt;em&gt;pandas&lt;/em&gt; is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.这段话是pandas官方网站对于Pandas的介绍，翻译过来就是：pandas是一个开源的，BSD许可的库，为Python编程语言提供高性能，易于使用的&lt;strong&gt;数据结构和数据分析工具&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;series一维数组&#34;&gt;Series一维数组&lt;/h2&gt;
&lt;h3 id=&#34;创建一个pandas一维数组&#34;&gt;创建一个pandas一维数组&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pandas.Series()&lt;/code&gt;创建的是带有标签的一维数组。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# 第一种创建方法，传入两个列表&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;], index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcdef&amp;#34;&lt;/span&gt;))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]:
a    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
b    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
c    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
d    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
e    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
f    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 第二种创建方法，传入一个字典&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: temp_dict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xiaohong&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binxian&amp;#34;&lt;/span&gt;}

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(temp_dict)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]:
name       xiaohong
age              &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
address     binxian
dtype: object
&lt;span style=&#34;color:#75715e&#34;&gt;# 第三种创建方法，利用string.ascii_uppercase生成一个字典，再传入生成一个带标签数组&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase[i]:i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)}

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]:
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(a)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]:
A    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
C    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
H    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
I    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
J    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 当有标签的地方没有值时，该位置的元素值就被置为NaN&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(a, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]:
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;6.0&lt;/span&gt;
H    &lt;span style=&#34;color:#ae81ff&#34;&gt;7.0&lt;/span&gt;
I    &lt;span style=&#34;color:#ae81ff&#34;&gt;8.0&lt;/span&gt;
J    &lt;span style=&#34;color:#ae81ff&#34;&gt;9.0&lt;/span&gt;
K    NaN
L    NaN
M    NaN
N    NaN
O    NaN
dtype: float64

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pandas数组元素类型修改&#34;&gt;pandas数组元素类型修改&lt;/h3&gt;
&lt;p&gt;要修改pandas数组中元素的类型与numpy中是一样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(a)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;float64&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]:
A    &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
C    &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;6.0&lt;/span&gt;
H    &lt;span style=&#34;color:#ae81ff&#34;&gt;7.0&lt;/span&gt;
I    &lt;span style=&#34;color:#ae81ff&#34;&gt;8.0&lt;/span&gt;
J    &lt;span style=&#34;color:#ae81ff&#34;&gt;9.0&lt;/span&gt;
dtype: float64

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;取一维数组的值或标签&#34;&gt;取一维数组的值或标签&lt;/h3&gt;
&lt;p&gt;这个操作大体也与numpy中相应的操作相同：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(a)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]:
A    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
C    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
H    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
I    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
J    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]:
A    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
C    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: a[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]:
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: a[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;]]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]:
A    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
dtype: int64

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: a[a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]:
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
H    &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
I    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
J    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
dtype: int64

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pandas一维数组的组成&#34;&gt;pandas一维数组的组成&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: Index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;J&amp;#39;&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;object&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: array([&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int64)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: type(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;core&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indexes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: type(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: numpy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndarray

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;由上面的代码可以看出，pandas Series一维数组实际上是由一个numpy一维数组和类型为&lt;code&gt;pandas.core.indexes.base.Index&lt;/code&gt;的一维数组拼成的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;dataframe多维数组&#34;&gt;DataFrame多维数组&lt;/h2&gt;
&lt;h3 id=&#34;创建dataframe多维数组&#34;&gt;创建DataFrame多维数组&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 要创建一个DataFrame数组，我们只需给pd.DataFrame（）中传入一个数组即可&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: 
   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 既然DataFrame是带标签的数组，那我们如何定义它的标签？看下面的代码：&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]:  a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;),index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;),columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defg&amp;#34;&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# 从结果可以看出：index插入的是行标签，columns插入的是列标签&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]:
   d  e   f   g
a  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
b  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
c  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 除了传入数组，我们也可以传入字典作为参数，来创建一个DataFrame数组&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: d1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chenpi&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dufu&amp;#34;&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;:[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;:[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;]}

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(d1)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]:
     name  age   color
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  chenpi    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  orange
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    dufu    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   white

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看多维数组的参数&#34;&gt;查看多维数组的参数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: d2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(d1)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: d2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: 
     name  age   color
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  chenpi    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  orange
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    dufu    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   white
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看行索引&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: RangeIndex(start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, stop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, step&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看列索引&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: Index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看值，可以看到DataFrame数组的值其实就是一个numpy同维数组&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: 
array([[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chenpi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;],
       [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dufu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;]], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;object)
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看形状&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看类型&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtypes
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: 
name     object
age       int64
color    object
dtype: object
&lt;span style=&#34;color:#75715e&#34;&gt;# 查看维度&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndim
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数组切片&#34;&gt;数组切片&lt;/h2&gt;
&lt;h3 id=&#34;使用headtail方法取头或尾连续多行&#34;&gt;使用head()、tail()方法取头或尾连续多行&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 取第一行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;]: 
     name  age   color
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  chenpi    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  orange
&lt;span style=&#34;color:#75715e&#34;&gt;# 取前二行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;]: 
     name  age   color
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  chenpi    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  orange
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;    dufu    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   white
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果不给head()指定参数则默认取前5行，这里因为整个数组只有2行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]: 
     name  age   color
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  chenpi    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  orange
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;    dufu    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   white
&lt;span style=&#34;color:#75715e&#34;&gt;# 用tail()方法从后往前取行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tail(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;]: 
   name  age  color
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  dufu    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  white
&lt;span style=&#34;color:#75715e&#34;&gt;# 如果不想要索引可以这样取（values后面的参数同numpy中相同）&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]: d2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;]: array([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dufu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;object)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;利用列表的切片功能&#34;&gt;利用列表的切片功能&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 先建立一个数组如下&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;]: t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCDEFGHI&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: J&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;), columns=list(&amp;#34;&lt;/span&gt;KLMNOPQRST&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;))&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;]: t1
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;]: 
    K   L   M   N   O   P   Q   R   S   T
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;
E  &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;
F  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;
G  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;
H  &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;
I  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;
J  &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 取前5行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;]: t1[:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;]: 
    K   L   M   N   O   P   Q   R   S   T
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;
E  &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 取前5行“Q”列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;]: t1[:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;]: 
A     &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
C    &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;
Name: Q, dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 取“Q”列数据&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;]: t1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;]: 
A     &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
C    &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;
H    &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;
I    &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;
J    &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;
Name: Q, dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 单列数组的类型是Series一维数组&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;]: type(t1[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;])
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;]: pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;core&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;series&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;loc函数切片&#34;&gt;loc()函数切片&lt;/h3&gt;
&lt;h4 id=&#34;dfloc通过标签索引行数据&#34;&gt;&lt;code&gt;df.loc()&lt;/code&gt;通过标签索引行数据&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用loc函数进行切片与numpy中切片的方式是相同的&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;]: t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 取“C”行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;]: t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, :]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;]: 
K    &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
L    &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
M    &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
N    &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
O    &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
P    &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
Q    &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
R    &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;
S    &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
T    &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;
Name: C, dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 取“O”列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;]: t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[:, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;O&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;]: 
A     &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
B    &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
C    &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
D    &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;
E    &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;
F    &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;
G    &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;
H    &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;
I    &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;
J    &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;
Name: O, dtype: int64
&lt;span style=&#34;color:#75715e&#34;&gt;# 取多行多列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;]: t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;], [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;O&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;]]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;]: 
    O   Q
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
H  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 取“A”到“J”行，（这里需要注意的是，与一般的切片不同，这里的“J”是可以取到的）&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;]: t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;]: 
    K   L   M   N   O   P   Q   R   S   T
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;
E  &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;
F  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;
G  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;
H  &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;
I  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;
J  &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;dfiloc通过位置索引行数据&#34;&gt;&lt;code&gt;df.iloc()&lt;/code&gt;通过位置索引行数据&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用iloc进行切片与numpy中完全相同&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;]: t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;]: 
    M   O   Q
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
F  &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0：10依然包含第10列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;]: t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;]: 
    K   L   M   N   O   P   Q   R   S   T
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;
E  &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;
F  &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;
G  &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;
H  &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;
I  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;
J  &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pandas之nan&#34;&gt;pandas之NaN&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;]: t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt;]: t2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt;]: 
    K   L   M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 我们可以发现与在numpy中不同的是，在pandas中我们要将一个整型元素变为NaN，不需要在预先对其进行类型转换，pandas会帮我们将这一列的数据自动转换为float类型&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;]: t2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;]: 
    K     L   M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;   NaN  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用isnull可以判别该位置的值是否是NaN&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnull(t2)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;]: 
       K      L      M      N
A  False  False  False  False
B  False   True  False  False
C  False  False  False  False
D  False  False  False  False
&lt;span style=&#34;color:#75715e&#34;&gt;# notnull则是反效果&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;]: pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notnull(t2)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;]: 
      K      L     M     N
A  True   True  True  True
B  True  False  True  True
C  True   True  True  True
D  True   True  True  True
&lt;span style=&#34;color:#75715e&#34;&gt;# 选择L列中不为NaN的行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: t2[pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notnull(t2[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;])]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: 
    K     L   M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 我们可以使用dropna方法来删除包含NaN的行或列&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dropna(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: 
    K     L   M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 添加参数how=&amp;#34;all&amp;#34;可以指定删除全为NaN的行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dropna(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, how&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: 
    K     L   M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;   NaN  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 此外，我们可以使用参数inplace=True来进行原地操作，改变t2的值&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dropna(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: t2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: 
    K     L   M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;31.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 我们可以使用fill.na来对值为NaN的位置进行重新赋值&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: 
    K     L     M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 这里可以看出这个操作是有返回值的非原地操作，如果需要原地操作，需要加参数inplace=True&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: t2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: 
    K     L     M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   NaN   NaN   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;   NaN   NaN  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 当然，我们还可以填充每列的最大最小值、均值等等&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fillna(t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean())
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: 
    K     L     M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: t2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: 
    K     L     M   N
A   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   NaN   NaN   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;21.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;22.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;   NaN   NaN  &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 这里有个和numpy不同的地方：pandas在计算均值时遇到NaN会自动忽略，而不是将NaN作为计算结果&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: 
K    &lt;span style=&#34;color:#ae81ff&#34;&gt;16.666667&lt;/span&gt;
L    &lt;span style=&#34;color:#ae81ff&#34;&gt;21.000000&lt;/span&gt;
M    &lt;span style=&#34;color:#ae81ff&#34;&gt;22.000000&lt;/span&gt;
N    &lt;span style=&#34;color:#ae81ff&#34;&gt;19.666667&lt;/span&gt;
dtype: float64

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;布尔索引&#34;&gt;布尔索引&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在狗的名字和使用次数统计的数组中进行布尔索引&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;]: df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/桌面/dogNames2.csv&amp;#34;&lt;/span&gt;)
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;]: df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count_AnimalName&amp;#34;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
&lt;span style=&#34;color:#75715e&#34;&gt;# 取使用次数大于800并且小于1000次的行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;]: df[(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count_AnimalName&amp;#34;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count_AnimalNam&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: e&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;lt;1000)]&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;]: 
      Row_Labels  Count_AnimalName
&lt;span style=&#34;color:#ae81ff&#34;&gt;2660&lt;/span&gt;     CHARLIE               &lt;span style=&#34;color:#ae81ff&#34;&gt;856&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;3251&lt;/span&gt;        COCO               &lt;span style=&#34;color:#ae81ff&#34;&gt;852&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;12368&lt;/span&gt;      ROCKY               &lt;span style=&#34;color:#ae81ff&#34;&gt;823&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 取使用次数大于800或者小于1次的行&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;]: df[(&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count_AnimalName&amp;#34;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;(df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Count_AnimalNa&lt;/span&gt;
     &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: me&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;lt;1)]&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;]: 
      Row_Labels  Count_AnimalName
&lt;span style=&#34;color:#ae81ff&#34;&gt;1156&lt;/span&gt;       BELLA              &lt;span style=&#34;color:#ae81ff&#34;&gt;1195&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;9140&lt;/span&gt;         MAX              &lt;span style=&#34;color:#ae81ff&#34;&gt;1153&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;2660&lt;/span&gt;     CHARLIE               &lt;span style=&#34;color:#ae81ff&#34;&gt;856&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;3251&lt;/span&gt;        COCO               &lt;span style=&#34;color:#ae81ff&#34;&gt;852&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;12368&lt;/span&gt;      ROCKY               &lt;span style=&#34;color:#ae81ff&#34;&gt;823&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pandas读外部数据&#34;&gt;pandas读外部数据&lt;/h2&gt;
&lt;h3 id=&#34;读取csv文件&#34;&gt;读取CSV文件&lt;/h3&gt;
&lt;p&gt;我们可以使用&lt;code&gt;pandas.read_&lt;/code&gt;后接文件类型如&lt;code&gt;pandas.read_csv&lt;/code&gt;来读取csv文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# 读取当前目录下的dogNames2文件&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./dogNames2.csv&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;读取数据库文件&#34;&gt;读取数据库文件&lt;/h3&gt;
&lt;p&gt;对于数据库文件，该如何读取呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 读关系数据库&lt;/span&gt;
pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_sql(sql_sentence&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connection)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于非关系数据库如mongodb：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pymongo &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MongoClient
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# 读取douban数据库中tv1数据&lt;/span&gt;
client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MongoClient()
collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;douban&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tv1&amp;#34;&lt;/span&gt;]
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(collection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find())
&lt;span style=&#34;color:#75715e&#34;&gt;# 要是想取第一行的数据，可以使用如下语句&lt;/span&gt;
t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series(t1)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(t1)
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用DataFrame读取&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df)
&lt;span style=&#34;color:#75715e&#34;&gt;# 结果是一个[2379 rows x 26 columns]的数组&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 如果要取特定的列&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 我们先取一行，打印一下看我们需要哪些信息&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(i)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 打印结果如下：&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;: ObjectId(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;59ba7f9b421aa91b08a43faa&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;王伟/潘粤明/王泷正/梁缘/剧情/犯罪/悬疑/2017-08-30(中国大陆)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;original_price&amp;#39;&lt;/span&gt;: None, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;release_date&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;08.30&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;count&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;23043&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;白夜追凶&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://m.douban.com/movie/subject/26883064/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;price&amp;#39;&lt;/span&gt;: None, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cover&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://qnmob2.doubanio.com/view/movie_poster_cover/lpst/public/p2483150767.jpg?imageView2/0/q/80/w/9999/h/400/format/jpg&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shape&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rectangle&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2134&lt;/span&gt;}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;douban://douban.com/tv/26883064&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;actions&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;可播放&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&amp;#39;&lt;/span&gt;: None, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subtype&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;directors&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;王伟&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;actors&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;潘粤明&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;王泷正&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;梁缘&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;: None, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reviewer_name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forum_info&amp;#39;&lt;/span&gt;: {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tv/26883064&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;participant_count&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4536&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;douban://douban.com/tv/26883064/forum_topics&amp;#39;&lt;/span&gt;}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tv&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;26883064&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tv_category&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;chinese&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tv_url_parameter&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filter_tv_domestic_hot&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;total_num&amp;#39;&lt;/span&gt;: None, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parse_url&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://m.douban.com/rexxar/api/v2/subject_collection/filter_tv_domestic_hot/items?os=ios&amp;amp;for_mobile=1&amp;amp;start=0&amp;amp;count=50&amp;amp;_=0&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;total&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2123&lt;/span&gt;}
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用如下语句取特定列&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
	temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
	temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;]
	temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rating_count&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rating&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;]
	temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rating_value&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rating&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;]
	temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;]
	temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tv_category&amp;#34;&lt;/span&gt;]
	temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;actors&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;actors&amp;#34;&lt;/span&gt;]
	temp[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directors&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;directors&amp;#34;&lt;/span&gt;]
	data_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(temp)
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data_list)
df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./douban.csv&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 这样就将以上的列提取了出来并储存在了当前文件夹的csv文件里&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/09/24/5ba86add18cdd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;此外，我们还可以借助describe()函数帮助我们统计常用的数值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;describe())
&lt;span style=&#34;color:#75715e&#34;&gt;# 结果如下：&lt;/span&gt;
        rating_count  rating_value
count    &lt;span style=&#34;color:#ae81ff&#34;&gt;2379.000000&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2379.000000&lt;/span&gt;
mean     &lt;span style=&#34;color:#ae81ff&#34;&gt;9079.419084&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;7.722783&lt;/span&gt;
std     &lt;span style=&#34;color:#ae81ff&#34;&gt;16613.297194&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1.068567&lt;/span&gt;
min       &lt;span style=&#34;color:#ae81ff&#34;&gt;211.000000&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;2.800000&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;807.000000&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;7.100000&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;2573.000000&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;7.800000&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;9256.000000&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;8.500000&lt;/span&gt;
max    &lt;span style=&#34;color:#ae81ff&#34;&gt;170243.000000&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;9.800000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数组行排序&#34;&gt;数组行排序&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sort_values()&lt;/code&gt;函数可以帮我们对数组进行行排序：以上面的df数组为例，假如我们要找出评分最高的电视剧&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# by=&amp;#34;rating_value&amp;#34;参数表示我们根据评分值进行排序，ascending=False表示逆序&lt;/span&gt;
df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort_values(by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rating_value&amp;#34;&lt;/span&gt;, ascending&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;head(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# 结果是探险活宝第八季 9.8分&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;字符串方法&#34;&gt;字符串方法&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cat&lt;/td&gt;
&lt;td&gt;实现元素级字符串连接操作，可指定分隔符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;contains&lt;/td&gt;
&lt;td&gt;返回表示各字符串是否含有指定模式的布尔型数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;模式的出现次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;endswith、startswith&lt;/td&gt;
&lt;td&gt;相当于对各个元素执行x.endswith(pattern)或x.startswith(pattern)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findall&lt;/td&gt;
&lt;td&gt;计算各字符串的模式列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;获取各元素的第i个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;join&lt;/td&gt;
&lt;td&gt;根据指定的分隔符将Series中各元素的字符串连接起来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;计算各字符串的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lower、upper&lt;/td&gt;
&lt;td&gt;转换大小写。相当于对各个元素执行x.lower()或x.upper()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;match&lt;/td&gt;
&lt;td&gt;根据指定的正则表达式对各个元素执行re.match&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pad&lt;/td&gt;
&lt;td&gt;在字符串的左边、右边或左右两边添加空白符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;center&lt;/td&gt;
&lt;td&gt;相当于pad(side=&#39;both&amp;rsquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repeat&lt;/td&gt;
&lt;td&gt;重复值。例如，s.str.repeat(3)相当于对各个字符串执行x*3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;replace&lt;/td&gt;
&lt;td&gt;用指定字符串替换找到的模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slice&lt;/td&gt;
&lt;td&gt;对Series中的各个字符串进行子串截取&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;split&lt;/td&gt;
&lt;td&gt;根据分隔符或正则表达式对字符串进行拆分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strip、rstrip、lstrip&lt;/td&gt;
&lt;td&gt;去除空白符，包含换行符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;数据合并&#34;&gt;数据合并&lt;/h3&gt;
&lt;h4 id=&#34;使用join函数进行合并按行索引值相同进行合并&#34;&gt;使用join()函数进行合并（按行索引值相同进行合并）&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: df1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEF&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: G&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;))&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: df2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABC&amp;#34;&lt;/span&gt;), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HI&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;))&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: df1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(df2)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: 
     D    E    F    G    H    I
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 这里我们看一下两个行数不同的数组进行合并会发生什么&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: df3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCD&amp;#34;&lt;/span&gt;), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: HI&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用df1作为主数组则df3的第四行会被忽略&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: df1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(df3)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: 
     D    E    F    G    H    I
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用df3作为主数组则df1会自动创建第四行且自动全部赋值为NaN&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: df3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(df1)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: 
     H    I    D    E    F    G
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
C  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
D  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  NaN  NaN  NaN  NaN

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用merge函数进行合并在指定列按元素值相同进行合并&#34;&gt;使用merge()函数进行合并（在指定列按元素值相同进行合并）&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: df1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AB&amp;#34;&lt;/span&gt;), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CDE&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: ))

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: df2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)), index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FG&amp;#34;&lt;/span&gt;), columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DI&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;: ))

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: df1
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: 
     C    D    E
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: df2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: 
     D    I
F  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: df1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(df2)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: 
Empty DataFrame
Columns: [C, D, E, I]
Index: []

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: df1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loc[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: df1
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: 
     C    D    E
A  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
B  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: df2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: 
     D    I
F  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: df1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(df2, on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: 
     C    D    E    I
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: df2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(df1, on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: 
     D    I    C    E
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Python数据处理.Numpy中的广播原则(机制)</title>
      <link>https://happy.dereen.top/post/dataprocess03/</link>
      <pubDate>Sun, 11 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess03/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;为了了解这个原则，首先我们来看一组例子：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 数组直接对一个数进行加减乘除，产生的结果是数组中的每个元素都会加减乘除这个数。&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 接下来我们看一下数组与数组之间的计算&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;c
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: d
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 从上面可以看出，和线性代数中不同的是，m*n列的m行的一维数组或者n列的一维数组也是可以计算的。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是为什么呢？这里要提到numpy的广播原则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果两个数组的&lt;strong&gt;后缘维度(从末尾开始算起的维度)&lt;strong&gt;的&lt;/strong&gt;轴长度相符&lt;/strong&gt;或&lt;strong&gt;其中一方的长度为1&lt;/strong&gt;，则认为它们是广播兼容的。广播会在&lt;strong&gt;缺失维度&lt;/strong&gt;和(或)&lt;strong&gt;轴长度为1的维度&lt;/strong&gt;上进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上面的代码中，a的维度是（4，3），c的维度是（1，3）；d的维度是（4，1）。所以假设有两个数组，第一个的维度是（x_1, y_1, z_1），另一个数组的维度是（x_2, y_2, z_2），要判断这两个数组能不能进行计算，可以用如下方法来判断：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; z_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; z_2 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; z_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; z_2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; y_2 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; y_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; y_2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x_2 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; x_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; x_2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;可以运算&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不可以运算&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不可以运算&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不可以运算&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里需要注意：（3，3，2）和（3，2）是可以运算的，因为对于二维数组（3，2）也可以表示为（1，3，2），套用上述的规则是完全适用的，同理：（4，2，5，4）和（2，1，4）也是可以进行运算的。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Python数据处理.Numpy</title>
      <link>https://happy.dereen.top/post/dataprocess02/</link>
      <pubDate>Fri, 09 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess02/</guid>
      
        <description>&lt;p&gt;numpy是一个在Python中做科学计算的基础库，重在数值计算，也是大部分PYTHON科学计算库的基础库，多用于在大型、多维数组上执行数值运算。&lt;/p&gt;
&lt;h2 id=&#34;数组的定义&#34;&gt;数组的定义&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#75715e&#34;&gt;# numpy数组的定义方法&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# 这样产生的a,b,c三个结果是一样的，均为[1, 3, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这里看一下数组的类型和数组元素的类型的定义和修改，type（a）表示的是数组a的类型，a.dtype则表示的是数组a中元素的类型。&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a, type(a), a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)
		  [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;numpy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndarray&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; int32&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;float64&amp;#34;&lt;/span&gt;)
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a, type(a), a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)
		  [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;numpy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndarray&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; float64&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int64&amp;#34;&lt;/span&gt;)
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a, type(a), a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dtype)
		  [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;numpy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ndarray&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt; int64&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;#要保留固定位数的小数需要用到np.round()&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%.2f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.56&amp;#39;&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: round(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random(), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.73&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)]), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: array([&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;0.95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.6&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;0.03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;0.23&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;round(a, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: array([&lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;0.6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数组的形状&#34;&gt;数组的形状&lt;/h2&gt;
&lt;p&gt;以下的代码是在Jupyter Notebook中完成的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 数组的形状&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]],[[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: array([[[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
				[ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]],
				[[ &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;],
				[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 上面元组中的元素个数即是这个数组的维数，例如这个就是个三维数组，他一共有 2 块，每块有 2 行， 3 列，即（2， 2， 3）&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: array([ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: array([[[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
		  		[ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]],
				[[ &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;],
				[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 从这里看以看出a.reshape并不能改变a的形状和维度，如果需要改变a的维度和形状，需要重新对a进行赋值，如下↓：&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;],
               [ &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 计算一个二维数组的元素个数，可以使用如下的方法，shape[0]是这个二维数组的行数，shape[1]即是这个数组的列数。&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 所以将一个二维数组变为一维数组便有了如下的方法：&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: array([ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# 当然一个现成简单的方法是使用flatten这个函数&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatten()
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: array([ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数组的计算&#34;&gt;数组的计算&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 数组直接对一个数进行加减乘除，产生的结果是数组中的每个元素都会加减乘除这个数。&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    D:\Anaconda3\lib\site&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;packages\ipykernel\__main__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;RuntimeWarning&lt;/span&gt;: divide by zero           encountered &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; true_divide
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: array([[inf, inf, inf],
                [inf, inf, inf],
                [inf, inf, inf],
                [inf, inf, inf]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 接下来我们看一下数组与数组之间的计算&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;c
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: d
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 从上面可以看出，和线性代数中不同的是，m*n列的m行的一维数组或者n列的一维数组也是可以计算的。&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 要求数组中所有元素的和或者每行或者每列的和应该怎么做？我们可以使用np.sum()函数&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; d
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: c
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(c)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(c, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]: array([&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum(c, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: array([&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;])

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是为什么呢？这里要提到numpy的广播原则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果两个数组的&lt;strong&gt;后缘维度(从末尾开始算起的维度)&lt;strong&gt;的&lt;/strong&gt;轴长度相符&lt;/strong&gt;或&lt;strong&gt;其中一方的长度为1&lt;/strong&gt;，则认为它们是广播兼容的。广播会在&lt;strong&gt;缺失维度&lt;/strong&gt;和(或)&lt;strong&gt;轴长度为1的维度&lt;/strong&gt;上进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上面的代码中，a的维度是（4，3），c的维度是（1，3）；d的维度是（4，1）。所以假设有两个数组，第一个的维度是（x_1, y_1, z_1），另一个数组的维度是（x_2, y_2, z_2），要判断这两个数组能不能进行计算，可以用如下方法来判断：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; z_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; z_2 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; z_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; z_2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; y_2 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; y_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; y_2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; x_2 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; x_1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; x_2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;可以运算&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不可以运算&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不可以运算&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不可以运算&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里需要注意：（3，3，2）和（3，2）是可以运算的，因为对于二维数组（3，2）也可以表示为（1，3，2），套用上述的规则是完全适用的，同理：（4，2，5，4）和（2，1，4）也是可以进行运算的。&lt;/p&gt;
&lt;h2 id=&#34;轴axis&#34;&gt;轴(axis)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在numpy中可以理解为方向,使用0,1,2&amp;hellip;数字表示,对于一个一维数组,只有一个0轴,对于2维数组(shape(2,2)),有0轴和1轴,对于三维数组(shape(2,2, 3)),有0,1,2轴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二维数组的轴如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/09/16/5b9de3a389b37.png&#34; alt=&#34;2维数组的轴&#34;&gt;&lt;/p&gt;
&lt;p&gt;三维数组的轴：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/09/16/5b9de3a45aa65.png&#34; alt=&#34;3维数组的轴&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;numpy读数据&#34;&gt;numpy读数据&lt;/h2&gt;
&lt;p&gt;使用如下语句来读取CSV文件：&lt;code&gt;np.loadtxt(fname,dtype=np.float,delimiter=None,skiprows=0,usecols=None,unpack=False)&lt;/code&gt;
&lt;img src=&#34;https://i.loli.net/2018/09/16/5b9de536a3d64.png&#34; alt=&#34;参数含义&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组转置：&lt;/strong&gt;（两种方法）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.transpose()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.swapaxes(1， 0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;取数组中的值&#34;&gt;取数组中的值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

us_file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./youtube_video_data/US_video_data_numbers.csv&amp;#34;&lt;/span&gt;
uk_file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.\youtube_video_data\GB_video_data_numbers.csv&amp;#34;&lt;/span&gt;

t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loadtxt(us_file_path, delimiter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int64&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(t1)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 取行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[2])&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[2,])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取连续的多行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[2:])&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[2: ,])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取不连续的多行&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[[2, 9, 3]])&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[[2, 9, 3],])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取列&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[:,2])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取连续的多列&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[:,2:])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取不连续的多列&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[:, [0, 2]])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取元素&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[1, 3])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取连续多行和多列&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[1:4, 1:4])&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 取多个不相邻的点（0，1）， （2， 2）， （2， 3）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print(t1[[0, 1, 2], [2, 2, 3]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;numpy中数值修改&#34;&gt;numpy中数值修改&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 取值然后赋值即可&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: t2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]:
array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: t2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]:
array([[ True,  True,  True,  True,  True,  True],
       [ True,  True,  True,  True, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False]])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: t2[t2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: t2
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]:
array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(t2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]:
array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;clip操作&#34;&gt;clip操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clip(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 这句话的意思是将数组t中小于10的数变为10，大于12的数变为12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;拼接操作和换行换列操作&#34;&gt;拼接操作和换行换列操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]:
array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]])

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]:
array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 竖直拼接&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vstack((a,b))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]:
array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;],
       [&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 水平拼接&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hstack((a,b))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]:
array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]])

&lt;span style=&#34;color:#75715e&#34;&gt;# 两行互换&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]: a[[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],:]

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]:
array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
       [ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]])	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;将一维行向量转置为一维列向量的办法&lt;/strong&gt;：&lt;code&gt;.reshape(-1， 1）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构造全为0或1的包含n个元素的一维向量的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 列向量&lt;/span&gt;
np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((n, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((n, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;# 行向量&lt;/span&gt;
np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n))
np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;numpy生成全0矩阵全1矩阵单位矩阵的方法以及求每行列最大最小值的方法&#34;&gt;numpy生成全0矩阵、全1矩阵、单位矩阵的方法以及求每行/列最大最小值的方法。&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones((&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eye(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax(a, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: array([&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int64)
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmin(a, axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: array([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int64)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;numpy生成随机数的方法&#34;&gt;numpy生成随机数的方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;np.random.&lt;/code&gt;后加下列参数（&lt;code&gt;.seed()&lt;/code&gt;的使用方法是先进行&lt;code&gt;np.random.seed(s)&lt;/code&gt;再进行上述操作）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;参数&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.rand(d0, d1, &amp;hellip;, dn)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建d0-dn维度的均匀分布的随机数数组，浮点数，范围0-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.randn(d0, d1, &amp;hellip;, dn)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建d0-dn维度的标准正态分布随机数，浮点数，平均数0，标准差1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.randint(low, high, (shape))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从给定上下限范围内随机取整数，形状是shape&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.uniform(low, high, (size))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;产生具有均匀分布的数组(浮点数)，low起始值，high结束值，size形状&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.normal(loc, scale, (size))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从指定正态分布中随机抽取样本，分布中心是loc（概率分布的均值），标准差是scale，形状是size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;.seed(s)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;随机数种子，s是给定的种子值。因为计算机生成的是伪随机数，所以通过设定相同的随机数种子，可以每次生成相同的随机数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;numpy数组的复制&#34;&gt;numpy数组的复制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;a = b[:]&lt;/code&gt;：视图的操作，会创建新的对象a，但是a的数据完全由b保管，改变b同时会引起a的改变；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;a = b.copy()&lt;/code&gt;：复制，a和b互不影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
			   [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;],
			   [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
			   [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: b
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: array([[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],
			   [ &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;],
			   [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nan和inf&#34;&gt;nan和inf&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;nan(NAN,Nan):not a number表示不是一个数字，inf表示无穷大，-inf表示负无穷大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么时候numpy中会出现nan：当我们读取本地的值的类型为float的文件，有缺失的时候；或者当做了一个不合适的计算(比如无穷大(inf)减去无穷大)的时候，这个地方的值就会变成nan。&lt;/p&gt;
&lt;p&gt;指定nan或者inf的方法：&lt;code&gt;a[:] = np.nan&lt;/code&gt;;&lt;code&gt;a[:] = np.inf&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;关于nan需要注意的地方&#34;&gt;关于nan需要注意的地方：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;两个nan是不相等的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用（1）中的特性可以统计出一个数组中包含nan的个数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#75715e&#34;&gt;# 创建一个不含0的5阶非0方阵&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
               [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;],
               [ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;],
               [ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# np.count_nonzero()这个函数用来统计数组中的非0值得个数&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count_nonzero(a)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 将数组的第3行全部变为0&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,:] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;],
[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],
[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
[ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;],
[ &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]])
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count_nonzero(a)
&lt;span style=&#34;color:#75715e&#34;&gt;# count_nonzero()的结果从25变为20&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 因为nan的数值类型是float，而我们生成的数组类型为int，所以先把数组的类型转化为float&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]: a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(float)
&lt;span style=&#34;color:#75715e&#34;&gt;# 将下面3个元素的值变为nan&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]: a[[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;12.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16.&lt;/span&gt;],
                [nan, &lt;span style=&#34;color:#ae81ff&#34;&gt;9.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8.&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, nan, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;5.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.&lt;/span&gt;, nan],
                [ &lt;span style=&#34;color:#ae81ff&#34;&gt;6.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13.&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.&lt;/span&gt;]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 因为np.nan！=np.nan，所以在值为nan的位置会出现True，其他位置则会出现false&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: a&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;a
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: array([[False, False, False, False, False],
                [ True, False, False, False, False],
                [False, False, False, True, False],
                [False, False, False, False, True],
                [False, False, False, False, False]])
&lt;span style=&#34;color:#75715e&#34;&gt;# 与a!=a等价的还有一种方法即np.isnan(a)他的结果也是上述这个数组&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count_nonzero(a&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;a)
&lt;span style=&#34;color:#75715e&#34;&gt;# 于是np.count_nonzero(a!=a)又可以写为np.count_nonzero(np.isnan(a))&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
In [&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: (a&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;a)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(int)
&lt;span style=&#34;color:#75715e&#34;&gt;# True的值即为1，False的值为0，所以non_zero()函数可以统计一个数组中包含nan的个数&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]: array([[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
                [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;那么我们为什么要统计数组中nan的个数？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;numpy中常用统计函数&#34;&gt;numpy中常用统计函数&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;求和&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;t.sum(axis=None)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;均值&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;t.mean(a,axis=None)  受离群点的影响较大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;中值&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;np.median(t,axis=None)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最大值&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;t.max(axis=None)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;最小值&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;t.min(axis=None)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;极值&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;np.ptp(t,axis=None) 即最大值和最小值之差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;标准差&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;t.std(axis=None)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;那么如何将数组中值为nan 的元素换为该列/行的均值？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fill_ndarray&lt;/span&gt;(t):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]):
        temp_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t[:, i]          &lt;span style=&#34;color:#75715e&#34;&gt;# 当前列&lt;/span&gt;
        nan_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count_nonzero(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnan(temp_col))          &lt;span style=&#34;color:#75715e&#34;&gt;# 计算当前列中nan的个数&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; nan_num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# 计算均值&lt;/span&gt;
            temp_non_nan_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp_col[temp_col &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; temp_col]
            temp_col_mean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp_non_nan_col&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean()
            &lt;span style=&#34;color:#75715e&#34;&gt;# 替换当前列中nan为均值&lt;/span&gt;
            temp_col[np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isnan(temp_col)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp_col_mean
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t


a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(float)

a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(a)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(fill_ndarray(a))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Python数据处理.Matplotlib</title>
      <link>https://happy.dereen.top/post/dataprocess01/</link>
      <pubDate>Tue, 06 Nov 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/dataprocess01/</guid>
      
        <description>&lt;p&gt;Matplotlib是最流行的Python底层绘图库，主要做数据可视化图表,名字取材于MATLAB。&lt;/p&gt;
&lt;h2 id=&#34;折线图&#34;&gt;折线图&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#导入需要用到的模块&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

&lt;span style=&#34;color:#75715e&#34;&gt;#输入x轴和y轴的值（二者必须个数相等一一对应）&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)
y_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)]
y_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)]

&lt;span style=&#34;color:#75715e&#34;&gt;#配置图片大小及清晰度，以及解决中文字体无法显示的问题&lt;/span&gt;
fig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;),dpi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Windows\Fonts\msyh.ttc&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;#自定义显示x轴刻度文字&lt;/span&gt;
_xtick_labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10点{}分&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(str(i)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rjust(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)]
_xtick_labels &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;11点{}分&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(str(i)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rjust(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)]

&lt;span style=&#34;color:#75715e&#34;&gt;#调整x轴刻度间距并指定字体样式&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(x[::&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], _xtick_labels[::&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], rotation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yticks(range(min(min(y_1),min(y_2)), max(max(y_1)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,max(y_2)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)), fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)

&lt;span style=&#34;color:#75715e&#34;&gt;#添加描述信息&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;时间&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;温度 单位（℃）&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10：00-11：00每分钟温度变化图&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#添加网格（alpha控制透明度，linestyle控制线型）&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#画多条折线就多次调用plot函数（label为图例中的文字描述）&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x,y_1, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;吕州&amp;#34;&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cyan&amp;#34;&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(x,y_2, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;京州&amp;#34;&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#仅仅在图例中的字体需要用prop来指定，其余都用fontproperties来指定&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(prop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
&lt;span style=&#34;color:#75715e&#34;&gt;#展示图形&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：
&lt;img src=&#34;https://i.loli.net/2018/09/14/5b9b45a1a9863.png&#34; alt=&#34;matplotlib折线图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;散点图&#34;&gt;散点图&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入需要用到的模块&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

&lt;span style=&#34;color:#75715e&#34;&gt;# 输入x轴和y轴的值（二者必须个数相等一一对应，这里为了避免拥挤将两个月份的温度值分列在x轴的左右两侧）&lt;/span&gt;
y_3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,
       &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]
y_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]
x_3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
x_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 配置图片大小及清晰度，以及解决中文字体无法显示的问题&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\windows\Fonts\msyh.ttc&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 调整x轴的刻度文字&lt;/span&gt;
_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(x_3) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; list(x_10)
_xtick_labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3月{}日&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; x_3]
_xtick_labels &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10月{}日&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(j) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; x_3]

&lt;span style=&#34;color:#75715e&#34;&gt;# 调整x轴刻度间距并指定字体样式&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(_x[::&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], _xtick_labels[::&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yticks(range(min(min(y_3), min(y_10))&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, max(max(y_3), max(y_10))&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)

&lt;span style=&#34;color:#75715e&#34;&gt;# 添加描述信息&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;日期&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;温度 单位（℃）&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;北京市3月和10月份气温变化对比图&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 添加网格（alpha控制透明度，linestyle控制线型）&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 仅仅在图例中的字体需要用prop来指定，其余都用fontproperties来指定&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;legend(prop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)

&lt;span style=&#34;color:#75715e&#34;&gt;# 绘图&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x_3, y_3, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3月&amp;#34;&lt;/span&gt;,)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x_10, y_10, label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10月&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 展示图形&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/09/14/5b9b47f5b419d.png&#34; alt=&#34;matplotlib散点图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;条形图&#34;&gt;条形图&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入需要用到的模块&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

&lt;span style=&#34;color:#75715e&#34;&gt;# 为名字过长的影片名中添加换行符&lt;/span&gt;
names_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;战狼2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;速度与激情8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;功夫瑜伽&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;西游伏妖篇&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;变形金刚5：最后的骑士&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;摔跤吧！爸爸&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;加勒比海盗5：死无对证&amp;#34;&lt;/span&gt;,
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;金刚：骷髅岛&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;极限特工：终极回归&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;生化危机6：终章&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;乘风破浪&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;神偷奶爸3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;智取威虎山&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;大闹天竺&amp;#34;&lt;/span&gt;,
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;金刚狼3：殊死一战&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;蜘蛛侠：英雄归来&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;悟空传&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;银河护卫队2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;情圣&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新木乃伊&amp;#34;&lt;/span&gt;, ]
names_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; names_1:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(list(name)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:
        ls_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(name)
        ls_1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(ls_1)
    names_2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(name)

&lt;span style=&#34;color:#75715e&#34;&gt;# 输入x轴和y轴的值（二者必须个数相等一一对应）&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(len(names_1))
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;56.01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26.94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17.53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16.49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15.45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12.96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.12&lt;/span&gt;,
     &lt;span style=&#34;color:#ae81ff&#34;&gt;10.49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8.75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7.55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7.32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.23&lt;/span&gt;]

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\windows\Fonts\msyh.ttc&amp;#34;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(x, names_2, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, rotation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bar(x, y, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 在条形图上显示数值&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xx, yy &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(x,y):
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text(xx, yy&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, str(yy), ha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 添加描述信息&lt;/span&gt;
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;影片名称&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;票房数&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;热门电影3日票房&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：
&lt;img src=&#34;https://i.loli.net/2018/09/15/5b9c93817d581.png&#34; alt=&#34;条形图竖&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到竖的条形图在面对文字比较多的时候会出现显示困难的问题，所以这时我们需要用到横向的条形图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入需要用到的模块&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

names_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;战狼2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;速度与激情8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;功夫瑜伽&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;西游伏妖篇&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;变形金刚5：最后的骑士&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;摔跤吧！爸爸&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;加勒比海盗5：死无对证&amp;#34;&lt;/span&gt;,
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;金刚：骷髅岛&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;极限特工：终极回归&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;生化危机6：终章&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;乘风破浪&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;神偷奶爸3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;智取威虎山&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;大闹天竺&amp;#34;&lt;/span&gt;,
     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;金刚狼3：殊死一战&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;蜘蛛侠：英雄归来&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;悟空传&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;银河护卫队2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;情圣&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;新木乃伊&amp;#34;&lt;/span&gt;, ]

&lt;span style=&#34;color:#75715e&#34;&gt;# 输入x轴和y轴的值（二者必须个数相等一一对应）&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(len(names_1))
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;56.01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26.94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17.53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16.49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15.45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12.96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11.12&lt;/span&gt;,
     &lt;span style=&#34;color:#ae81ff&#34;&gt;10.49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10.3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8.75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7.55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7.32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6.23&lt;/span&gt;]

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\windows\Fonts\msyh.ttc&amp;#34;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)[::&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;])
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yticks(x, names_1, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;barh(x, y, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#8EE5EE&amp;#34;&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;票房数&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;影片名称&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;热门电影3日票房&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图：
&lt;img src=&#34;https://i.loli.net/2018/09/15/5b9c938128852.png&#34; alt=&#34;条形图横&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;直方图&#34;&gt;直方图&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; font_manager

a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;135&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;156&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;135&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;154&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;]

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;), dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; font_manager&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FontProperties(fname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c:\windows\Fonts\msyh.ttc&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# 计算组数&lt;/span&gt;
bin_width &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
num_bin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (max(a) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; min(a)) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; bin_width

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xticks(range(min(a), max(a) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bin_width)[::&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yticks(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(a)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)[::&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xlabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;分钟数&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ylabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;影片数量&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;120部电影时长分布&amp;#34;&lt;/span&gt;, fontproperties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;font, size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;grid(alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hist(a, num_bin)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如图;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/09/15/5b9c946d547de.png&#34; alt=&#34;直方图&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是以上代码中常用的参数值与代号对应的列表：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;线型名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;线型代号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;实线&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;虚线，破折线&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;点划线&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;点虚线，虚线&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;颜色代码见：&lt;a href=&#34;https://www.114la.com/other/rgb.htm&#34;&gt;RGB颜色对照表&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>PythonNotes.爬虫</title>
      <link>https://happy.dereen.top/post/pythonnotes05/</link>
      <pubDate>Sat, 06 Oct 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes05/</guid>
      
        <description>&lt;p&gt;要使用Python 抓取网页，首先我们要学习下面四个模块：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;包&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;webbrowser&lt;/td&gt;
&lt;td&gt;打开浏览器获取指定页面；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests&lt;/td&gt;
&lt;td&gt;从因特网下载文件和网页；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Beautiful Soup&lt;/td&gt;
&lt;td&gt;解析HTML，即网页编码的格式；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selenium&lt;/td&gt;
&lt;td&gt;启动并控制一个Web 浏览器，能够填写表单，并模拟鼠标点击。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;小项目利用webbrowser-模块的bilibilisearchpy&#34;&gt;小项目：利用webbrowser 模块的bilibiliSearch.py&lt;/h2&gt;
&lt;p&gt;webbrowser 模块的&lt;code&gt;open()&lt;/code&gt;函数可以启动一个新浏览器，打开指定的URL。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webbrowser
webbrowser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://bilibili.com&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如运行上面的这段代码，系统就会启动一个新的标签页，打开B站了。但是，这也是webbrowser 模块唯一能做的事了。&lt;/p&gt;
&lt;p&gt;假如我们要实现一个功能：使用Bilibili 搜索指定或剪贴板中的文字。那我们的程序需要做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从命令行参数或剪贴板中取得要搜索的内容；&lt;/li&gt;
&lt;li&gt;打开Web 浏览器，指向搜索结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;弄清指定地点的bilibili-search-url-地址&#34;&gt;弄清指定地点的Bilibili Search Url 地址&lt;/h3&gt;
&lt;p&gt;我们首先在B站手动搜索“孙笑川 鬼畜”，可以发现地址栏的Url 网址为：“&lt;a href=&#34;https://search.bilibili.com/all?keyword=%E5%AD%99%E7%AC%91%E5%B7%9D%20%E9%AC%BC%E7%95%9C&#34;&gt;https://search.bilibili.com/all?keyword=孙笑川%20鬼畜&lt;/a&gt;”，于是我们可以发现，只要将要搜索的内容放在keyword= 后即可，多个关键字用空格分开，在网址中为&lt;code&gt;20%&lt;/code&gt;表示。&lt;/p&gt;
&lt;h3 id=&#34;处理命令行参数&#34;&gt;处理命令行参数&lt;/h3&gt;
&lt;p&gt;为了从命令行参数中导入要搜索的内容，我们需要导入sys 包，并使用&lt;code&gt;sys.argv&lt;/code&gt;来取得其内容。&lt;/p&gt;
&lt;h3 id=&#34;处理剪贴板内容&#34;&gt;处理剪贴板内容&lt;/h3&gt;
&lt;p&gt;使用pyperclip 包中的&lt;code&gt;pyperclip.paste()&lt;/code&gt;函数来取得剪贴板中的内容。&lt;/p&gt;
&lt;p&gt;于是，整个程序的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webbrowser&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; pyperclip

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# Get address from command line.&lt;/span&gt;
    address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:])
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# Get address from clipboard.&lt;/span&gt;
    address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyperclip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;paste()

webbrowser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://search.bilibili.com/all?keyword=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;address)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;用requests-模块从web-下载文件&#34;&gt;用requests 模块从Web 下载文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;requests.get()&lt;/code&gt;函数接收一个要下载的Url 地址字符串，返回一个Response 对象，其中包含了Web 服务器对你的请求做出的响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.gutenberg.org/cache/epub/1112/pg1112.txt&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; type(res)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Response&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;codes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ok
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; len(res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
&lt;span style=&#34;color:#ae81ff&#34;&gt;179378&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;codes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ok
&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text[:&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;])    
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;﻿&lt;/span&gt;The Project Gutenberg EBook of Romeo &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; Juliet, by William Shakespeare


&lt;span style=&#34;color:#f92672&#34;&gt;*******************************************************************&lt;/span&gt;
THIS EBOOK WAS ONE OF PROJECT GUTENBERG&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S EARLY FILES PRODUCED AT A&lt;/span&gt;
TIME WHEN PROOFING METHODS AND TOOLS WERE NOT WELL DEVELOPED&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; THERE
IS AN IMPROVED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该对象包含若干属性，&lt;code&gt;status_code&lt;/code&gt;称为状态码，该属性值可以查看这次请求是否成功，&lt;code&gt;text&lt;/code&gt;属性中则包括了该网页中的文本信息。值得一提的是，访问成功的状态码为200，一般来说，其他均为失败。&lt;/p&gt;
&lt;p&gt;我们可以在访问失败时使用&lt;code&gt;raise_for_status()&lt;/code&gt;方法抛出异常，使程序停止。如果我们只希望抛出异常，不希望程序停止，则可以使用&lt;code&gt;try&lt;/code&gt;和&lt;code&gt;except&lt;/code&gt;包裹该语句。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.donotexists777.com&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;status_code
&lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raise_for_status()
Traceback (most recent call last):
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:\Anaconda3\envs\mlbook\lib\site-packages&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;equests\models.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;940&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raise_for_status
    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; HTTPError(http_error_msg, response&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self)
requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;HTTPError: &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt; Client Error: Not Found &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; url: http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;miwifi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;diagnosis&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将下载的文件保存至硬盘&#34;&gt;将下载的文件保存至硬盘&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.gutenberg.org/cache/epub/1112/pg1112.txt&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raise_for_status()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; playFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RomeoAndJuliet.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; chunk &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iter_content(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;):
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     playFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(chunk)
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;79380&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; playFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用标准的&lt;code&gt;open()&lt;/code&gt;和&lt;code&gt;write()&lt;/code&gt;方法即可保存Web 页面至本地文件中，在这里使用wb 参数视为了以二进制的方式打开文件，并且使我们能够写入该文本中的“Unicode编码”。&lt;/p&gt;
&lt;p&gt;为了减少内存的使用量，我们使用&lt;code&gt;iter_content()&lt;/code&gt;方法分批次将文本写入本地文档。&lt;/p&gt;
&lt;h2 id=&#34;使用beautifulsoup-模块解析html&#34;&gt;使用BeautifulSoup 模块解析HTML&lt;/h2&gt;
&lt;p&gt;不使用政策表达式解析Html 格式的原因在于，Html 的格式可以有许多不同的方式，并且仍然被认为是有效的Html ，但尝试用正则表达式来捕捉所有这些可能的变化，将非常繁琐，并且容易出错。BeautifulSoup 模块则不容易导致缺陷。&lt;/p&gt;
&lt;h3 id=&#34;从html-创建一个beautifsoup-对象&#34;&gt;从HTML 创建一个BeautifSoup 对象&lt;/h3&gt;
&lt;p&gt;bs4.BeautifulSoup() 函数调用时需要一个字符串，其中包含将要解析的HTML。bs4.BeautifulSoup() 函数返回一个BeautifulSoup 对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; bs4
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.baidu.com&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raise_for_status()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; baiduSoup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bs4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BeautifulSoup(res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; type(baiduSoup)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bs4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BeautifulSoup&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用select-方法寻找元素&#34;&gt;使用select() 方法寻找元素&lt;/h3&gt;
&lt;p&gt;针对要寻找的元素，调用&lt;code&gt;select()&lt;/code&gt;方法，传入一个字符串作为CSS“选择器”，这样就可以取得Web 页面元素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- This is the example.html example file. --&amp;gt;&lt;/span&gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;The Website Title&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;Download my &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt;Python&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;strong&lt;/span&gt;&amp;gt; book from &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;inventwithpython.com&amp;#34;&lt;/span&gt;&amp;gt;my website&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;.&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slogan&amp;#34;&lt;/span&gt;&amp;gt;Learn Python the easy way!&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;By &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&amp;gt;Al Sweigart&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来看上面的一个例子，将上面这段代码保存为“example.html”，并保存在当前文件夹下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bs4 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BeautifulSoup
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; exampleFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./example.html&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; exampleSoup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BeautifulSoup(exampleFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(), features&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; elems &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exampleSoup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#author&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; type(elems)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; len(elems)
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; type(elems[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bs4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tag&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; elems[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getText()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Al Sweigart&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; str(elems[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;span id=&amp;#34;author&amp;#34;&amp;gt;Al Sweigart&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; elems[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attrs
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;小项目&#34;&gt;小项目&lt;/h2&gt;
&lt;p&gt;爬个动漫排行- -&lt;/p&gt;
&lt;p&gt;为了某些需要登陆才能查看到的番我们需要先关闭所有浏览器，然后在cmd输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;C:\Program Files (x86)\Microsoft\Edge Beta\Application\msedge.exe&amp;quot; --remote-debugging-port=8888
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; selenium &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; webdriver
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;First, run:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files (x86)\Microsoft\Edge Beta\Application\msedge.exe&amp;#34; --remote-debugging-port=8888
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;in the cmd.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ChromeOptions()
options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debugger_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;8888&amp;#39;&lt;/span&gt;
options&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary_location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files (x86)\Microsoft\Edge Beta\Application\msedge.exe&amp;#34;&lt;/span&gt;
chrome_driver_binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:\APP\MicrosoftWebDriver.exe&amp;#34;&lt;/span&gt;
driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webdriver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Chrome(chrome_driver_binary, chrome_options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;options)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://bangumi.tv/anime/tag/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%E&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%90%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;9E&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%E&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7%AC%91?page=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(i)
    driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# Let the user actually see something!&lt;/span&gt;
    filepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(filepath, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
        f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(driver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_source&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(filepath &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;写入成功！&amp;#34;&lt;/span&gt;)
        f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的是用来把网页文件下载到本地的0 0&lt;/p&gt;
&lt;p&gt;下面的用来解析的- -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bs4 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BeautifulSoup
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re

dateRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d{4})\D+(\d{1,2})\D+(\d{1,2})&amp;#34;&lt;/span&gt;)	&lt;span style=&#34;color:#75715e&#34;&gt;# 规范化日期&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;topAnime.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;):
        filepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;
        soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BeautifulSoup(open(filepath, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;)
        nameList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h3&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nameList:
            link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://bangumi.tv&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contents[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;]
            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writelines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contents[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; link &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(name) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
                f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writelines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contents[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writelines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;None&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sibling &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_siblings:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sibling&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attrs[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tip&amp;#39;&lt;/span&gt;]:
                        &lt;span style=&#34;color:#75715e&#34;&gt;# f.writelines(&amp;#34;\tinfo: &amp;#34; + sibling.string.strip())&lt;/span&gt;
                        date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dateRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(sibling&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip())
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writelines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; date[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; date[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; date[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;:
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sibling&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attrs[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rateInfo&amp;#39;&lt;/span&gt;]:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writelines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sibling&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contents[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IndexError&lt;/span&gt;:
                            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writelines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&amp;#34;&lt;/span&gt;)
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AttributeError&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writelines(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#75715e&#34;&gt;# timeList = soup.find_all(attrs={&amp;#34;class&amp;#34;: &amp;#34;info tip&amp;#34;})&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# for time in timeList:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     f.writelines(time.string)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终的结果这里就不展示了- -&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>PythonNotes.调试</title>
      <link>https://happy.dereen.top/post/pythonnotes04/</link>
      <pubDate>Tue, 02 Oct 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes04/</guid>
      
        <description>&lt;p&gt;编码占了编程工作量的90%，调试占了另外90%，这是一个流传着的笑话。调试在编程中占有很大的分量，即使专业的程序员也一直在制造缺陷。&lt;/p&gt;
&lt;h2 id=&#34;抛出异常&#34;&gt;抛出异常&lt;/h2&gt;
&lt;p&gt;**抛出异常相当于是说：“停止运行这个函数中的代码，将程序执行转到except 语句”。**抛出异常使用raise 语句，在代码中，raise 语句包含以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;raise 关键字；&lt;/li&gt;
&lt;li&gt;对Exception 函数的调用；&lt;/li&gt;
&lt;li&gt;传递给Exception 函数的字符串，包含有用的出错信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**通常是调用该函数的代码知道如何处理异常，而不是该函数本身。所以常常会看到raise 语句在一个函数中，try 和except 语句在调用该函数的代码中。**例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;boxPrint&lt;/span&gt;(symbol, width, height):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(symbol) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol must be a single character string.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; width &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Width must be greater than 2.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(symbol &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; width)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(height &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(symbol &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (width &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; symbol)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(symbol &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; width)


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; sym, w, h &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ZZ&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        boxPrint(sym, w, h)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; err:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;An exception happened: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(err))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个代码的功能是调用一个名为&lt;code&gt;boxPint()&lt;/code&gt;的函数，该函数的功能是打印一个盒子，其使用的字符为symbol ，形状为width * height 。如果出现参数不合法，则抛出异常，运行上面的代码，其输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;****
*  *
*  *
****
00000000000000000000
0                  0
0                  0
0                  0
00000000000000000000
An exception happened: Width must be greater than 2.
An exception happened: symbol must be a single character string.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;取得反向跟踪的字符串&#34;&gt;取得反向跟踪的字符串&lt;/h2&gt;
&lt;p&gt;Python 遇到错误时产生的错误信息称为“反向跟踪”。反向跟踪包含了出错消息、导致该错误的代码行号和导致该错误的函数调用的序列。这个序列称为“调用栈”。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spam&lt;/span&gt;():
    bacon()


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bacon&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is an err message.&amp;#39;&lt;/span&gt;)


spam()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行上面的代码，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;f:\Learn\Automate-the-Boring-Stuff-with-Python-Solutions\p10_debug\temp_pracitce.py&amp;quot;, line 9, in &amp;lt;module&amp;gt;
    spam()
  File &amp;quot;f:\Learn\Automate-the-Boring-Stuff-with-Python-Solutions\p10_debug\temp_pracitce.py&amp;quot;, line 2, in spam
    bacon()
  File &amp;quot;f:\Learn\Automate-the-Boring-Stuff-with-Python-Solutions\p10_debug\temp_pracitce.py&amp;quot;, line 6, in bacon
    raise Exception(&#39;This is an err message.&#39;)
Exception: This is an err message.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过反向追踪，可以看到该错误发生在第6行，在bacon() 函数中。这次特定的bacon() 调用来自第二行，在spam() 函数中，它又是在第9行被调用的。&lt;/p&gt;
&lt;p&gt;如果我们想让程序在出现异常时继续运行，则可以将反向跟踪信息写入一个日志文件，并让程序继续运行。稍后，在准备调试程序时，再检查该日志文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; traceback

&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is an err message.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;:
    errFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;errInfo.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
    errFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(traceback&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format_exc())
    errFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The traceback info was written the errInfo.txt.&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查该日志文件内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;f:\Learn\Automate-the-Boring-Stuff-with-Python-Solutions\p10_debug\temp_pracitce.py&amp;quot;, line 4, in &amp;lt;module&amp;gt;
    raise Exception(&amp;quot;This is an err message.&amp;quot;)
Exception: This is an err message.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;断言&#34;&gt;断言&lt;/h2&gt;
&lt;p&gt;断言保证特定的条件正确，针对的是程序员的错误，而不是用户的错误。对于那些可以恢复的错误（诸如文件没有找到，或用户输入了无效的数据），请抛出异常，而不是用assert 语句检测它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; states &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The states must be open.&amp;#34;&lt;/span&gt;
states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;others&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; states &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The states must be open.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行上面的语句，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;f:\Learn\Automate-the-Boring-Stuff-with-Python-Solutions\p10_debug\temp_pracitce.py&amp;quot;, line 4, in &amp;lt;module&amp;gt;
    assert states == &amp;quot;open&amp;quot;, &amp;quot;The states must be open.&amp;quot;
AssertionError: The states must be open.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;在交通灯模拟中使用断言&#34;&gt;在交通灯模拟中使用断言&lt;/h3&gt;
&lt;p&gt;假定你在编写一个交通信号灯的模拟程序。代表路口信号灯的数据结构是一个字典，以“ns”和”ew“为键，分别表示南北向和东西向的信号灯。这些键的值可以是“yellow”，“green”或“red”其中之一。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fStreet_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ns&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ew&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;}
gStreet_5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ns&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ew&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的两个字典中存储了f 街第1路口和g 街第5路口的实时红绿灯数据，假如我们要编写一个函数，它接收一个路口参数，进行红绿灯的切换，该函数如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def switchLights(stoplight):
    for key in stoplight.keys():
        if stoplight[key] == &#39;green&#39;:
            stoplight[key] = &#39;yellow&#39;
        elif stoplight[key] == &#39;yellow&#39;:
            stoplight[key] = &#39;red&#39;
        elif stoplight[key] == &#39;red&#39;:
            stoplight[key] = &#39;green&#39;
            
            
switchLights(fStreet_1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行这段代码，不会出现任何报错，但是这段代码明显是有问题的，即有可能出现一个方向是绿灯，一个方向是黄灯。为了保证不会出现这种路口失控的情况，我们可以添加一个断言，确保始终有一个路口的信号灯是红灯。我们可以添加下面这个断言：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;assert &#39;red&#39; in stoplight.values(), &amp;quot;Neither light is red! &amp;quot; + str(stoplight) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样再运行程序就会报错并崩溃：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;f:\Learn\Automate-the-Boring-Stuff-with-Python-Solutions\p10_debug\temp_pracitce.py&amp;quot;, line 15, in &amp;lt;module&amp;gt;
    switchLights(fStreet_1)
  File &amp;quot;f:\Learn\Automate-the-Boring-Stuff-with-Python-Solutions\p10_debug\temp_pracitce.py&amp;quot;, line 13, in switchLights
    assert &#39;red&#39; in stoplight.values(), &amp;quot;Neither light is red! &amp;quot; + str(stoplight)
AssertionError: Neither light is red! {&#39;ns&#39;: &#39;yellow&#39;, &#39;ew&#39;: &#39;green&#39;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;禁用断言&#34;&gt;禁用断言&lt;/h3&gt;
&lt;p&gt;在运行Python时传入-O 参数，可以禁用断言。&lt;/p&gt;
&lt;h2 id=&#34;日志&#34;&gt;日志&lt;/h2&gt;
&lt;p&gt;记日志是一种很好的方式，可以理解程序中发生的事，以及事情发生的顺序。Python 的logging 模块使得我们可以很容易创建自定义的消息记录。这些日志消息将描述程序执行何时到达日志函数调用，并列出你指定的任何变量当时的值。另一方面，确实日志信息表明有一部分代码被跳过，从未执行。&lt;/p&gt;
&lt;h3 id=&#34;使用日志模块&#34;&gt;使用日志模块&lt;/h3&gt;
&lt;p&gt;要启用logging 模块，只需将下面代码复制到程序顶部。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basicConfig(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DEBUG, format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(asctime)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(levelname)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(message)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来看一个程序，这个程序用来计算数字的阶乘：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basicConfig(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DEBUG, format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(asctime)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(levelname)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(message)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Start of program&amp;#39;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(n):
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Start of factorial(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (n))
    total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        total &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; i
        logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i is &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, total is &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(total))
    logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;End of factorial(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (n))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total


&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;End of program&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行这个程序，输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 2019-08-14 16:09:09,950 - DEBUG - Start of program
 2019-08-14 16:09:09,950 - DEBUG - Start of factorial(5)
 2019-08-14 16:09:09,950 - DEBUG - i is 1, total is 1
 2019-08-14 16:09:09,950 - DEBUG - i is 2, total is 2
 2019-08-14 16:09:09,951 - DEBUG - i is 3, total is 6
 2019-08-14 16:09:09,951 - DEBUG - i is 4, total is 24
 2019-08-14 16:09:09,951 - DEBUG - i is 5, total is 120
 2019-08-14 16:09:09,951 - DEBUG - End of factorial(5)
120
 2019-08-14 16:09:09,952 - DEBUG - End of program
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，&lt;code&gt;logging.debug()&lt;/code&gt;在打印消息时，会自动加上时间戳和日志级别。&lt;/p&gt;
&lt;h3 id=&#34;为什么不使用print-调试&#34;&gt;为什么不使用print() 调试&lt;/h3&gt;
&lt;p&gt;输入&lt;code&gt;import logging&lt;/code&gt;和&lt;code&gt; logging.basicConfig(level=logging.DEBUG, format=&#39; %(asctime)s - %(levelname)s - %(message)s&#39;)&lt;/code&gt;可能有一点不方便。但是这样带来的好处是，只需在顶部加上一句&lt;code&gt;logging.disable(logging.CRITICAL)&lt;/code&gt;就可以禁用所有日志输出。而使用&lt;code&gt;print()&lt;/code&gt; 调试完在删除时，存在工作量大且可能误删正常&lt;code&gt;print()&lt;/code&gt;语句的烦恼。&lt;/p&gt;
&lt;h3 id=&#34;日志级别&#34;&gt;日志级别&lt;/h3&gt;
&lt;p&gt;“日志级别”提供了一种方式，按重要性对日志消息进行分类。5个日志级别如下表所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;级别&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;日志函数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DEBUG&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;logging.debug()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;最低级别。用于小细节。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;INFO&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;logging.info()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;用于记录程序一般事件，确认一切工作正常。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;WARNING&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;logging.warning()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;用于表示可能的问题，不会阻止程序工作，但将来可能会。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ERROR&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;logging.error()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;用于记录错误，将导致程序做某事失败。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CRITICAL&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;logging.critical()&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;最高级别，将导致程序崩溃完全停止工作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当然，日志级别是一种建议，具体使用哪个日志函数，完全由程序员来决定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;logging.basicConfig(level=logging.DEBUG)&lt;/code&gt;中的&lt;code&gt;level=logging.DEBUG&lt;/code&gt;可以控制日志的最低显示级别，如果在后期你只关注较高级别的消息，就可以设置&lt;code&gt;level=logging.ERROR&lt;/code&gt;这样就只会显示ERROR 和CRITICAL 级别的消息了。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; logging
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basicConfig(level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ERROR, format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(asctime)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(levelname)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%(message)s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a debug message.&amp;#34;&lt;/span&gt;)
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I successfully be used.&amp;#34;&lt;/span&gt;)
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;warning(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I should be int.&amp;#34;&lt;/span&gt;)
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I must greater than 13.&amp;#34;&lt;/span&gt;)
logging&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;critical(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;program crashed.&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行上面代码，输出如下，可以看到ERROR 以下级别的日志消息都没有被输出了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2019-08-15 11:25:29,254 - ERROR - I must greater than 13.
2019-08-15 11:25:29,254 - CRITICAL - program crashed.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;禁用日志&#34;&gt;禁用日志&lt;/h3&gt;
&lt;p&gt;在调试完成后，如果我们不再需要任何的日志消息，可以在头部添加&lt;code&gt;logging.disable(logging.CRITICAL)&lt;/code&gt;这将禁止CRITICAL 及其以下级别的所有日志消息输出，即全部日志消息。通过给&lt;code&gt;logging.disable()&lt;/code&gt;传入一个级别参数，将禁止该级别和更低级别的所有日志消息输出。&lt;/p&gt;
&lt;h3 id=&#34;将日志记录到文件&#34;&gt;将日志记录到文件&lt;/h3&gt;
&lt;p&gt;除了将日志消息显示在屏幕上，还可以将他们写入文本文件。&lt;code&gt;logging.basicConfig()&lt;/code&gt;函数接收filename 关键字作为参数，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import logging
logging.basicConfig(filename=&#39;projectLog.txt&#39;, level=logging.ERROR, format=&#39; %(asctime)s - %(levelname)s - %(message)s&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;idle的调试器&#34;&gt;IDLE的调试器&lt;/h2&gt;
&lt;p&gt;太简单了，此处不介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Python学习笔记]系列是我在学习《Python编程快速上手——让繁琐工作自动化(Automate The Boring Stuff With Python)》这本书时的学习笔记。通过自己再手敲一遍概念和代码，方便自己记忆和日后查阅。如果对你有帮助，那就更好了！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>PythonNotes.组织文件</title>
      <link>https://happy.dereen.top/post/pythonnotes03/</link>
      <pubDate>Fri, 28 Sep 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes03/</guid>
      
        <description>&lt;h2 id=&#34;shutil-模块&#34;&gt;&lt;code&gt;shutil&lt;/code&gt; 模块&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shutil&lt;/code&gt; 模块可以让我们很方便的在Python程序中复制、移动、改名和删除文件。&lt;/p&gt;
&lt;h3 id=&#34;复制文件和文件夹&#34;&gt;复制文件和文件夹&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;shutil.copy()&lt;/code&gt;来复制文件，该函数含两个参数，均为字符串格式的路径。当第二个参数为文件时，就将原文件复制过来并改名，当第二个参数为文件夹时，就将原文件复制至该文件夹下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shutil
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder/hello.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hello.txt&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder/hello.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder/hello_2.txt&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder/hello_2.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是，在将文件复制至一个文件夹下时，如果这个文件夹不存在，程序就会误以为你要将原文件命名为第二个参数的名称，导致出现歧义。如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder/hello.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;shutil.copytree()&lt;/code&gt;来复制文件夹及其包含的文件。用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copytree(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder_backup&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder_backup&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;文件和文件夹的移动与改名&#34;&gt;文件和文件夹的移动与改名&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;shutil.move()&lt;/code&gt;函数来移动文件或文件夹，用法与上一节的&lt;code&gt;shutil.copy()&lt;/code&gt;函数大同小异。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;move(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;oldFolder&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;move(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newFolder&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;oldFolder&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hello.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder_backup&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hello_2.txt&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder_backup&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hello_2.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;永久删除文件和文件夹&#34;&gt;永久删除文件和文件夹&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;os.unlink(path)&lt;/code&gt;来永久删除一个文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.rmdir(path)&lt;/code&gt;来永久删除一个&lt;strong&gt;空文件夹&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutil.rmtree(path)&lt;/code&gt;来永久删除一个文件夹及其中所有内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了确保不会因为输入有误错误删除重要文件，我们可以先运行下面的程序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; filename&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.txt&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;# os.unlink(filename)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(filename)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再确认无误之后，再删除&lt;code&gt;print&lt;/code&gt;行，并去除删除文件行代码的注释。&lt;/p&gt;
&lt;h3 id=&#34;使用send2trash-模块安全删除&#34;&gt;使用&lt;code&gt;send2trash&lt;/code&gt; 模块安全删除&lt;/h3&gt;
&lt;p&gt;上一节中的三个方法都是永久的删除文件或文件夹，所以在使用起来可能会有风险。使用&lt;code&gt;send2trash&lt;/code&gt;方法可以将文件或文件夹移入回收站，方便误删后的恢复。在使用&lt;code&gt;send2trash&lt;/code&gt;方法前，我们先要安装它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; send2trash
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dogList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dog.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dogList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m a cat.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dogList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; send2trash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send2trash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dog.txt&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; send2trash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send2trash(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oldFolder_backup&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;遍历目录树&#34;&gt;遍历目录树&lt;/h2&gt;
&lt;p&gt;处理一个文件夹及其子文件夹下的所有文件可能会是一个复杂的操作，但是python 提供了一个函数&lt;code&gt;os.walk()&lt;/code&gt;，方便了这个过程。该函数接收一个路径参数，返回该路径下的子文件夹名称及文件名称并层层遍历。&lt;/p&gt;
&lt;p&gt;假如在当前文件夹下有一个文件夹cat 其文件目录如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/07/30/5d3fa6df930f256683.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用下面的代码来输出cat 文件夹下的所有子文件夹及文件名称字符串。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; folderName, subfolders, filenames &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;walk(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cat&amp;#39;&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The current folder is &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; folderName)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; subfolder &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; subfolders:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUBFOLDER OF &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; folderName &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; subfolder)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filenames:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FILE INSIDE &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; folderName &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; filename)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The current folder is .\cat
SUBFOLDER OF .\cat: Libai
SUBFOLDER OF .\cat: Zhongfen

The current folder is .\cat\Libai
FILE INSIDE .\cat\Libai: head.jpg
FILE INSIDE .\cat\Libai: info.txt

The current folder is .\cat\Zhongfen
FILE INSIDE .\cat\Zhongfen: head.jpg
FILE INSIDE .\cat\Zhongfen: info.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用zipfile模块处理压缩文件&#34;&gt;使用&lt;code&gt;zipfile&lt;/code&gt;模块处理压缩文件&lt;/h2&gt;
&lt;p&gt;我们将上一节中的cat 文件夹压缩为一个zip 压缩文件，在本节使用。&lt;/p&gt;
&lt;h3 id=&#34;读取zip-文件&#34;&gt;读取zip 文件&lt;/h3&gt;
&lt;p&gt;要读取zip 文件，首先创建一个ZipFile 对象。具体用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; zipfile
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; catZip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zipfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ZipFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat.zip&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; catZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;namelist()
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Libai/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Libai/head.jpg&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Libai/info.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Zhongfen/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Zhongfen/head.jpg&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Zhongfen/info.txt&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; libaiInfo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; catZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getinfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Libai/info.txt&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; libaiInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file_size
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; libaiInfo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compress_size
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;从zip-文件中解压缩&#34;&gt;从zip 文件中解压缩&lt;/h3&gt;
&lt;p&gt;ZipFile 对象的&lt;code&gt;extractall()&lt;/code&gt;方法从ZIP 文件中解压缩所有文件和文件夹，放到当前工作目录中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; catZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extractall()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; catZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ZipFile 对象的&lt;code&gt;extract()&lt;/code&gt;方法从ZIP文件中解压出单个文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; catZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extract(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Libai/info.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cat&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Libai&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;info.txt&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中第二个参数为解压缩后文件的位置，他将在后续被输出出来。&lt;/p&gt;
&lt;h3 id=&#34;创建和添加到zip-文件&#34;&gt;创建和添加到ZIP 文件&lt;/h3&gt;
&lt;p&gt;要创建一个压缩文件，必须以写模式打开ZipFile 对象，即传入“w”作为第二个参数，但这会删除压缩文件中原有的内容，若要向压缩文件中添加新内容，可以以“a”作为第二个参数打开。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; newZip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zipfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ZipFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;new.zip&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; newZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cat/Libai/info.txt&amp;#39;&lt;/span&gt;, compress_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zipfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ZIP_DEFLATED)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; newZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;小项目&#34;&gt;小项目&lt;/h2&gt;
&lt;p&gt;假定我们在做一个项目，它的文件保存在 ./cat 文件夹中。我们担心工作会丢失，所以希望为整个文件夹创建一个ZIP 文件，作为“快照”。希望保存不同的版本，希望ZIP 文件的文件名每次创建时都有所变化。例如cat_1.zip、cat_2.zip等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; zipfile
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backup2zip&lt;/span&gt;(folder):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Backup the entire contents of &amp;#34;folder&amp;#34; into a ZIP file.&lt;/span&gt;
    folder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abspath(folder)  &lt;span style=&#34;color:#75715e&#34;&gt;# make sure folder is absolute&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Figure out the filename this code should use based on what files already exist.&lt;/span&gt;
    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
        zipFilename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(folder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(number) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.zip&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(zipFilename):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Create the ZIP file.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (zipFilename))
    backupZip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zipfile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ZipFile(zipFilename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Walk the entire folder tree and compress the files in each folder.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; foldername, subfolders, filenames &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;walk(folder):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Adding files in &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (foldername))
        &lt;span style=&#34;color:#75715e&#34;&gt;# Add the current folder to ZIP file.&lt;/span&gt;
        backupZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(foldername)
    &lt;span style=&#34;color:#75715e&#34;&gt;# Add all the files in this folder to the ZIP file.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filenames:
        newBase &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(folder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; filename&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(newBase) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; filename&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.zip&amp;#39;&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
        backupZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(foldername, filename))
    backupZip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Done.&amp;#39;&lt;/span&gt;)


backup2zip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./cat&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[Python学习笔记]系列是我在学习《Python编程快速上手——让繁琐工作自动化(Automate The Boring Stuff With Python)》这本书时的学习笔记。通过自己再手敲一遍概念和代码，方便自己记忆和日后查阅。如果对你有帮助，那就更好了！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>PythonNotes.文件的读取写入</title>
      <link>https://happy.dereen.top/post/pythonnotes02/</link>
      <pubDate>Wed, 26 Sep 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes02/</guid>
      
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;文件与文件路径&#34;&gt;文件与文件路径&lt;/h2&gt;
&lt;h3 id=&#34;路径合成-ospathjoin&#34;&gt;路径合成 &lt;code&gt;os.path.join()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在Windows上，路径中以倒斜杠作为文件夹之间的分隔符，Linux或OS X中则是正斜杠。如果想要程序正确运行于所有操作系统上，就必须要处理这种情况。&lt;code&gt;os.path.join()&lt;/code&gt;方法可以正确的根据不同的操作系统来合成路径，它的用法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Program&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QQ&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pet&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Program&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;QQ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Pet&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 在windows下返回的结果&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Program/QQ/Pet&amp;#39;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 在Linux或OS X下返回的结果&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; myFiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accounts.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;details.csv&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invite.docx&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; myFiles:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Users&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Dereen&amp;#34;&lt;/span&gt;, filename))
C:\Users\Dereen\accounts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt
C:\Users\Dereen\details&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;csv
C:\Users\Dereen\invite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;docx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看并改变当前工作目录&#34;&gt;查看并改变当前工作目录&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;os.getcwd()&lt;/code&gt;来获取当前工作目录，使用&lt;code&gt;os.chdir()&lt;/code&gt;来改变当前工作目录。这么做的意义是所有没有从根文件夹开始的文件名或路径，都假定在当前工作目录下。如果当前工作目录错误容易引发各种该问题，或者不想用当前工作目录作为根目录，而是想用别的目录作为根目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;F:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Learn&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Automate-the-Boring-Stuff-with-Python-Solutions&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system32&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system32&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;绝对路径与相对路径&#34;&gt;绝对路径与相对路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;“绝对路径”：总是从根文件夹开始；&lt;/li&gt;
&lt;li&gt;“相对路径”：它相对于程序的当前工作目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;code&gt;C:\Program Files\QQ\music&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假如当前工作目录为&lt;code&gt;C:\Program Files&lt;/code&gt;，则对&lt;code&gt;music&lt;/code&gt;文件夹来说，其相对路径为：&lt;code&gt;.\QQ\music&lt;/code&gt;，绝对路径为：&lt;code&gt;C:\Program Files\QQ\music&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;创建新文件夹-osmakedirs&#34;&gt;创建新文件夹 &lt;code&gt;os.makedirs()&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;makedirs(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;green&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这个命令会直接在当前文件夹下创建新文件夹color并在其下创建新文件夹green&lt;/p&gt;
&lt;h3 id=&#34;绝对路径与相对路径互转&#34;&gt;绝对路径与相对路径互转&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;相对路径转绝对路径：&lt;code&gt;os.path.abspath(path)&lt;/code&gt;将返回参数的绝对路径的字符串。&lt;/li&gt;
&lt;li&gt;绝对路径转相对路径：&lt;code&gt;os.path.relpath(path, start)&lt;/code&gt;将返回从start路径到path路径的相对路径的字符串。（如果没有提供start，就是用当前工作目录作为开始路径）&lt;/li&gt;
&lt;li&gt;判断一个路径是否为绝对路径：&lt;code&gt;os.isabs(path)&lt;/code&gt;如果是就返回True，不是就返回False。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;abspath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;F:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Learn&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Automate-the-Boring-Stuff-with-Python-Solutions&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relpath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello\Kitty\S&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isabs(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)
False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;目录名称和基本名称路径分割&#34;&gt;目录名称和基本名称（路径分割）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;os.path.dirname(path)&lt;/code&gt;返回path参数中最后一个斜杠之前的所有内容；&lt;code&gt;os.path.basename(path)&lt;/code&gt;返回path参数中最后一个斜杠之后的所有内容。&lt;code&gt;os.path.split(path)&lt;/code&gt;返回一个元组，同时包含2者。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system32&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;calc.exe&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(path)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system32&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tasks&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename(path)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calc.exe&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(path)
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system32&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tasks&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calc.exe&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想要路径进行进一步的分割，就要调用字符串中的&lt;code&gt;split()&lt;/code&gt;方法。并向其传入&lt;code&gt;os.path.sep&lt;/code&gt;参数。（&lt;code&gt;os.path.sep&lt;/code&gt;在不同的操作系统下，值也不同，在windows下值为&amp;rdquo;\&amp;quot;），例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep)
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Windows&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system32&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;calc.exe&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看文件大小和文件夹内容&#34;&gt;查看文件大小和文件夹内容&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;os.path.getsize(filepath)&lt;/code&gt;来查看单个文件的大小，注意不能查看文件夹的大小。使用&lt;code&gt;os.listdir(path)&lt;/code&gt;来查看该目录下的所有文件及文件夹。二者组合使用可以计算文件夹的大小。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;System32&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;calc.exe&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;27648&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;System32&amp;#34;&lt;/span&gt;)
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0409&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@AppHelpToast.png&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@AudioToastIcon.png&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@BackgroundAccessToastIcon.png&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@bitlockertoastimage.png&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@edptoastimage.png&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@EnrollmentToastIcon.png&amp;#39;&lt;/span&gt;, 
&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;snip&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xwreg.dll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xwtpdui.dll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xwtpw32.dll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zh-CN&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zh-HANS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zh-TW&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zipcontainer.dll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zipfldr.dll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ztrace_maps.dll&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; totalSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;System32&amp;#34;&lt;/span&gt;):
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     totalSize &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getsize(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Windows&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;System32&amp;#34;&lt;/span&gt;, file))
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(totalSize)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2249563697&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;检查路径有效性&#34;&gt;检查路径有效性&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;os.path.exists(path)&lt;/code&gt;检查path所指的文件或文件夹是否存在；&lt;code&gt;os.path.isdir()&lt;/code&gt;检查参数path传入的值是否为一个文件夹；&lt;code&gt;os.path.isfile()&lt;/code&gt;检查参数path传入的值是否为一个文件。例如;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Windows&amp;#34;&lt;/span&gt;)
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdir(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Windows&amp;#34;&lt;/span&gt;)
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isfile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Windows&amp;#34;&lt;/span&gt;)
False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;文件读写过程&#34;&gt;文件读写过程&lt;/h2&gt;
&lt;p&gt;在开始前先介绍一下文件的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯文本文件：只包含基本文本字符，不包含字体、大小、颜色和其他信息。例如：.txt文件、.md文件和.py文件；&lt;/li&gt;
&lt;li&gt;二进制文件：所有其他文件类型，例如.pdf文件、.docx文件等；使用纯文本文件编辑器打开一个二进制文件就会显示乱码，如图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/06/27/5d145160cebc162418.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Python中，读写文件有3个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;code&gt;open()&lt;/code&gt;函数，返回一个File对象；&lt;/li&gt;
&lt;li&gt;调用File对象的&lt;code&gt;read()&lt;/code&gt;或&lt;code&gt;write()&lt;/code&gt;方法；&lt;/li&gt;
&lt;li&gt;调用File对象的&lt;code&gt;close()&lt;/code&gt;方法，关闭该文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;打开文件&#34;&gt;打开文件&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;open()&lt;/code&gt;函数打开文件，在打开文件时可同时传入参数（默认为‘r’，只读模式）。该函数会返回一个对象，该对象包含文档内容以及名称、打开模式以及文档编码模式。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;README.md&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; content
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_io&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TextIOWrapper name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt; mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt; encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;传递参数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;r&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只读模式打开，即只能读取文件内容不能写入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;w&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;可以写入内容，但是会清除原文档所有内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;x&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;用于创建并写新文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;用于在文档尾部进行扩展（不会清除原文档内容）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;读取文件内容&#34;&gt;读取文件内容&lt;/h3&gt;
&lt;p&gt;在上一步中，我们使用&lt;code&gt;open()&lt;/code&gt;函数打开文件并返回了一个文件对象，这里，我们可以使用&lt;code&gt;read()&lt;/code&gt;或&lt;code&gt;readlines()&lt;/code&gt;方法读取这个文件对象中的内容。其中，前者将文件中的所有内容读取为一个大字符串，后者按行读取文件，每行为一个字符串并最终形成一个列表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello.txt&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines()
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;How are you?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m fine, thanks, and you?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m fine, too.&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seek(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How are you?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&amp;#39;m fine, thanks, and you?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&amp;#39;m fine, too.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码中，由于先使用了&lt;code&gt;readlines()&lt;/code&gt;方法，所以在使用&lt;code&gt;read()&lt;/code&gt;方法时，&lt;a href=&#34;https://www.cnblogs.com/blogCblog/p/5597973.html&#34;&gt;文件指针&lt;/a&gt;已经到了第四行，而第四行是没有内容的，所以&lt;code&gt;read()&lt;/code&gt;方法返回的值为空。为了解决这个问题我们使用&lt;code&gt;seed()&lt;/code&gt;方法，将文件指针重新指向第1行。然后在执行接下来的&lt;code&gt;read()&lt;/code&gt;操作就可以了。&lt;/p&gt;
&lt;h3 id=&#34;写入文件&#34;&gt;写入文件&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;write()&lt;/code&gt;方法向文件中写入新内容。当以只读模式打开时，不能写入新内容。以&lt;code&gt;w&lt;/code&gt;模式打开文件写入时会覆盖掉文件中所有原内容，以&lt;code&gt;a&lt;/code&gt;模式打开文件写入时会在文件尾部插入新内容。&lt;/p&gt;
&lt;p&gt;当打开的文件不存在时，&lt;code&gt;w&lt;/code&gt;和&lt;code&gt;a&lt;/code&gt;模式都会新建一个文件并写入内容。在读取或写入后，要调用&lt;code&gt;close()&lt;/code&gt;方法，然后才能再次打开该文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thank you!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello.txt&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; contentFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How are you?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&amp;#39;m fine, thanks, and you?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&amp;#39;m fine, too.Thank you!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;用shelve模块保存变量&#34;&gt;用shelve模块保存变量&lt;/h2&gt;
&lt;p&gt;利用shelve模块，可以将Python程序中的变量保存到二进制的shelf文件中。这样，程序就可以从硬盘中恢复变量的数据。shelve模块相当于让我们在程序中增加“保存”和“打开”功能。例如，运行一个程序，并输入了一些配置设置，就可以将这些设置保存到一个shelf文件，然后让程序下一次运行时加载它们。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shelve
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shelve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mydata&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Libai&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dufu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhupi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhongfen&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cats&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cats
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个程序会在当前目录下生成三个文件：&lt;code&gt;mydata.bak&lt;/code&gt;、&lt;code&gt;mydata.dat&lt;/code&gt;和&lt;code&gt;mydata.dir&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shelve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mydata&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; type(shelfFile)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;shelve&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DbfilenameShelf&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cats&amp;#39;&lt;/span&gt;]
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Libai&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dufu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhupi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhongfen&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码检查了shelfFile中的内容，像字典一样，shelf值有&lt;code&gt;keys()&lt;/code&gt;和&lt;code&gt;values()&lt;/code&gt;方法，返回shelf中键和值的类似列表的值。要想使用它们，我们还要把它们转化为列表类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shelve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mydata&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list(shelfFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cats&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list(shelfFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values())
[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Libai&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dufu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhupi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhongfen&amp;#39;&lt;/span&gt;]]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; list(shelfFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values())[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Libai&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dufu&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhupi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhongfen&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; shelfFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用pprintpformat函数保存变量&#34;&gt;使用&lt;code&gt;pprint.pformat()&lt;/code&gt;函数保存变量&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pprint()&lt;/code&gt;是一种将列表、字典或元组以更漂亮、规范的格式输出的一个方法。我们可以利用&lt;code&gt;pprint.pformat()&lt;/code&gt;函数将变量写入&lt;code&gt;.py&lt;/code&gt;文件。该文件将成为一个模块，方便我们下次进行使用。而且与shelve模块中的方法不同的事，&lt;code&gt;.py&lt;/code&gt;文件能够方便的使用一些常见的记事本文件打开查看。例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Libai&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;White&amp;#39;&lt;/span&gt;}, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhupi&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Orange&amp;#39;&lt;/span&gt;}]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pformat(cats)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[{&amp;#39;color&amp;#39;: &amp;#39;White&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;Libai&amp;#39;}, {&amp;#39;color&amp;#39;: &amp;#39;Orange&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;Zhupi&amp;#39;}]&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myCats.py&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cats = &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pprint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pformat(cats) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; myCats
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; myCats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cats
[{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;White&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Libai&amp;#39;&lt;/span&gt;}, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Orange&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zhupi&amp;#39;&lt;/span&gt;}]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; myCats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cats[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;White&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Libai&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; myCats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cats[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Libai&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是，对于大多数的应用，我们还是利用shelve模块来保存数据。只有基本数据类型，例如整型、浮点型、字符串、列表和字典等，可以用这个方法当做简单文本写入文件。&lt;/p&gt;
&lt;h2 id=&#34;小项目一随机测验试卷生成&#34;&gt;小项目一（随机测验试卷生成）&lt;/h2&gt;
&lt;p&gt;假如一位老师要考察班上35名同学对于美国50个州首府的了解情况，他打算用选择题的形式来考察。但是为了防止有人作弊，他打算将题目的顺序打乱且每道题目的选项中除了正确的那个，其他的都是从其他49个州的首府中随机抽取的，那么下面的代码会很有用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# randomQuizGenerator.py - Create quizzes with questions and answers in random order, along with the answer key.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#75715e&#34;&gt;# The quiz data. Key are states and values are their capitals.&lt;/span&gt;
capitals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alabama&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Montgomery&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alaska&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Juneau&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Arizona&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Phoenix&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Arkansas&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Little Rock&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;California&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sacramento&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Denver&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connecticut&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hartford&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Delaware&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Dover&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Florida&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tallahassee&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Georgia&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atlanta&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hawaii&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Honolulu&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Idaho&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Boise&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Illinois&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Springfield&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Indiana&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Indianapolis&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Iowa&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Des Monies&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Kansas&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Topeka&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Kentucky&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Frankfort&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Louisiana&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Baton Rouge&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Maine&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Augusta&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Maryland&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Annapolis&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Massachusetts&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Boston&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Michigan&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Lansing&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Saint Paul&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mississippi&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jackson&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Missouri&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jefferson City&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Montana&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Helena&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nebraska&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Lincoln&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nevada&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Carson City&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New Hampshire&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Concord&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New Jersey&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Trenton&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New Mexico&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Santa Fe&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Albany&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;North Carolina&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Raleigh&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;North Dakota&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bismarck&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Ohio&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Columbus&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Oklahoma&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Oklahoma City&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Oregon&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Salem&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pennsylvania&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Harrisburg&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rhode Island&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Providence&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;South Carolina&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Columbia&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;South Dakota&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pierre&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tennessee&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nashville&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Texas&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Austin&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Utah&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Salt Lake City&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Vermont&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Montpelier&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Virginia&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Richmond&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Washington&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Olympia&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;West Virginia&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Charleston&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wisconsin&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Madison&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wyoming&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Cheyenne&amp;#39;&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# Generate 35 quiz files.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; quizNum &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Create the quiz and answer key files.&lt;/span&gt;
    quizFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capitalsquiz&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (quizNum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
    answerKeyFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;capitalsquiz_answers&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.txt&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (quizNum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Write out the header for the quiz.&lt;/span&gt;
    quizFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Name:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Date:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Period:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    quizFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State Capitals Quiz (Form &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (quizNum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
    quizFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Shuffle the order of the states.&lt;/span&gt;
    states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(capitals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())
    random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(states)

    &lt;span style=&#34;color:#75715e&#34;&gt;# Loop through all 50 states, making a question for each.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; questionNum &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;):

        &lt;span style=&#34;color:#75715e&#34;&gt;# Get right and wrong answers.&lt;/span&gt;
        correctAnswer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; capitals[states[questionNum]]
        wrongAnswers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(capitals&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values())
        &lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; wrongAnswers[wrongAnswers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(correctAnswer)]
        wrongAnswers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sample(wrongAnswers, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
        answerOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wrongAnswers &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [correctAnswer]
        random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(answerOptions)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Write the question and the answer options to the quiz file.&lt;/span&gt;
        quizFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;. What is the capital of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (questionNum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, states[questionNum]))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):
            quizFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;. &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt; [i], answerOptions[i]))
        quizFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Write the answer key to a file.&lt;/span&gt;
        answerKeyFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;. &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (questionNum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCD&amp;#39;&lt;/span&gt; [answerOptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(correctAnswer)]))
    quizFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
    answerKeyFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;小项目二多重剪贴板&#34;&gt;小项目二（多重剪贴板）&lt;/h2&gt;
&lt;p&gt;这个代码实现了一个简单的功能，即将剪贴板中的内容以关键字的方式保存，而且可以以关键字的方式提取，相当于一个暂存（多重）剪贴板。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mab.pyw - Saves and loads pieces of text to the clipboard.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Usage: py.exe mcb.pyw save &amp;lt;keyword&amp;gt; - Saves clipboard to keyword.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#        py.exe mcb.pyw &amp;lt;keyword&amp;gt; - Loads keyword to clipboard.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#        py.exe mcb.pyw list - Loads all keywords to clipboard.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shelve
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyperclip
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

mcbShelf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shelve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mcb&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Save clipboard content.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;save&amp;#39;&lt;/span&gt;:
    mcbShelf[sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyperclip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;paste()
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# List keywords and load content.&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;:
        pyperclip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(str(list(mcbShelf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mcbShelf:
        pyperclip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(mcbShelf[sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]])

mcbShelf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;[Python学习笔记]系列是我在学习《Python编程快速上手——让繁琐工作自动化(Automate The Boring Stuff With Python)》这本书时的学习笔记。通过自己再手敲一遍概念和代码，方便自己记忆和日后查阅。如果对你有帮助，那就更好了！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>PythonNotes.正则表达式</title>
      <link>https://happy.dereen.top/post/pythonnotes01/</link>
      <pubDate>Mon, 24 Sep 2018 12:46:25 +0800</pubDate>
      
      <guid>https://happy.dereen.top/post/pythonnotes01/</guid>
      
        <description>&lt;h2 id=&#34;常用缩写字符及其含义表格查询&#34;&gt;常用缩写字符及其含义表格查询&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;缩写字符分类&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;\d&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0-9的任意数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;\D&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;除0-9的数字以外的任何字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;\w&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任何字母、数字或下划线字符（可以认为是匹配“单词”字符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;\W&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;除字母、数字和下划线意外的任何字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;\s&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;空格、制表符或换行符（可以认为是匹配“空白”字符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;\S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;除空格、制表符或换行符的任何字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;问号紧跟于分组后表示前面分组的内容是可有可无的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;星号紧跟于分组后表示前面分组的内容匹配0次或多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;+&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;加号紧跟于分组后表示前面分组的内容匹配至少1次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;|&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;管道匹配多个分组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;{}&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;花括号内加数字表示匹配特定字数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;句点表示匹配任何字符（除了换行）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;在python中使用正则表达式的步骤&#34;&gt;在Python中使用正则表达式的步骤&lt;/h2&gt;
&lt;p&gt;在Python中使用正则表达式主要有下面几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用&lt;code&gt;import re&lt;/code&gt;导入正则表达式模块；&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;re.compile()&lt;/code&gt;函数创建一个Regex 对象；&lt;/li&gt;
&lt;li&gt;向Regex 对象的&lt;code&gt;search()&lt;/code&gt;或&lt;code&gt;findall()&lt;/code&gt;方法传入目标字符串；&lt;/li&gt;
&lt;li&gt;调用Matches 对象的&lt;code&gt;group()&lt;/code&gt;方法，返回实际匹配文本的字符串。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;python正则表达式详细说明&#34;&gt;Python正则表达式详细说明&lt;/h2&gt;
&lt;h3 id=&#34;通过在字符串的第一个引号之前加r来向recompile传递原始字符串&#34;&gt;通过在字符串的第一个引号之前加r来向&lt;code&gt;re.compile()&lt;/code&gt;传递原始字符串&lt;/h3&gt;
&lt;p&gt;Python中转义字符使用倒斜杠&amp;rdquo;\&amp;quot;。假如我们需要打印出&amp;rdquo;\n&amp;rdquo;，则需要输入转义字符\\，才能打印出一个倒斜杠。所以&amp;rdquo;\\n&amp;quot;表示一个倒斜杠加上一个小写的n。但是，通过在字符串的第一个引号之前加上r，可以将该字符串标记为原始字符串，它不包括转义字符。&lt;/p&gt;
&lt;h3 id=&#34;利用括号分组&#34;&gt;利用括号分组&lt;/h3&gt;
&lt;p&gt;假如我们想要匹配下面文本中的电话号码，并且将区号从中分离。则我们可以添加括号在正则表达式中创建“分组”：&lt;code&gt;(\d\d\d)-(\d\d\d\d\d\d\d\d)&lt;/code&gt;。然后使用&lt;code&gt;group()&lt;/code&gt;匹配对象方法，从第二个分组中获取需要的文本。正则表达式字符串中的第一对括号是第一组，第二对括号是第二组。向&lt;code&gt;group()&lt;/code&gt;匹配对象方法传入整数1或2，就可以取得匹配文本的不同部分。向&lt;code&gt;group()&lt;/code&gt;方法传入0或不传参数，将返回整个匹配的文本,&lt;code&gt;groups()&lt;/code&gt; 方法可以一次获取所有的分组。**（注意groups()和group(0)的差异）**例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; phoneNumRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d\d\d)-(\d\d\d\d\d\d\d\d)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; phoneNumRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My number is 029-88888888. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;029&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;88888888&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;029-88888888&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;029-88888888&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groups()
(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;029&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;88888888&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;用管道匹配多个分组&#34;&gt;用管道匹配多个分组&lt;/h3&gt;
&lt;p&gt;字符“|”称为“管道”。希望匹配许多表达式中的一个时，就可以使用它。例如，正则表达式&lt;code&gt;r&amp;quot;Kitty|Tiny&amp;quot;&lt;/code&gt;将匹配“Kitty”或“Tiny”。如果二者都在文本中，则第一个出现的将作为Match对象返回。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; nameRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kitty|Tiny&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nameRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tiny and Rose and Kitty. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tiny&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如我们希望匹配Batman、Batwoman、Batcar、Batmobile中的任意一个，因为这些单词都是以Bat开始，所以如果只指定一次前缀就会很方便。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; nameRegex_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bat(man|woman|car|mobile)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nameRegex_2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Batt、Batmobile、Batwoman、Batcar、Batman&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Batmobile&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mobile&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;问号紧跟于分组后表示前面分组的内容是可有可无的&#34;&gt;问号紧跟于分组后表示前面分组的内容是可有可无的&lt;/h3&gt;
&lt;p&gt;例如在匹配电话号码的例子中，假如遇到没有区号的电话号码，前面例子中的代码是无法匹配的，我们可以通过在分组后加问号来解决。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; phoneNumRegex_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d\d\d-)?(\d\d\d\d\d\d\d\d)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; phoneNumRegex_2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My phone number is 12356897. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;12356897&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;星号紧跟于分组后表示前面分组的内容匹配0次或多次&#34;&gt;星号紧跟于分组后表示前面分组的内容匹配0次或多次&lt;/h3&gt;
&lt;p&gt;简单，不用解释，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; emRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e(m)*&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; emRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emmmmmmmmmmm fuck trump. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emmmmmmmmmmm&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;加号紧跟于分组后表示前面分组的内容匹配至少1次&#34;&gt;加号紧跟于分组后表示前面分组的内容匹配至少1次&lt;/h3&gt;
&lt;p&gt;简单，不用解释，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; emRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e(m)+&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; emRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e fuck trump. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
Traceback (most recent call last):
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;AttributeError&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NoneType&amp;#39;&lt;/span&gt; object has no attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 没找到&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; emRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;em fuck trump. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;em&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;用花括号匹配特定次数&#34;&gt;用花括号匹配特定次数&lt;/h3&gt;
&lt;p&gt;如果想要查找一个分组重复特定次数的文本，则在该分组后紧跟一个花括号，其中的数字表示重复的次数。例如：(ha){3}匹配字符串“hahaha”，(ha){1,3}匹配字符串“ha”、“haha”或“hahaha”。这个花括号里面的规则和数组切片的那个规则是一样的，如{3,}将匹配3次及以上实例；{,5}将匹配0到5次实例。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; haRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(ha){1,}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; haRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hahahahahahahahahahah. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hahahahahahahahahaha&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;用来匹配除了换行符之外的任意多个字符&#34;&gt;用&lt;code&gt;.*&lt;/code&gt;来匹配除了换行符之外的任意多个字符&lt;/h3&gt;
&lt;p&gt;.可以匹配任意字符（除了换行符），*表示之前分组重复0及以上次数。则&lt;code&gt;.*&lt;/code&gt;组合可以匹配任意字符串（除换行符）。&lt;/p&gt;
&lt;h3 id=&#34;贪心和非贪心匹配&#34;&gt;贪心和非贪心匹配&lt;/h3&gt;
&lt;p&gt;在前面的例子中，&lt;code&gt;(ha){1,}&lt;/code&gt;可以匹配1个或其他数量个ha，但为什么会返回最长的。这是因为Python的正则表达式默认是贪心的，这表示在有二义的情况下，他们匹配最长的字符串。要想让他返回最短的那个，即将他变成非贪心的，则需要在花括号后加一个问号，**这里注意区别前述中分组后加问号是表示可有可无的意思。**例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; haRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(ha){1,}?&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; haRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hahahahahahahahahahah. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ha&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;search方法返回第一个匹配到的对象findall方法返回所有匹配到的字符串&#34;&gt;&lt;code&gt;search()&lt;/code&gt;方法返回第一个匹配到的对象，&lt;code&gt;findall()&lt;/code&gt;方法返回所有匹配到的字符串&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;search()&lt;/code&gt;方法返回一个Match对象，这个对象拥有&lt;code&gt;group()&lt;/code&gt;方法；&lt;code&gt;findall()&lt;/code&gt;方法直接返回一个列表，而列表则没有&lt;code&gt;group()&lt;/code&gt;方法。如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; phoneNumRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(\d\d\d-)?(\d\d\d\d\d\d\d\d)&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; phoneNumRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Home: 029-88618871, Office: 010-36758954. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_sre&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SRE_Match object; span&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;), match&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;029-88618871&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;029-88618871&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; phoneNumRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Home: 029-88618871, Office: 010-36758954. &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo_2
[(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;029-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;88618871&amp;#39;&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;010-&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;36758954&amp;#39;&lt;/span&gt;)]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo_2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;group()
Traceback (most recent call last):
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;AttributeError&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt; object has no attribute &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果调用在一个没有分组的正则表达式上，例如&lt;code&gt;\d\d\d-\d\d\d\d\d\d\d\d&lt;/code&gt;，方法&lt;code&gt;findall()&lt;/code&gt;将返回一个匹配字符串的列表，例如[&amp;lsquo;029-88618871&amp;rsquo;,&amp;lsquo;010-36758954&amp;rsquo;];&lt;/li&gt;
&lt;li&gt;如果调用在一个有分组的正则表达式上，例如&lt;code&gt;(\d\d\d-)?(\d\d\d\d\d\d\d\d)&lt;/code&gt;，方法&lt;code&gt;findall()&lt;/code&gt;将返回一个字符串的元组的列表，每个分组对应元组中的一个字符串，例如：[(&amp;lsquo;029-&#39;, &amp;lsquo;88618871&amp;rsquo;), (&amp;lsquo;010-&#39;, &amp;lsquo;36758954&amp;rsquo;)]。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;建立自己的字符分类&#34;&gt;建立自己的字符分类&lt;/h3&gt;
&lt;p&gt;如果觉得想要匹配的字符由上面的缩写（&lt;code&gt;\s\d\w&lt;/code&gt;等）来表示太宽泛，可以用方括号定义自己的字符分类。如[abcdeABCDE]或[a-eA-E]将匹配“abcdeABCDE”中的任意字符一次。&lt;strong&gt;值得注意的是，方括号中普通的正则表达式符号不会被解释，这就意味着在匹配&amp;rdquo;.&amp;ldquo;时不需要输入&amp;rdquo;\.&amp;ldquo;等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过在左方括号后紧跟一个^字符，就可以得到“非字符类”。如[^a-eA-E]就匹配所有除了“abcdeABCDE”以外的任意字符一次。&lt;/p&gt;
&lt;h3 id=&#34;插入字符和美元字符&#34;&gt;插入字符和美元字符&lt;/h3&gt;
&lt;p&gt;在正则表达式的开始处使用插入符号（^），表明匹配必须发生在被查找文本的开始除。类似的，在正则表达式的末尾加上美元符号（$），表示该字符串必须以这个正则表达式的模式结束才可以匹配到。二者可以同时使用。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;helloRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^hello&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helloRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;oh, hello!&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helloRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, Kitty.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; None
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mo_2
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_sre&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SRE_Match object; span&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), match&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用sub方法替换字符串&#34;&gt;使用&lt;code&gt;sub()&lt;/code&gt;方法替换字符串&lt;/h3&gt;
&lt;p&gt;正则表达式不仅能够找到字符串，还能够捎带着替代找到的字符串，Regex对象的&lt;code&gt;sub()&lt;/code&gt;方法需要传入两个字符串参数。第一个参数用来取代查找到的字符串，第二个参数为要查找的字符串。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; findXiamenRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Xiamen&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; findXiamenRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Xi&amp;#39;an&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Xiamen is the capital of Shaanxi.&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Xi&amp;#39;an is the capital of Shaanxi.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;通过传入reignorecaseredotall和reverbose来忽略大小写匹配换行符和多行输入正则表达式&#34;&gt;通过传入&lt;code&gt;re.IGNORECASE&lt;/code&gt;、&lt;code&gt;re.DOTALL&lt;/code&gt;和&lt;code&gt;re.VERBOSE&lt;/code&gt;来忽略大小写、匹配换行符和多行输入正则表达式&lt;/h3&gt;
&lt;p&gt;向&lt;code&gt;re.compile()&lt;/code&gt;中传入re.IGNORECASE或re.I参数可以在匹配时忽略大小写；传入re.DOTALL参数来使句点能够匹配换行符；传入re.VERBOSE来进行复杂正则表达式的多行输入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;re.compile()&lt;/code&gt;不支持同时传入多个以上的3个参数，我们可以使用管道符号&amp;quot;|&amp;quot;来进行多个参数的传入。例如&lt;code&gt;re.compile(r&amp;quot;fool&amp;quot;, re.I|re.DOTALL|re.VERBOSE)&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;小项目提取剪贴板中的手机号码座机号码和邮件地址并转换为规范格式并重新写回剪贴板做完就啥都懂了&#34;&gt;小项目：提取剪贴板中的手机号码、座机号码和邮件地址，并转换为规范格式并重新写回剪贴板（做完就啥都懂了）&lt;/h2&gt;
&lt;p&gt;这个项目可以分为以下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从剪贴板取得文本；&lt;/li&gt;
&lt;li&gt;找出文本中所有的手机号码、座机号码和邮件地址；&lt;/li&gt;
&lt;li&gt;将它们粘贴回剪贴板。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先我们通过网络搜索得知，国内座机号码区号位3-4位，且均位0开头；国内手机号码则都是1开头的，有的可能含有86或+86前缀。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#! python3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyperclip
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re

&lt;span style=&#34;color:#75715e&#34;&gt;# create phone number regex&lt;/span&gt;

phone1_Regex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (\+)?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (86)?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (1\d{2})
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (-|\s)?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (\d{8})
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (\D)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;VERBOSE)

phone2_Regex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (0\d{2,3})?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    [-]?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (\d{8})
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (\-\d{1,4})?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;VERBOSE)

&lt;span style=&#34;color:#75715e&#34;&gt;# create email regex&lt;/span&gt;
emailRegex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    [a-zA-Z0-9._%+-]+
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    @
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    [a-zA-Z0-9.-]+
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;, re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;VERBOSE)

&lt;span style=&#34;color:#75715e&#34;&gt;# Find matches in clipboard text.&lt;/span&gt;
text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(pyperclip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;paste())
matches &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; groups &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; phone1_Regex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(text):
    phoneNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]
    matches&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(phoneNum)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; groups &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; phone2_Regex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(text):
    phoneNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None:
        phoneNum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; groups[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
    matches&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(phoneNum)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; groups &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; emailRegex&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(text):
    matches&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(groups))

&lt;span style=&#34;color:#75715e&#34;&gt;# Copy results to the clipboard.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(matches) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
    pyperclip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(matches))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copied to clipboard: &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(matches))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No phone numbers or email address found. &amp;#34;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复制一段含有手机号码和电子邮件地址的文本，然后运行程序试试吧。&lt;/p&gt;
&lt;h2 id=&#34;更多python正则表达式&#34;&gt;更多Python正则表达式&lt;/h2&gt;
&lt;p&gt;更多Python正则表达式内容见：&lt;a href=&#34;https://docs.python.org/zh-cn/3/library/re.html&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Python学习笔记]系列是我在学习《Python编程快速上手——让繁琐工作自动化(Automate The Boring Stuff With Python)》这本书时的学习笔记。通过自己再手敲一遍概念和代码，方便自己记忆和日后查阅。如果对你有帮助，那就更好了！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
  </channel>
</rss>
